{"pageProps":{"postData":{"_id":"5fb66b529f9e7f16fd324c35","id":"peek-readable","crawlTimestamp":"19/11/2020 12:55:45","packageName":"peek-readable","description":"Read and peek from a readable stream","repository":{"type":"git","url":"git+https://github.com/Borewit/peek-readable.git"},"readme":"[![Build Status](https://travis-ci.org/Borewit/peek-readable.svg?branch=master)](https://travis-ci.org/Borewit/peek-readable)\n[![NPM version](https://badge.fury.io/js/peek-readable.svg)](https://npmjs.org/package/peek-readable)\n[![npm downloads](http://img.shields.io/npm/dm/peek-readable.svg)](https://npmcharts.com/compare/peek-readable?start=600&interval=30)\n[![Dependencies](https://david-dm.org/Borewit/peek-readable.svg)](https://david-dm.org/Borewit/peek-readable)\n[![Coverage Status](https://coveralls.io/repos/github/Borewit/peek-readable/badge.svg?branch=master)](https://coveralls.io/github/Borewit/peek-readable?branch=master)\n[![Codacy Badge](https://api.codacy.com/project/badge/Grade/8a89b90858734a6da07570eaf2e89849)](https://www.codacy.com/app/Borewit/peek-readable?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=Borewit/peek-readable&amp;utm_campaign=Badge_Grade)\n[![Total alerts](https://img.shields.io/lgtm/alerts/g/Borewit/peek-readable.svg?logo=lgtm&logoWidth=18)](https://lgtm.com/projects/g/Borewit/peek-readable/alerts/)\n[![Language grade: JavaScript](https://img.shields.io/lgtm/grade/javascript/g/Borewit/peek-readable.svg?logo=lgtm&logoWidth=18)](https://lgtm.com/projects/g/Borewit/peek-readable/context:javascript)\n[![Known Vulnerabilities](https://snyk.io/test/github/Borewit/peek-readable/badge.svg?targetFile=package.json)](https://snyk.io/test/github/Borewit/peek-readable?targetFile=package.json)\n\n# peek-readable\n\nA promise based asynchronous stream reader, which makes reading from a stream easy.\n\nAllows to read and peek from a [Readable Stream](https://nodejs.org/api/stream.html#stream_readable_streams) \n\nNote that [peek-readable](https://github.com/Borewit/peek-readable) was formally released as [then-read-stream](https://github.com/Borewit/peek-readable).\n\n## Usage\n\n### Installation\n\n```shell script\nnpm install --save peek-readable\n```\n\nThe `peek-readable` contains one class: `StreamReader`, which reads from a [stream.Readable](https://nodejs.org/api/stream.html#stream_class_stream_readable).\n\n### Compatibility\n\nNPM module is compliant with [ECMAScript 2017 (ES8)](https://en.wikipedia.org/wiki/ECMAScript#8th_Edition_-_ECMAScript_2017).\n\n## Examples\n\nIn the following example we read the first 16 bytes from a stream and store them in our buffer.\nSource code of examples can be found [here](test/examples.ts).\n\n```js\nconst fs = require('fs');\nconst { StreamReader } = require('peek-readable');\n\n(async () => {\n\n  const fileReadStream = fs.createReadStream('JPEG_example_JPG_RIP_001.jpg');\n  const streamReader = new StreamReader(fileReadStream);\n  const buffer = Buffer.alloc(16);\n\n  const bytesRead = await streamReader.read(buffer, 0, 16);\n  // buffer contains 16 bytes, if the end-of-stream has not been reached\n})();\n```\n\nEnd-of-stream detection:\n```js\n(async () => {\n\n  const fileReadStream = fs.createReadStream('JPEG_example_JPG_RIP_001.jpg');\n  const streamReader = new StreamReader(fileReadStream);\n  const buffer = Buffer.alloc(16);\n\n  try {\n    await streamReader.read(buffer, 0, 16);\n    // buffer contains 16 bytes, if the end-of-stream has not been reached\n  } catch(error) {\n    if (error instanceof EndOfStreamError) {\n      console.log('End-of-stream reached');\n    }\n  }\n})();\n```\n\nWith peek you can read ahead:\n```js\nconst fs = require('fs');\nconst { StreamReader } = require('peek-readable');\n\nconst fileReadStream = fs.createReadStream('JPEG_example_JPG_RIP_001.jpg');\nconst streamReader = new StreamReader(fileReadStream);\nconst buffer = Buffer.alloc(20);\n\n(async () => {\n  let bytesRead = await streamReader.peek(buffer, 0, 3);\n  if (bytesRead === 3 && buffer[0] === 0xFF && buffer[1] === 0xD8 && buffer[2] === 0xFF) {\n    console.log('This is a JPEG file');\n  } else {\n    throw Error('Expected a JPEG file');\n  }\n\n  bytesRead = await streamReader.read(buffer, 0, 20); // Read JPEG header\n  if (bytesRead === 20) {\n    console.log('Got the JPEG header');\n  } else {\n    throw Error('Failed to read JPEG header');\n  }\n})();\n```\n\nIf you have to skip a part of the data, you can use ignore:\n```js\n(async () => {\n  //...  \n  await streamReader.ignore(16);\n})();\n```\n\n","homepage":"https://github.com/Borewit/peek-readable#readme","trustScore":7,"sourceRank":{"basic_info_present":1,"repository_present":1,"readme_present":1,"license_present":1,"versions_present":0,"follows_semver":1,"recent_release":0,"not_brand_new":1,"one_point_oh":1,"dependent_projects":0,"dependent_repositories":0,"stars":0,"contributors":0,"subscribers":0,"all_prereleases":0,"any_outdated_dependencies":0,"is_deprecated":0,"is_unmaintained":0,"is_removed":0,"trustScore":7},"versions":[{"versionNumber":"3.1.0","timestamp":"2020-01-06T15:34:07.003Z","trustScore":7,"dependencies":[]}]}},"__N_SSG":true}