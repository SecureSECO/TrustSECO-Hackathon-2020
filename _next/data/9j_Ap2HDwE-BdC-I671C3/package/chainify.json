{"pageProps":{"postData":{"_id":"5fb669b89f9e7f16fd324af7","id":"chainify","crawlTimestamp":"19/11/2020 12:48:55","packageName":"chainify","description":"The chainify module of FuturesJS (Ender.JS and Node.JS)","repository":{"type":"git","url":"git://github.com/coolaj86/futures.git"},"readme":"chainify()\n----\n\nCreates an asynchronous model using asynchronous method queueing.\n\n**Core**\n\n  * `Futures.chainify(providers, modifiers, consumers, context)` - creates an asynchronous model\n    * `providers` - methods which provide data - must return Futures or Joins or undefined\n      * `function (next, params)` must call `next`\n\n    * `modifiers` - methods which use provided data and modify it - act as Sequences\n      * `function (next, err, data [, ...])` must call `next`\n\n    * `consumers` - methods which use data without modifying it - act as simple callbacks\n      * `function (err, data [, ...])`\n\nNote: `next` is an instance of `Futures.deliver`\n\n**Example:**\n\nLet's say we want to produce a model which acts like this:\n\n    Contacts.all({httpAuth: base64(\"coolaj86:secret\")}).limit(30).render();\n\nThe code to produce such a model might look like this:\n\n    var Contacts,\n      providers,\n      modifiers,\n      consumers;\n\n    // Get resources from various sites\n    providers = {\n      facebook: function (next, params) {\n        var future = Futures.future();\n        // make async calls to get data\n\n        // probably best to handle errors\n        // and not pass them on\n        next(data);\n      },\n      twitter: function (next, params) {\n        // same as above\n      },\n      all: function (next, params) {\n        var join = Futures.join();\n        join.add([\n          providers.FacebookContacts(params),\n          providers.TwitterContacts(params)\n        ]);\n        join.when(next);\n      }\n    };\n\n    modifiers = {\n      limit: function(next, data, params) {\n        data = data.first(params);\n        next(data);\n      }\n    };\n\n    consumers = {\n      render: function (data, params) {\n        Template.render(data, params);\n      }\n    };\n\n    Contacts = Futures.chainify(providers, modifiers, consumers);\n","homepage":"","trustScore":7,"sourceRank":{"basic_info_present":1,"repository_present":1,"readme_present":1,"license_present":0,"versions_present":1,"follows_semver":1,"recent_release":0,"not_brand_new":1,"one_point_oh":1,"dependent_projects":0,"dependent_repositories":1,"stars":0,"contributors":0,"subscribers":0,"all_prereleases":0,"any_outdated_dependencies":-1,"is_deprecated":0,"is_unmaintained":0,"is_removed":0,"trustScore":7},"versions":[{"versionNumber":"2.1.1","timestamp":"2011-07-13T20:33:23.083Z","trustScore":3,"dependencies":[{"packageName":"future","version":">= 2.1.1"},{"packageName":"sequence","version":">= 2.1.1"}]},{"versionNumber":"2.1.2","timestamp":"2014-01-13T18:16:51.185Z","trustScore":7,"dependencies":[{"packageName":"future","version":"2.x"},{"packageName":"sequence","version":"2.x"}]}]}},"__N_SSG":true}