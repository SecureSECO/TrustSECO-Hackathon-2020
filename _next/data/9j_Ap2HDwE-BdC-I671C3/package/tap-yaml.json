{"pageProps":{"postData":{"_id":"5fb6652b9f9e7f16fd32475d","id":"tap-yaml","crawlTimestamp":"19/11/2020 12:29:30","packageName":"tap-yaml","description":"Yaml handling for TAP parsers and generators","repository":{"type":"git","url":"git+https://github.com/tapjs/tap-yaml.git"},"readme":"# tap-yaml\n\nYaml handling for TAP parsers and generators\n\n## USAGE\n\n```js\nconst yaml = require('tap-yaml')\n\nconst str = yaml.stringify(someObject)\nconst obj = yaml.parse(someString)\n```\n\nThis is essentially a re-export of the [yaml](http://npm.im/yaml)\npackage, with a few custom types and default properties to be more suitable for\nuse in [tap](https://www.node-tap.org).\n\n1. Symbol types are added, so that they don't throw.  Shared symbols will\n   (within the same process) retain the same Symbol identity through encoding\n   and decoding.  Unshared symbols will not retain their object identity.\n2. A \"safe\" `!function` type is added.  Functions aren't parsed to actual\n   functions using `eval()`, since that's obviously a Bad Idea, but they do\n   parse to an empty function with a `toString()` that contains the original\n   string source.\n3. An `Error` type is added, which does its best to maintain its properties,\n   and always shows message, stack, and name, even if these are non-enumerable.\n   If an Error has a custom inspect method that returns an object, then that is\n   used as the source of extra properties, so you may filter out what gets\n   dumped to your TAP stream.\n4. Binary types are implicitly allowed in a standard way.  In Node.js, this\n   means that a Buffer object is created, and Buffers can be dumped to YAML\n   without any weirdness.\n5. `omap` and `set` are configured to refer to Map and Set objects.\n6. Objects with a `null` prototype maintain their null-prototyped-ness.\n7. `Domain` objects are stringified, but without their giant object graph,\n   since that's often a performance issue.\n8. `Date` objects are given a non-default `!date` tag rather than the default\n   YAML 1.1 `!timestamp`, so that they maintain their explicit date object\n   nature through stringifying and re-parsing.\n9. The `prettyErrors` option is always enabled.\n","homepage":"https://github.com/tapjs/tap-yaml#readme","trustScore":13,"sourceRank":{"basic_info_present":1,"repository_present":1,"readme_present":1,"license_present":1,"versions_present":1,"follows_semver":1,"recent_release":0,"not_brand_new":1,"one_point_oh":1,"dependent_projects":2,"dependent_repositories":3,"stars":0,"contributors":0,"subscribers":0,"all_prereleases":0,"any_outdated_dependencies":0,"is_deprecated":0,"is_unmaintained":0,"is_removed":0,"trustScore":13},"versions":[{"versionNumber":"0.0.0","timestamp":"2019-01-27T00:32:41.215Z","trustScore":5,"dependencies":[{"packageName":"yaml","version":"github:isaacs/yaml#built"}]},{"versionNumber":"0.0.1","timestamp":"2019-02-19T06:20:50.108Z","trustScore":5,"dependencies":[{"packageName":"yaml","version":"github:isaacs/yaml#built"}]},{"versionNumber":"0.0.2","timestamp":"2019-02-20T01:22:20.198Z","trustScore":6,"dependencies":[{"packageName":"yaml","version":"github:isaacs/yaml#built"}]},{"versionNumber":"0.1.0","timestamp":"2019-03-07T01:40:54.895Z","trustScore":5,"dependencies":[{"packageName":"yaml","version":"github:isaacs/yaml#built"}]},{"versionNumber":"0.2.0","timestamp":"2019-03-10T18:36:17.396Z","trustScore":6,"dependencies":[{"packageName":"yaml","version":"github:isaacs/yaml#built"}]},{"versionNumber":"0.3.0","timestamp":"2019-03-21T06:11:28.303Z","trustScore":5,"dependencies":[{"packageName":"yaml","version":"github:isaacs/yaml#built"}]},{"versionNumber":"0.4.0","timestamp":"2019-04-06T04:08:26.219Z","trustScore":6,"dependencies":[{"packageName":"yaml","version":"github:isaacs/yaml#built"}]},{"versionNumber":"1.0.0","timestamp":"2019-04-06T19:02:57.309Z","trustScore":13,"dependencies":[{"packageName":"yaml","version":"^1.5.0"}]}]}},"__N_SSG":true}