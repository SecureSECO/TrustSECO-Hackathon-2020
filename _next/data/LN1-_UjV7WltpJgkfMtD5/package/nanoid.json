{"pageProps":{"postData":{"_id":"5fb05c2777b543d8a4c7df9b","id":"nanoid","crawlTimestamp":"14/11/2020 22:37:26","packageName":"nanoid","description":"A tiny (108 bytes), secure URL-friendly unique string ID generator","repository":{"type":"git","url":"git+https://github.com/ai/nanoid.git"},"readme":"# Nano ID\n\n<img src=\"https://ai.github.io/nanoid/logo.svg\" align=\"right\"\n     alt=\"Nano ID logo by Anton Lovchikov\" width=\"180\" height=\"94\">\n\nA tiny, secure, URL-friendly, unique string ID generator for JavaScript.\n\n> “An amazing level of senseless perfectionism,\n> which is simply impossible not to respect.”\n\n* **Small.** 108 bytes (minified and gzipped). No dependencies.\n  [Size Limit] controls the size.\n* **Fast.** It is 40% faster than UUID.\n* **Safe.** It uses cryptographically strong random APIs.\n  Can be used in clusters.\n* **Compact.** It uses a larger alphabet than UUID (`A-Za-z0-9_-`).\n  So ID size was reduced from 36 to 21 symbols.\n* **Portable.** Nano ID was ported\n  to [14 programming languages](#other-programming-languages).\n\n```js\nimport { nanoid } from 'nanoid'\nmodel.id = nanoid() //=> \"V1StGXR8_Z5jdHi6B-myT\"\n```\n\nSupports modern browsers, IE [with Babel], Node.js and React Native.\n\n[online tool]: https://gitpod.io/#https://github.com/ai/nanoid/\n[with Babel]:  https://developer.epages.com/blog/coding/how-to-transpile-node-modules-with-babel-and-webpack-in-a-monorepo/\n[Size Limit]:  https://github.com/ai/size-limit\n\n<a href=\"https://evilmartians.com/?utm_source=nanoid\">\n  <img src=\"https://evilmartians.com/badges/sponsored-by-evil-martians.svg\"\n       alt=\"Sponsored by Evil Martians\" width=\"236\" height=\"54\">\n</a>\n\n## Table of Contents\n\n* [Comparison with UUID](#comparison-with-uuid)\n* [Benchmark](#benchmark)\n* [Tools](#tools)\n* [Security](#security)\n* [Usage](#usage)\n  * [JS](#js)\n  * [IE](#ie)\n  * [React](#react)\n  * [Create React App](#create-react-app)\n  * [React Native](#react-native)\n  * [Rollup](#rollup)\n  * [Expo](#expo)\n  * [PouchDB and CouchDB](#pouchdb-and-couchdb)\n  * [Mongoose](#mongoose)\n  * [ES Modules](#es-modules)\n  * [Web Workers](#web-workers)\n  * [CLI](#cli)\n  * [Other Programming Languages](#other-programming-languages)\n* [API](#api)\n  * [Async](#async)\n  * [Non-Secure](#non-secure)\n  * [Custom Alphabet or Size](#custom-alphabet-or-size)\n  * [Custom Random Bytes Generator](#custom-random-bytes-generator)\n\n\n## Comparison with UUID\n\nNano ID is quite comparable to UUID v4 (random-based).\nIt has a similar number of random bits in the ID\n(126 in Nano ID and 122 in UUID), so it has a similar collision probability:\n\n> For there to be a one in a billion chance of duplication,\n> 103 trillion version 4 IDs must be generated.\n\nThere are three main differences between Nano ID and UUID v4:\n\n1. Nano ID uses a bigger alphabet, so a similar number of random bits\n   are packed in just 21 symbols instead of 36.\n2. Nano ID code is 3 times less than `uuid/v4` package:\n   108 bytes instead of 345.\n3. Because of memory allocation tricks, Nano ID is 16% faster than UUID.\n\n\n## Benchmark\n\n```rust\n$ node ./test/benchmark.js\nnanoid                    2,280,683 ops/sec\ncustomAlphabet            1,851,117 ops/sec\nuid.sync                    313,306 ops/sec\nuuid v4                   1,348,425 ops/sec\nsecure-random-string        294,161 ops/sec\ncuid                        158,988 ops/sec\nshortid                      37,222 ops/sec\n\nAsync:\nasync nanoid                 95,500 ops/sec\nasync customAlphabet         93,800 ops/sec\nasync secure-random-string   90,316 ops/sec\nuid                          85,583 ops/sec\n\nNon-secure:\nnon-secure nanoid         2,641,654 ops/sec\nrndm                      2,447,086 ops/sec\n```\n\nTest configuration: Dell XPS 2-in-1 7390, Fedora 32, Node.js 15.1.\n\n\n## Tools\n\n* [ID size calculator] shows collision probability when adjusting\n  the ID alphabet or size.\n* [`nanoid-dictionary`] with popular alphabets to use with `customAlphabet`.\n* [`nanoid-good`] to be sure that your ID doesn’t contain any obscene words.\n\n[`nanoid-dictionary`]: https://github.com/CyberAP/nanoid-dictionary\n[ID size calculator]:  https://zelark.github.io/nano-id-cc/\n[`nanoid-good`]:       https://github.com/y-gagar1n/nanoid-good\n\n\n## Security\n\n*See a good article about random generators theory:\n[Secure random values (in Node.js)]*\n\n* **Unpredictability.** Instead of using the unsafe `Math.random()`, Nano ID\n  uses the `crypto` module in Node.js and the Web Crypto API in browsers.\n  These modules use unpredictable hardware random generator.\n* **Uniformity.** `random % alphabet` is a popular mistake to make when coding\n  an ID generator. The distribution will not be even; there will be a lower\n  chance for some symbols to appear compared to others. So, it will reduce\n  the number of tries when brute-forcing. Nano ID uses a [better algorithm]\n  and is tested for uniformity.\n\n  <img src=\"img/distribution.png\" alt=\"Nano ID uniformity\"\n     width=\"340\" height=\"135\">\n\n* **Vulnerabilities:** to report a security vulnerability, please use\n  the [Tidelift security contact](https://tidelift.com/security).\n  Tidelift will coordinate the fix and disclosure.\n\n[Secure random values (in Node.js)]: https://gist.github.com/joepie91/7105003c3b26e65efcea63f3db82dfba\n[better algorithm]:                  https://github.com/ai/nanoid/blob/master/index.js\n\n\n## Usage\n\n### JS\n\nThe main module uses URL-friendly symbols (`A-Za-z0-9_-`) and returns an ID\nwith 21 characters (to have a collision probability similar to UUID v4).\n\n```js\nimport { nanoid } from 'nanoid'\nmodel.id = nanoid() //=> \"V1StGXR8_Z5jdHi6B-myT\"\n```\n\nIf you want to reduce the ID size (and increase collisions probability),\nyou can pass the size as an argument.\n\n```js\nnanoid(10) //=> \"IRFa-VaY2b\"\n```\n\nDon’t forget to check the safety of your ID size\nin our [ID collision probability] calculator.\n\nYou can also use a [custom alphabet](#custom-alphabet-or-size)\nor a [random generator](#custom-random-bytes-generator).\n\n[ID collision probability]: https://zelark.github.io/nano-id-cc/\n\n\n### IE\n\nIf you support IE, you need to [transpile `node_modules`] by Babel\nand add `crypto` alias:\n\n```js\n// polyfills.js\nif (!window.crypto) {\n  window.crypto = window.msCrypto\n}\n```\n\n```js\nimport './polyfills.js'\nimport { nanoid } from 'nanoid'\n```\n\n[transpile `node_modules`]: https://developer.epages.com/blog/coding/how-to-transpile-node-modules-with-babel-and-webpack-in-a-monorepo/\n\n\n### React\n\n**Do not** call `nanoid` in the `key` prop. In React, `key` should be consistent\namong renders.\n\nThis is the bad example:\n\n```jsx\n<Item key={nanoid()} /> /* DON’T DO IT */\n```\n\nThis is the good example (`id` will be generated only once):\n\n```jsx\nconst Element = () => {\n  const [id] = React.useState(nanoid)\n  return <Item key={id} />\n}\n```\n\nIf you want to use Nano ID in the `id` prop, you must set some string prefix\n(it is invalid for the HTML ID to start with a number).\n\n```jsx\n<input id={'id' + this.id} type=\"text\"/>\n```\n\n\n### Create React App\n\nCreate React App has [a problem](https://github.com/ai/nanoid/issues/205)\nwith ES modules packages.\n\n```\nTypeError: (0 , _nanoid.nanoid) is not a function\n```\n\n[Pull request](https://github.com/facebook/create-react-app/pull/8768) was sent,\nbut it was still not released.\n\nUse Nano ID 2 `npm i nanoid@^2.0.0` until Create React App 4.0 release.\n\n\n### React Native\n\nReact Native does not have built-in random generator.\n\n1. Check [`react-native-get-random-values`] docs and install it.\n2. Import it before Nano ID.\n\n```js\nimport 'react-native-get-random-values'\nimport { nanoid } from 'nanoid'\n```\n\nFor Expo framework see the next section.\n\n[`react-native-get-random-values`]: https://github.com/LinusU/react-native-get-random-values\n\n\n### Rollup\n\nFor Rollup you will need [`@rollup/plugin-replace`] to replace\n`process.env.NODE_ENV`:\n\n```js\n  plugins: [\n    replace({\n      'process.env.NODE_ENV': JSON.stringify(process.env.NODE)\n    })\n  ]\n```\n\n[`@rollup/plugin-replace`]: https://github.com/rollup/plugins/tree/master/packages/replace\n\n\n### Expo\n\nIf you use Expo in React Native, you need a different workaround.\n\n1. Install [`expo-random`](https://www.npmjs.com/package/expo-random).\n2. Use `nanoid/async` instead of `nanoid`.\n3. Import `index.native.js` file directly.\n\n```js\nimport { nanoid } from 'nanoid/async/index.native'\n\nasync function createUser () {\n  user.id = await nanoid()\n}\n```\n\n[`expo-random`]: https://www.npmjs.com/package/expo-random\n\n\n### PouchDB and CouchDB\n\nIn PouchDB and CouchDB, IDs can’t start with an underscore `_`.\nA prefix is required to prevent this issue, as Nano ID might use a `_`\nat the start of the ID by default.\n\nOverride the default ID with the following option:\n\n```js\ndb.put({\n  _id: 'id' + nanoid(),\n  …\n})\n```\n\n\n### Mongoose\n\n```js\nconst mySchema = new Schema({\n  _id: {\n    type: String,\n    default: () => nanoid()\n  }\n})\n```\n\n\n### ES Modules\n\nNano ID provides ES modules. You do not need to do anything to use Nano ID\nas ESM in webpack, Rollup, Parcel, or Node.js.\n\n```js\nimport { nanoid } from 'nanoid'\n```\n\nFor quick hacks, you can load Nano ID from CDN. Special minified\n`nanoid.js` module is available on jsDelivr.\n\nThough, it is not recommended to be used in production\nbecause of the lower loading performance.\n\n```js\nimport { nanoid } from 'https://cdn.jsdelivr.net/npm/nanoid/nanoid.js'\n```\n\n\n### Web Workers\n\nWeb Workers do not have access to a secure random generator.\n\nSecurity is important in IDs when IDs should be unpredictable.\nFor instance, in \"access by URL\" link generation.\nIf you do not need unpredictable IDs, but you need to use Web Workers,\nyou can use the non‑secure ID generator.\n\n```js\nimport { nanoid } from 'nanoid/non-secure'\nnanoid() //=> \"Uakgb_J5m9g-0JDMbcJqLJ\"\n```\n\nNote: non-secure IDs are more prone to collision attacks.\n\n\n### CLI\n\nYou can get unique ID in terminal by calling `npx nanoid`. You need only\nNode.js in the system. You do not need Nano ID to be installed anywhere.\n\n```sh\n$ npx nanoid\nnpx: installed 1 in 0.63s\nLZfXLFzPPR4NNrgjlWDxn\n```\n\nIf you want to change alphabet or ID size, you should use [`nanoid-cli`].\n\n[`nanoid-cli`]: https://github.com/twhitbeck/nanoid-cli\n\n\n### Other Programming Languages\n\nNano ID was ported to many languages. You can use these ports to have\nthe same ID generator on the client and server side.\n\n* [C#](https://github.com/codeyu/nanoid-net)\n* [C++](https://github.com/mcmikecreations/nanoid_cpp)\n* [Clojure and ClojureScript](https://github.com/zelark/nano-id)\n* [Crystal](https://github.com/mamantoha/nanoid.cr)\n* [Dart](https://github.com/pd4d10/nanoid-dart)\n* [Deno](https://github.com/ianfabs/nanoid)\n* [Go](https://github.com/matoous/go-nanoid)\n* [Elixir](https://github.com/railsmechanic/nanoid)\n* [Haskell](https://github.com/4e6/nanoid-hs)\n* [Janet](https://sr.ht/~statianzo/janet-nanoid/)\n* [Java](https://github.com/aventrix/jnanoid)\n* [Nim](https://github.com/icyphox/nanoid.nim)\n* [PHP](https://github.com/hidehalo/nanoid-php)\n* [Python](https://github.com/puyuan/py-nanoid)\n  with [dictionaries](https://pypi.org/project/nanoid-dictionary)\n* [Ruby](https://github.com/radeno/nanoid.rb)\n* [Rust](https://github.com/nikolay-govorov/nanoid)\n* [Swift](https://github.com/antiflasher/NanoID)\n\nAlso, [CLI] is available to generate IDs from a command line.\n\n[CLI]: #cli\n\n\n## API\n\n### Async\n\nTo generate hardware random bytes, CPU collects electromagnetic noise.\nIn the synchronous API during the noise collection, the CPU is busy and\ncannot do anything useful in parallel.\n\nUsing the asynchronous API of Nano ID, another code can run during\nthe entropy collection.\n\n```js\nimport { nanoid } from 'nanoid/async'\n\nasync function createUser () {\n  user.id = await nanoid()\n}\n```\n\nUnfortunately, you will lose Web Crypto API advantages in a browser\nif you use the asynchronous API. So, currently, in the browser, you are limited\nwith either security or asynchronous behavior.\n\n\n### Non-Secure\n\nBy default, Nano ID uses hardware random bytes generation for security\nand low collision probability. If you are not so concerned with security\nand more concerned with performance, you can use the faster non-secure generator.\n\n```js\nimport { nanoid } from 'nanoid/non-secure'\nconst id = nanoid() //=> \"Uakgb_J5m9g-0JDMbcJqLJ\"\n```\n\nNote: your IDs will be more predictable and prone to collision attacks.\n\n\n### Custom Alphabet or Size\n\n`customAlphabet` allows you to create `nanoid` with your own alphabet\nand ID size.\n\n```js\nimport { customAlphabet } from 'nanoid'\nconst nanoid = customAlphabet('1234567890abcdef', 10)\nmodel.id = nanoid() //=> \"4f90d13a42\"\n```\n\nCheck the safety of your custom alphabet and ID size in our\n[ID collision probability] calculator. For more alphabets, check out the options\nin [`nanoid-dictionary`].\n\nAlphabet must contain 256 symbols or less.\nOtherwise, the security of the internal generator algorithm is not guaranteed.\n\nCustomizable asynchronous and non-secure APIs are also available:\n\n```js\nimport { customAlphabet } from 'nanoid/async'\nconst nanoid = customAlphabet('1234567890abcdef', 10)\nasync function createUser () {\n  user.id = await nanoid()\n}\n```\n\n```js\nimport { customAlphabet } from 'nanoid/non-secure'\nconst nanoid = customAlphabet('1234567890abcdef', 10)\nuser.id = nanoid()\n```\n\n[ID collision probability]: https://alex7kom.github.io/nano-nanoid-cc/\n[`nanoid-dictionary`]:      https://github.com/CyberAP/nanoid-dictionary\n\n\n### Custom Random Bytes Generator\n\n`customRandom` allows you to create a `nanoid` and replace alphabet\nand the default random bytes generator.\n\nIn this example, a seed-based generator is used:\n\n```js\nimport { customRandom } from 'nanoid'\n\nconst rng = seedrandom(seed)\nconst nanoid = customRandom('abcdef', 10, size => {\n  return (new Uint8Array(size)).map(() => 256 * rng())\n})\n\nnanoid() //=> \"fbaefaadeb\"\n```\n\n`random` callback must accept the array size and return an array\nwith random numbers.\n\nIf you want to use the same URL-friendly symbols with `customRandom`,\nyou can get the default alphabet using the `urlAlphabet`.\n\n```js\nconst { customRandom, urlAlphabet } = require('nanoid')\nconst nanoid = customRandom(urlAlphabet, 10, random)\n```\n\nAsynchronous and non-secure APIs are not available for `customRandom`.\n","homepage":"https://github.com/ai/nanoid#readme","trustScore":25,"sourceRank":{"basic_info_present":1,"repository_present":1,"readme_present":1,"license_present":1,"versions_present":1,"follows_semver":1,"recent_release":1,"not_brand_new":1,"one_point_oh":1,"dependent_projects":6,"dependent_repositories":4,"stars":4,"contributors":1,"subscribers":1,"all_prereleases":0,"any_outdated_dependencies":0,"is_deprecated":0,"is_unmaintained":0,"is_removed":0,"trustScore":25},"versions":[{"versionNumber":"0.1.0","timestamp":"2017-08-06T05:04:00.915Z","trustScore":25,"dependencies":[]},{"versionNumber":"0.1.1","timestamp":"2017-08-09T04:50:56.744Z","trustScore":26,"dependencies":[]},{"versionNumber":"0.2.0","timestamp":"2017-08-10T05:59:22.305Z","trustScore":25,"dependencies":[]},{"versionNumber":"0.2.1","timestamp":"2017-09-16T15:27:50.793Z","trustScore":25,"dependencies":[]},{"versionNumber":"0.2.2","timestamp":"2017-10-10T20:25:54.297Z","trustScore":29,"dependencies":[]},{"versionNumber":"1.0.0","timestamp":"2017-10-22T18:11:40.124Z","trustScore":26,"dependencies":[]},{"versionNumber":"1.0.1","timestamp":"2017-10-30T15:15:26.359Z","trustScore":26,"dependencies":[]},{"versionNumber":"1.0.2","timestamp":"2018-02-13T19:33:31.040Z","trustScore":24,"dependencies":[]},{"versionNumber":"1.0.3","timestamp":"2018-06-04T12:19:20.193Z","trustScore":22,"dependencies":[]},{"versionNumber":"1.0.4","timestamp":"2018-06-22T15:29:57.080Z","trustScore":24,"dependencies":[]},{"versionNumber":"1.0.5","timestamp":"2018-07-06T21:41:04.962Z","trustScore":27,"dependencies":[]},{"versionNumber":"1.0.6","timestamp":"2018-07-08T06:03:03.819Z","trustScore":25,"dependencies":[]},{"versionNumber":"1.0.7","timestamp":"2018-07-08T07:56:36.163Z","trustScore":25,"dependencies":[]},{"versionNumber":"1.1.0","timestamp":"2018-07-14T09:55:22.187Z","trustScore":22,"dependencies":[]},{"versionNumber":"1.1.1","timestamp":"2018-08-08T04:47:02.942Z","trustScore":27,"dependencies":[]},{"versionNumber":"1.2.0","timestamp":"2018-08-10T01:18:37.550Z","trustScore":24,"dependencies":[]},{"versionNumber":"1.2.1","timestamp":"2018-08-16T06:49:17.847Z","trustScore":24,"dependencies":[]},{"versionNumber":"1.2.2","timestamp":"2018-08-28T23:57:52.629Z","trustScore":24,"dependencies":[]},{"versionNumber":"1.2.3","timestamp":"2018-09-04T15:25:29.138Z","trustScore":24,"dependencies":[]},{"versionNumber":"1.2.4","timestamp":"2018-09-26T21:39:05.121Z","trustScore":25,"dependencies":[]},{"versionNumber":"1.2.5","timestamp":"2018-09-29T02:10:05.586Z","trustScore":25,"dependencies":[]},{"versionNumber":"1.2.6","timestamp":"2018-10-02T21:13:43.745Z","trustScore":28,"dependencies":[]},{"versionNumber":"1.3.0","timestamp":"2018-10-12T16:50:06.119Z","trustScore":24,"dependencies":[]},{"versionNumber":"1.3.1","timestamp":"2018-10-20T05:16:46.159Z","trustScore":22,"dependencies":[]},{"versionNumber":"1.3.2","timestamp":"2018-10-31T02:19:48.220Z","trustScore":24,"dependencies":[]},{"versionNumber":"1.3.3","timestamp":"2018-10-31T03:49:54.801Z","trustScore":25,"dependencies":[]},{"versionNumber":"1.3.4","timestamp":"2018-11-04T01:00:49.618Z","trustScore":25,"dependencies":[]},{"versionNumber":"2.0.0","timestamp":"2018-11-04T20:12:03.717Z","trustScore":23,"dependencies":[]},{"versionNumber":"2.0.1","timestamp":"2019-01-14T19:04:54.783Z","trustScore":24,"dependencies":[]},{"versionNumber":"2.0.2","timestamp":"2019-05-16T14:16:28.265Z","trustScore":23,"dependencies":[]},{"versionNumber":"2.0.3","timestamp":"2019-05-21T19:54:03.762Z","trustScore":23,"dependencies":[]},{"versionNumber":"2.0.4","timestamp":"2019-08-25T02:04:48.861Z","trustScore":24,"dependencies":[]},{"versionNumber":"2.1.0","timestamp":"2019-08-30T22:34:43.228Z","trustScore":29,"dependencies":[]},{"versionNumber":"2.1.1","timestamp":"2019-09-11T06:18:44.300Z","trustScore":26,"dependencies":[]},{"versionNumber":"2.1.2","timestamp":"2019-10-03T04:17:24.538Z","trustScore":29,"dependencies":[]},{"versionNumber":"2.1.3","timestamp":"2019-10-11T07:57:10.203Z","trustScore":24,"dependencies":[]},{"versionNumber":"2.1.4","timestamp":"2019-10-17T09:23:46.866Z","trustScore":28,"dependencies":[]},{"versionNumber":"2.1.5","timestamp":"2019-10-23T16:00:28.099Z","trustScore":25,"dependencies":[]},{"versionNumber":"2.1.6","timestamp":"2019-10-24T06:32:25.421Z","trustScore":26,"dependencies":[]},{"versionNumber":"2.1.7","timestamp":"2019-11-16T01:54:08.276Z","trustScore":24,"dependencies":[]},{"versionNumber":"2.1.8","timestamp":"2019-12-14T18:53:21.168Z","trustScore":23,"dependencies":[]},{"versionNumber":"2.1.9","timestamp":"2020-01-07T06:59:06.255Z","trustScore":26,"dependencies":[]},{"versionNumber":"2.1.10","timestamp":"2020-01-22T03:58:42.852Z","trustScore":21,"dependencies":[]},{"versionNumber":"2.1.11","timestamp":"2020-01-30T19:56:12.816Z","trustScore":23,"dependencies":[]},{"versionNumber":"3.0.0","timestamp":"2020-03-26T22:35:28.310Z","trustScore":19,"dependencies":[]},{"versionNumber":"3.0.1","timestamp":"2020-03-28T20:11:48.404Z","trustScore":20,"dependencies":[]},{"versionNumber":"3.0.2","timestamp":"2020-03-29T21:22:52.549Z","trustScore":18,"dependencies":[]},{"versionNumber":"3.1.0","timestamp":"2020-04-10T21:35:39.027Z","trustScore":18,"dependencies":[]},{"versionNumber":"3.1.1","timestamp":"2020-04-10T21:47:11.768Z","trustScore":15,"dependencies":[]},{"versionNumber":"3.1.2","timestamp":"2020-04-10T21:51:22.763Z","trustScore":21,"dependencies":[]},{"versionNumber":"3.1.3","timestamp":"2020-04-10T23:06:00.567Z","trustScore":16,"dependencies":[]},{"versionNumber":"3.1.4","timestamp":"2020-05-04T14:06:21.652Z","trustScore":19,"dependencies":[]},{"versionNumber":"3.1.5","timestamp":"2020-05-05T17:35:53.102Z","trustScore":19,"dependencies":[]},{"versionNumber":"3.1.6","timestamp":"2020-05-08T14:43:03.853Z","trustScore":17,"dependencies":[]},{"versionNumber":"3.1.7","timestamp":"2020-05-11T18:08:25.554Z","trustScore":18,"dependencies":[]},{"versionNumber":"3.1.8","timestamp":"2020-05-16T18:53:43.198Z","trustScore":18,"dependencies":[]},{"versionNumber":"3.1.9","timestamp":"2020-05-17T20:57:42.602Z","trustScore":18,"dependencies":[]},{"versionNumber":"3.1.10","timestamp":"2020-06-13T03:03:19.266Z","trustScore":15,"dependencies":[]},{"versionNumber":"3.1.11","timestamp":"2020-07-27T18:13:01.961Z","trustScore":13,"dependencies":[]},{"versionNumber":"3.1.12","timestamp":"2020-07-29T23:03:48.397Z","trustScore":13,"dependencies":[]},{"versionNumber":"3.1.13","timestamp":"2020-10-21T23:31:03.007Z","trustScore":7,"dependencies":[]},{"versionNumber":"3.1.14","timestamp":"2020-10-23T01:56:59.296Z","trustScore":6,"dependencies":[]},{"versionNumber":"3.1.15","timestamp":"2020-10-23T02:16:16.182Z","trustScore":7,"dependencies":[]},{"versionNumber":"3.1.16","timestamp":"2020-10-26T01:41:12.135Z","trustScore":6,"dependencies":[]}]}},"__N_SSG":true}