{"pageProps":{"postData":{"_id":"5fb66ab39f9e7f16fd324bc4","id":"chai-fuzzy","crawlTimestamp":"19/11/2020 12:53:06","packageName":"chai-fuzzy","description":"fuzzy matchers for chai","repository":{"type":"git","url":"git://github.com/elliotf/chai-fuzzy.git"},"readme":"# chai-fuzzy\n\nFuzzy matchers for chai based on underscore and inspired by jasmine.\n\nMake assertions that values have all the same attributes and values without asserting strict object equality.\n\n[![Build Status](https://travis-ci.org/elliotf/chai-fuzzy.png)](https://travis-ci.org/elliotf/chai-fuzzy)\n\n## Using\n\nAlso see the [tests](https://github.com/elliotf/chai-fuzzy/tree/master/test/) and [examples](https://github.com/elliotf/chai-fuzzy/tree/master/examples/).\n\n### browser-side\n\ninclude chai fuzzy after chai and underscore:\n\n    <script src=\"underscore.js\"></script>\n    <script src=\"chai.js\"></script>\n    <script src=\"chai-fuzzy.js\"></script>\n\n### server-side\n\nhave chai use chai-fuzzy:\n\n    var chai = require('chai');\n    chai.use(require('chai-fuzzy'));\n\n## Assertions\n\n\n### like(value)\n\ncompare object attributes and values rather than checking to see if they're the same reference\n\n    var subject = {a: 'a'};\n    subject.should.be.like({a: 'a'});\n    subject.should.not.be.like({x: 'x'});\n    subject.should.not.be.like({a: 'a', b: 'b'});\n\n    expect(subject).to.be.like({a: 'a'});\n    expect(subject).not.to.be.like({x: 'x'});\n    expect(subject).not.to.be.like({a: 'a', b: 'b'});\n\n    assert.like(subject, {a: 'a'});\n    assert.notLike(subject, {x: 'x'});\n    assert.notLike(subject, {a: 'a', b: 'b'});\n\n    var subject = ['a'];\n    subject.should.be.like(['a']);\n    subject.should.not.be.like(['x']);\n    subject.should.not.be.like(['a', 'b']);\n\n    expect(subject).to.be.like(['a']);\n    expect(subject).not.to.be.like(['x']);\n    expect(subject).not.to.be.like(['a', 'b']);\n\n    assert.like(subject, ['a']);\n    assert.notLike(subject, ['x']);\n    assert.notLike(subject, ['a', 'b']);\n\n## containOneLike(value)\n\ncheck the first level of the container for a value like the one provided\n\n    var subject = {\n      a:   'alphabet'\n      , b: 'butternut'\n      , c: {\n        name:       'chowder'\n        , attributes: [\n          'scales'\n          , 'fins'\n        ]\n      }\n      , x: 'xylophone'\n      , z: 'xylophone'\n    };\n    subject.should.containOneLike({\n      name:         'chowder'\n      , attributes: [\n        'scales', 'fins'\n      ]\n    });\n    subject.should.not.containOneLike({\n      name:         'chowder'\n      , attributes: [\n        'scales', 'fins', 'cream'\n      ]\n    });\n\n    subject.should.containOneLike('xylophone');\n    subject.should.not.containOneLike('cow patties');\n\n    expect(subject).to.containOneLike('xylophone');\n    expect(subject).to.not.containOneLike('cow patties');\n\n    assert.containOneLike(subject, 'xylophone');\n    assert.notContainOneLike(subject, 'cow patties');\n\n    // same for arrays\n\n# jsonOf(value)\n\ncheck that the given javascript object is like the JSON-ified expected value.  Useful for checking stringification and parsing of an object.\n\n    var apple = {\n      skin: 'thin'\n      , colors: ['red', 'green', 'yellow']\n      , isFruit: true\n      , picked: new Date()\n    };\n    var orange = {\n      skin: 'thin'\n      , colors: ['red', 'green', 'yellow']\n      , isFruit: true\n      , picked: new Date()\n    };\n    // here appleJSON would be the json result of some process like a JSON api\n    var appleJSON  = JSON.parse(JSON.stringify(apple));\n\n    appleJSON.should.be.jsonOf(apple);\n    appleJSON.should.not.be.jsonOf(orange);\n\n    expect(appleJSON).to.be.jsonOf(apple);\n    expect(appleJSON).to.not.be.jsonOf(orange);\n\n    assert.jsonOf(appleJSON, apple);\n    assert.notJsonOf(appleJSON, orange);\n\n# Thanks\n\nThanks to [Davis](http://github.com/infews/ \"Davis\") for passing along the idea of using underscore rather than cribbing parts of jasmine.\n\nThanks to [Bart van der Schoor](https://github.com/Bartvds \"Bart van der Schoor\") for adding assert-style compatibility\n\n","homepage":"https://github.com/elliotf/chai-fuzzy#readme","trustScore":17,"sourceRank":{"basic_info_present":1,"repository_present":1,"readme_present":1,"license_present":1,"versions_present":1,"follows_semver":1,"recent_release":0,"not_brand_new":1,"one_point_oh":1,"dependent_projects":4,"dependent_repositories":3,"stars":1,"contributors":1,"subscribers":0,"all_prereleases":0,"any_outdated_dependencies":0,"is_deprecated":0,"is_unmaintained":0,"is_removed":0,"trustScore":17},"versions":[{"versionNumber":"0.0.1","timestamp":"2012-10-02T19:38:10.533Z","trustScore":7,"dependencies":[{"packageName":"underscore","version":"~1.4.1"}]},{"versionNumber":"1.0.0","timestamp":"2012-10-02T20:34:13.931Z","trustScore":7,"dependencies":[{"packageName":"underscore","version":"~1.4.1"}]},{"versionNumber":"1.1.0","timestamp":"2012-10-07T19:12:49.860Z","trustScore":8,"dependencies":[{"packageName":"underscore","version":"~1.4.1"}]},{"versionNumber":"1.1.1","timestamp":"2012-12-27T20:17:05.341Z","trustScore":9,"dependencies":[{"packageName":"underscore","version":"~1.4.1"}]},{"versionNumber":"1.2.0","timestamp":"2013-02-08T18:56:28.059Z","trustScore":7,"dependencies":[{"packageName":"underscore","version":"~1.4.1"}]},{"versionNumber":"1.3.0","timestamp":"2013-06-11T18:51:03.001Z","trustScore":8,"dependencies":[{"packageName":"underscore","version":"~1.4.1"}]},{"versionNumber":"1.4.0","timestamp":"2013-12-08T21:33:30.328Z","trustScore":7,"dependencies":[]},{"versionNumber":"1.5.0","timestamp":"2015-03-18T06:32:57.277Z","trustScore":7,"dependencies":[]},{"versionNumber":"1.6.0","timestamp":"2015-08-17T14:36:04.021Z","trustScore":7,"dependencies":[{"packageName":"underscore","version":">= 1.0.0"}]},{"versionNumber":"1.6.1","timestamp":"2016-03-17T00:41:24.092Z","trustScore":17,"dependencies":[{"packageName":"underscore","version":">= 1.0.0"}]}]}},"__N_SSG":true}