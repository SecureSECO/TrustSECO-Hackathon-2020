{"pageProps":{"postData":{"_id":"5fb66c0d9f9e7f16fd324cc6","id":"read-input","crawlTimestamp":"19/11/2020 12:58:52","packageName":"read-input","description":"Easily read from stdin or files.","repository":{"type":"git","url":"git://github.com/rstacruz/read-input.git"},"readme":"# read-input\n\nWrite CLI utilities that take a stream of data either stdin from one of more \nfiles. To be able to handle this:\n\n```sh\n$ yourutil file.txt\n$ yourutil file1.txt file2.txt\n$ yourutil < file.txt\n$ cat file.txt | yourutil\n```\n\nJust do this:\n\n```js\n#!/usr/bin/env node\nvar read = require('read-input');\nvar fnames = process.argv.slice(2);\n\nread(fnames, function (err, res) {\n  // `err` will be given if at least one of the files fail.\n  if (err) {\n    console.error(err.message);\n    process.exit(8);\n  }\n\n  res.data /* => \"...\" */\n});\n```\n\n<!-- include: index.js -->\n\n### read()\n> `read(files, function(err, res) { ... })`\n\nReads from files. If no files are given, read from stdin.\nThe result `res` is a [result object](#res). If any of the files can't be\nread, `err` will be an error object.\n\n```js\nvar read = require('read-input');\nvar fnames = process.argv.slice(2); //=> ['readme.txt']\n\nread(fnames).then(function (res) {\n  res.data       // '...'\n  res.error      // undefined or Error()\n  res.stdin      // true or false\n  res.files      // [...]\n  res.successes  // [...]\n  res.failures   // [...]\n}).catch(function (err) {\n  // stdin error\n});\n```\n\nTo support older versions of Node.js without Promises, you can use callbacks:\n\n```js\nread(fname, function (err, res) {\n});\n```\n\nYou can also iterate through `res.files`.\n\n```js\nread(fnames).then(function(res) {\n  res.files.forEach(function (f) {\n    f.data    // ...\n    f.error   // undefined or Error(...)\n    f.stdin   // true or false\n    f.name    // 'readme.txt'\n  }\n});\n```\n\nIf `files` is a blank array (or null), data will be read from stdin. The\nresulting data will have a similar schema.\n\n```js\nread([]).then(fucntion (res) {\n  ...\n});\n```\n\n### read.stdin()\n> `read.stdin(fn)`\n\nRead data from standard input. This will not throw errors.\n\n```js\nread.stdin().then(function (data) {\n  console.log(data); // string\n});\n\nread.stdin(function (err, data) {\n  ...\n});\n```\n\n### res\n\nThe results value is an object passed to the callback of `read()`.\n\n* `data` *(String)* <span class='dash'>&mdash;</span> a concatenation of all data in all the files.\n* `error` *(Error)* <span class='dash'>&mdash;</span> The first error in all files. `undefined` if successful.\n* `stdin` *(Boolean)* <span class='dash'>&mdash;</span> is `true` if the file is read from stdin\n* `files` *(Array)* <span class='dash'>&mdash;</span> A list of files.\n* `failures` *(Array)* <span class='dash'>&mdash;</span> A list of files that failed.\n* `successes` *(Array)* <span class='dash'>&mdash;</span> A list of files that succeeded.\n\nThe `files`, `failures` and `successes` are lists of files. Each of the items in these lists\nhas a similar list of values:\n\n* `data` *(String)* <span class='dash'>&mdash;</span> File data\n* `error` *(Error)* <span class='dash'>&mdash;</span> the first error encountered, if applicable\n* `stdin` *(Boolean)* <span class='dash'>&mdash;</span> is `true` if the file is read from stdin\n* `name` *(String)* <span class='dash'>&mdash;</span> File name\n\nThere's also `error.result` which refers to the result object.\n\nSee [read()](read) for an example.\n\n<!-- /include -->\n\n## Thanks\n\n**read-input** Â© 2014+, Rico Sta. Cruz. Released under the [MIT License].<br>\nAuthored and maintained by Rico Sta. Cruz with help from [contributors].\n\n> [ricostacruz.com](http://ricostacruz.com) &nbsp;&middot;&nbsp;\n> GitHub [@rstacruz](https://github.com/rstacruz) &nbsp;&middot;&nbsp;\n> Twitter [@rstacruz](https://twitter.com/rstacruz)\n\n[MIT License]: License.md\n[MIT License]: http://mit-license.org/\n[contributors]: http://github.com/rstacruz/nprogress/contributors\n","homepage":"https://github.com/rstacruz/read-input","trustScore":11,"sourceRank":{"basic_info_present":1,"repository_present":1,"readme_present":1,"license_present":1,"versions_present":1,"follows_semver":1,"recent_release":0,"not_brand_new":1,"one_point_oh":0,"dependent_projects":2,"dependent_repositories":2,"stars":0,"contributors":0,"subscribers":0,"all_prereleases":0,"any_outdated_dependencies":0,"is_deprecated":0,"is_unmaintained":0,"is_removed":0,"trustScore":11},"versions":[{"versionNumber":"0.1.0","timestamp":"2014-08-05T06:19:55.788Z","trustScore":4,"dependencies":[]},{"versionNumber":"0.2.0","timestamp":"2014-08-27T05:38:13.960Z","trustScore":5,"dependencies":[]},{"versionNumber":"0.3.0","timestamp":"2015-05-23T07:38:17.399Z","trustScore":5,"dependencies":[]},{"versionNumber":"0.3.1","timestamp":"2015-06-03T09:27:03.590Z","trustScore":11,"dependencies":[]}]}},"__N_SSG":true}