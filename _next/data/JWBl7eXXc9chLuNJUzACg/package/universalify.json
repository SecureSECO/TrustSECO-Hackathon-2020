{"pageProps":{"postData":{"_id":"5fb05c1f77b543d8a4c7df81","id":"universalify","crawlTimestamp":"14/11/2020 22:37:18","packageName":"universalify","description":"Make a callback- or promise-based function support both promises and callbacks.","repository":{"type":"git","url":"git+https://github.com/RyanZim/universalify.git"},"readme":"# universalify\n\n[![Travis branch](https://img.shields.io/travis/RyanZim/universalify/master.svg)](https://travis-ci.org/RyanZim/universalify)\n![Coveralls github branch](https://img.shields.io/coveralls/github/RyanZim/universalify/master.svg)\n![npm](https://img.shields.io/npm/dm/universalify.svg)\n![npm](https://img.shields.io/npm/l/universalify.svg)\n\nMake a callback- or promise-based function support both promises and callbacks.\n\nUses the native promise implementation.\n\n## Installation\n\n```bash\nnpm install universalify\n```\n\n## API\n\n### `universalify.fromCallback(fn)`\n\nTakes a callback-based function to universalify, and returns the universalified  function.\n\nFunction must take a callback as the last parameter that will be called with the signature `(error, result)`. `universalify` does not support calling the callback with three or more arguments, and does not ensure that the callback is only called once.\n\n```js\nfunction callbackFn (n, cb) {\n  setTimeout(() => cb(null, n), 15)\n}\n\nconst fn = universalify.fromCallback(callbackFn)\n\n// Works with Promises:\nfn('Hello World!')\n.then(result => console.log(result)) // -> Hello World!\n.catch(error => console.error(error))\n\n// Works with Callbacks:\nfn('Hi!', (error, result) => {\n  if (error) return console.error(error)\n  console.log(result)\n  // -> Hi!\n})\n```\n\n### `universalify.fromPromise(fn)`\n\nTakes a promise-based function to universalify, and returns the universalified  function.\n\nFunction must return a valid JS promise. `universalify` does not ensure that a valid promise is returned.\n\n```js\nfunction promiseFn (n) {\n  return new Promise(resolve => {\n    setTimeout(() => resolve(n), 15)\n  })\n}\n\nconst fn = universalify.fromPromise(promiseFn)\n\n// Works with Promises:\nfn('Hello World!')\n.then(result => console.log(result)) // -> Hello World!\n.catch(error => console.error(error))\n\n// Works with Callbacks:\nfn('Hi!', (error, result) => {\n  if (error) return console.error(error)\n  console.log(result)\n  // -> Hi!\n})\n```\n\n## License\n\nMIT\n","homepage":"https://github.com/RyanZim/universalify#readme","trustScore":23,"sourceRank":{"basic_info_present":1,"repository_present":1,"readme_present":1,"license_present":1,"versions_present":1,"follows_semver":1,"recent_release":1,"not_brand_new":1,"one_point_oh":1,"dependent_projects":4,"dependent_repositories":6,"stars":2,"contributors":0,"subscribers":2,"all_prereleases":0,"any_outdated_dependencies":0,"is_deprecated":0,"is_unmaintained":0,"is_removed":0,"trustScore":23},"versions":[{"versionNumber":"0.0.1","timestamp":"2017-04-08T17:28:40.301Z","trustScore":23,"dependencies":[]},{"versionNumber":"0.1.0","timestamp":"2017-04-22T14:32:41.242Z","trustScore":23,"dependencies":[]},{"versionNumber":"0.1.1","timestamp":"2017-07-20T14:41:09.194Z","trustScore":25,"dependencies":[]},{"versionNumber":"0.1.2","timestamp":"2018-06-20T11:17:11.369Z","trustScore":25,"dependencies":[]},{"versionNumber":"0.2.0","timestamp":"2020-02-19T16:24:46.080Z","trustScore":17,"dependencies":[]},{"versionNumber":"1.0.0","timestamp":"2020-03-06T21:39:56.588Z","trustScore":19,"dependencies":[]},{"versionNumber":"2.0.0","timestamp":"2020-07-25T13:35:08.897Z","trustScore":11,"dependencies":[]}]}},"__N_SSG":true}