{"pageProps":{"postData":{"_id":"5fb05c2177b543d8a4c7df87","id":"jsonfile","crawlTimestamp":"14/11/2020 22:37:20","packageName":"jsonfile","description":"Easily read/write JSON files.","repository":{"type":"git","url":"git+ssh://git@github.com/jprichardson/node-jsonfile.git"},"readme":"Node.js - jsonfile\n================\n\nEasily read/write JSON files in Node.js. _Note: this module cannot be used in the browser._\n\n[![npm Package](https://img.shields.io/npm/v/jsonfile.svg?style=flat-square)](https://www.npmjs.org/package/jsonfile)\n[![build status](https://secure.travis-ci.org/jprichardson/node-jsonfile.svg)](http://travis-ci.org/jprichardson/node-jsonfile)\n[![windows Build status](https://img.shields.io/appveyor/ci/jprichardson/node-jsonfile/master.svg?label=windows%20build)](https://ci.appveyor.com/project/jprichardson/node-jsonfile/branch/master)\n\n<a href=\"https://github.com/feross/standard\"><img src=\"https://cdn.rawgit.com/feross/standard/master/sticker.svg\" alt=\"Standard JavaScript\" width=\"100\"></a>\n\nWhy?\n----\n\nWriting `JSON.stringify()` and then `fs.writeFile()` and `JSON.parse()` with `fs.readFile()` enclosed in `try/catch` blocks became annoying.\n\n\n\nInstallation\n------------\n\n    npm install --save jsonfile\n\n\n\nAPI\n---\n\n* [`readFile(filename, [options], callback)`](#readfilefilename-options-callback)\n* [`readFileSync(filename, [options])`](#readfilesyncfilename-options)\n* [`writeFile(filename, obj, [options], callback)`](#writefilefilename-obj-options-callback)\n* [`writeFileSync(filename, obj, [options])`](#writefilesyncfilename-obj-options)\n\n----\n\n### readFile(filename, [options], callback)\n\n`options` (`object`, default `undefined`): Pass in any [`fs.readFile`](https://nodejs.org/api/fs.html#fs_fs_readfile_path_options_callback) options or set `reviver` for a [JSON reviver](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse).\n  - `throws` (`boolean`, default: `true`). If `JSON.parse` throws an error, pass this error to the callback.\n  If `false`, returns `null` for the object.\n\n\n```js\nconst jsonfile = require('jsonfile')\nconst file = '/tmp/data.json'\njsonfile.readFile(file, function (err, obj) {\n  if (err) console.error(err)\n  console.dir(obj)\n})\n```\n\nYou can also use this method with promises. The `readFile` method will return a promise if you do not pass a callback function.\n\n```js\nconst jsonfile = require('jsonfile')\nconst file = '/tmp/data.json'\njsonfile.readFile(file)\n  .then(obj => console.dir(obj))\n  .catch(error => console.error(error))\n```\n\n----\n\n### readFileSync(filename, [options])\n\n`options` (`object`, default `undefined`): Pass in any [`fs.readFileSync`](https://nodejs.org/api/fs.html#fs_fs_readfilesync_path_options) options or set `reviver` for a [JSON reviver](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse).\n- `throws` (`boolean`, default: `true`). If an error is encountered reading or parsing the file, throw the error. If `false`, returns `null` for the object.\n\n```js\nconst jsonfile = require('jsonfile')\nconst file = '/tmp/data.json'\n\nconsole.dir(jsonfile.readFileSync(file))\n```\n\n----\n\n### writeFile(filename, obj, [options], callback)\n\n`options`: Pass in any [`fs.writeFile`](https://nodejs.org/api/fs.html#fs_fs_writefile_file_data_options_callback) options or set `replacer` for a [JSON replacer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify). Can also pass in `spaces`, or override `EOL` string or set `finalEOL` flag as `false` to not save the file with `EOL` at the end.\n\n\n```js\nconst jsonfile = require('jsonfile')\n\nconst file = '/tmp/data.json'\nconst obj = { name: 'JP' }\n\njsonfile.writeFile(file, obj, function (err) {\n  if (err) console.error(err)\n})\n```\nOr use with promises as follows:\n\n```js\nconst jsonfile = require('jsonfile')\n\nconst file = '/tmp/data.json'\nconst obj = { name: 'JP' }\n\njsonfile.writeFile(file, obj)\n  .then(res => {\n    console.log('Write complete')\n  })\n  .catch(error => console.error(error))\n```\n\n\n**formatting with spaces:**\n\n```js\nconst jsonfile = require('jsonfile')\n\nconst file = '/tmp/data.json'\nconst obj = { name: 'JP' }\n\njsonfile.writeFile(file, obj, { spaces: 2 }, function (err) {\n  if (err) console.error(err)\n})\n```\n\n**overriding EOL:**\n\n```js\nconst jsonfile = require('jsonfile')\n\nconst file = '/tmp/data.json'\nconst obj = { name: 'JP' }\n\njsonfile.writeFile(file, obj, { spaces: 2, EOL: '\\r\\n' }, function (err) {\n  if (err) console.error(err)\n})\n```\n\n\n**disabling the EOL at the end of file:**\n\n```js\nconst jsonfile = require('jsonfile')\n\nconst file = '/tmp/data.json'\nconst obj = { name: 'JP' }\n\njsonfile.writeFile(file, obj, { spaces: 2, finalEOL: false }, function (err) {\n  if (err) console.log(err)\n})\n```\n\n**appending to an existing JSON file:**\n\nYou can use `fs.writeFile` option `{ flag: 'a' }` to achieve this.\n\n```js\nconst jsonfile = require('jsonfile')\n\nconst file = '/tmp/mayAlreadyExistedData.json'\nconst obj = { name: 'JP' }\n\njsonfile.writeFile(file, obj, { flag: 'a' }, function (err) {\n  if (err) console.error(err)\n})\n```\n\n----\n\n### writeFileSync(filename, obj, [options])\n\n`options`: Pass in any [`fs.writeFileSync`](https://nodejs.org/api/fs.html#fs_fs_writefilesync_file_data_options) options or set `replacer` for a [JSON replacer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify). Can also pass in `spaces`, or override `EOL` string or set `finalEOL` flag as `false` to not save the file with `EOL` at the end.\n\n```js\nconst jsonfile = require('jsonfile')\n\nconst file = '/tmp/data.json'\nconst obj = { name: 'JP' }\n\njsonfile.writeFileSync(file, obj)\n```\n\n**formatting with spaces:**\n\n```js\nconst jsonfile = require('jsonfile')\n\nconst file = '/tmp/data.json'\nconst obj = { name: 'JP' }\n\njsonfile.writeFileSync(file, obj, { spaces: 2 })\n```\n\n**overriding EOL:**\n\n```js\nconst jsonfile = require('jsonfile')\n\nconst file = '/tmp/data.json'\nconst obj = { name: 'JP' }\n\njsonfile.writeFileSync(file, obj, { spaces: 2, EOL: '\\r\\n' })\n```\n\n**disabling the EOL at the end of file:**\n\n```js\nconst jsonfile = require('jsonfile')\n\nconst file = '/tmp/data.json'\nconst obj = { name: 'JP' }\n\njsonfile.writeFileSync(file, obj, { spaces: 2, finalEOL: false })\n```\n\n**appending to an existing JSON file:**\n\nYou can use `fs.writeFileSync` option `{ flag: 'a' }` to achieve this.\n\n```js\nconst jsonfile = require('jsonfile')\n\nconst file = '/tmp/mayAlreadyExistedData.json'\nconst obj = { name: 'JP' }\n\njsonfile.writeFileSync(file, obj, { flag: 'a' })\n```\n\nLicense\n-------\n\n(MIT License)\n\nCopyright 2012-2016, JP Richardson  <jprichardson@gmail.com>\n","homepage":"https://github.com/jprichardson/node-jsonfile#readme","trustScore":27,"sourceRank":{"basic_info_present":1,"repository_present":1,"readme_present":1,"license_present":1,"versions_present":1,"follows_semver":1,"recent_release":1,"not_brand_new":1,"one_point_oh":1,"dependent_projects":6,"dependent_repositories":6,"stars":3,"contributors":1,"subscribers":2,"all_prereleases":0,"any_outdated_dependencies":0,"is_deprecated":0,"is_unmaintained":0,"is_removed":0,"trustScore":27},"versions":[{"versionNumber":"0.0.1","timestamp":"2012-09-10T19:09:19.393Z","trustScore":26,"dependencies":[]},{"versionNumber":"1.0.0","timestamp":"2013-06-28T15:40:06.637Z","trustScore":28,"dependencies":[]},{"versionNumber":"1.0.1","timestamp":"2013-09-06T02:02:36.867Z","trustScore":24,"dependencies":[]},{"versionNumber":"1.1.0","timestamp":"2013-10-11T21:49:05.821Z","trustScore":26,"dependencies":[]},{"versionNumber":"1.1.1","timestamp":"2013-11-11T19:51:20.116Z","trustScore":27,"dependencies":[]},{"versionNumber":"1.2.0","timestamp":"2014-06-29T13:19:58.780Z","trustScore":33,"dependencies":[]},{"versionNumber":"2.0.0","timestamp":"2014-07-28T10:37:48.464Z","trustScore":28,"dependencies":[]},{"versionNumber":"2.0.1","timestamp":"2015-05-24T21:08:22.967Z","trustScore":27,"dependencies":[]},{"versionNumber":"2.1.0","timestamp":"2015-06-19T12:16:34.632Z","trustScore":27,"dependencies":[]},{"versionNumber":"2.1.1","timestamp":"2015-06-19T17:05:19.744Z","trustScore":29,"dependencies":[]},{"versionNumber":"2.1.2","timestamp":"2015-06-22T20:56:57.701Z","trustScore":28,"dependencies":[]},{"versionNumber":"2.2.0","timestamp":"2015-06-25T13:30:33.845Z","trustScore":29,"dependencies":[]},{"versionNumber":"2.2.1","timestamp":"2015-06-25T22:12:33.394Z","trustScore":23,"dependencies":[]},{"versionNumber":"2.2.2","timestamp":"2015-09-16T13:29:56.655Z","trustScore":25,"dependencies":[]},{"versionNumber":"2.2.3","timestamp":"2015-10-14T11:23:24.577Z","trustScore":24,"dependencies":[]},{"versionNumber":"2.3.0","timestamp":"2016-04-17T05:24:55.856Z","trustScore":24,"dependencies":[]},{"versionNumber":"2.3.1","timestamp":"2016-05-13T13:42:24.916Z","trustScore":28,"dependencies":[]},{"versionNumber":"2.4.0","timestamp":"2016-09-16T01:39:39.974Z","trustScore":28,"dependencies":[{"packageName":"graceful-fs","version":"^4.1.6"}]},{"versionNumber":"3.0.0","timestamp":"2017-04-25T17:19:17.193Z","trustScore":26,"dependencies":[{"packageName":"graceful-fs","version":"^4.1.6"}]},{"versionNumber":"3.0.1","timestamp":"2017-07-05T14:48:24.991Z","trustScore":28,"dependencies":[{"packageName":"graceful-fs","version":"^4.1.6"}]},{"versionNumber":"4.0.0","timestamp":"2017-09-12T19:21:59.050Z","trustScore":27,"dependencies":[{"packageName":"graceful-fs","version":"^4.1.6"}]},{"versionNumber":"5.0.0","timestamp":"2018-09-08T17:03:36.222Z","trustScore":23,"dependencies":[{"packageName":"universalify","version":"^0.1.2"},{"packageName":"graceful-fs","version":"^4.1.6"}]},{"versionNumber":"6.0.0","timestamp":"2020-02-24T15:15:09.828Z","trustScore":24,"dependencies":[{"packageName":"universalify","version":"^0.2.0"},{"packageName":"graceful-fs","version":"^4.1.6"}]},{"versionNumber":"6.0.1","timestamp":"2020-03-07T15:10:22.836Z","trustScore":24,"dependencies":[{"packageName":"universalify","version":"^1.0.0"},{"packageName":"graceful-fs","version":"^4.1.6"}]},{"versionNumber":"6.1.0","timestamp":"2020-10-31T17:00:24.450Z","trustScore":8,"dependencies":[{"packageName":"universalify","version":"^2.0.0"},{"packageName":"graceful-fs","version":"^4.1.6"}]}]}},"__N_SSG":true}