{"pageProps":{"postData":{"_id":"5fb066faa28b82fef5a679dd","id":"sax","crawlTimestamp":"14/11/2020 23:23:37","packageName":"sax","description":"An evented streaming XML parser in JavaScript","repository":{"type":"git","url":"git://github.com/isaacs/sax-js.git"},"readme":"# sax js\n\nA sax-style parser for XML and HTML.\n\nDesigned with [node](http://nodejs.org/) in mind, but should work fine in\nthe browser or other CommonJS implementations.\n\n## What This Is\n\n* A very simple tool to parse through an XML string.\n* A stepping stone to a streaming HTML parser.\n* A handy way to deal with RSS and other mostly-ok-but-kinda-broken XML\n  docs.\n\n## What This Is (probably) Not\n\n* An HTML Parser - That's a fine goal, but this isn't it.  It's just\n  XML.\n* A DOM Builder - You can use it to build an object model out of XML,\n  but it doesn't do that out of the box.\n* XSLT - No DOM = no querying.\n* 100% Compliant with (some other SAX implementation) - Most SAX\n  implementations are in Java and do a lot more than this does.\n* An XML Validator - It does a little validation when in strict mode, but\n  not much.\n* A Schema-Aware XSD Thing - Schemas are an exercise in fetishistic\n  masochism.\n* A DTD-aware Thing - Fetching DTDs is a much bigger job.\n\n## Regarding `<!DOCTYPE`s and `<!ENTITY`s\n\nThe parser will handle the basic XML entities in text nodes and attribute\nvalues: `&amp; &lt; &gt; &apos; &quot;`. It's possible to define additional\nentities in XML by putting them in the DTD. This parser doesn't do anything\nwith that. If you want to listen to the `ondoctype` event, and then fetch\nthe doctypes, and read the entities and add them to `parser.ENTITIES`, then\nbe my guest.\n\nUnknown entities will fail in strict mode, and in loose mode, will pass\nthrough unmolested.\n\n## Usage\n\n```javascript\nvar sax = require(\"./lib/sax\"),\n  strict = true, // set to false for html-mode\n  parser = sax.parser(strict);\n\nparser.onerror = function (e) {\n  // an error happened.\n};\nparser.ontext = function (t) {\n  // got some text.  t is the string of text.\n};\nparser.onopentag = function (node) {\n  // opened a tag.  node has \"name\" and \"attributes\"\n};\nparser.onattribute = function (attr) {\n  // an attribute.  attr has \"name\" and \"value\"\n};\nparser.onend = function () {\n  // parser stream is done, and ready to have more stuff written to it.\n};\n\nparser.write('<xml>Hello, <who name=\"world\">world</who>!</xml>').close();\n\n// stream usage\n// takes the same options as the parser\nvar saxStream = require(\"sax\").createStream(strict, options)\nsaxStream.on(\"error\", function (e) {\n  // unhandled errors will throw, since this is a proper node\n  // event emitter.\n  console.error(\"error!\", e)\n  // clear the error\n  this._parser.error = null\n  this._parser.resume()\n})\nsaxStream.on(\"opentag\", function (node) {\n  // same object as above\n})\n// pipe is supported, and it's readable/writable\n// same chunks coming in also go out.\nfs.createReadStream(\"file.xml\")\n  .pipe(saxStream)\n  .pipe(fs.createWriteStream(\"file-copy.xml\"))\n```\n\n\n## Arguments\n\nPass the following arguments to the parser function.  All are optional.\n\n`strict` - Boolean. Whether or not to be a jerk. Default: `false`.\n\n`opt` - Object bag of settings regarding string formatting.  All default to `false`.\n\nSettings supported:\n\n* `trim` - Boolean. Whether or not to trim text and comment nodes.\n* `normalize` - Boolean. If true, then turn any whitespace into a single\n  space.\n* `lowercase` - Boolean. If true, then lowercase tag names and attribute names\n  in loose mode, rather than uppercasing them.\n* `xmlns` - Boolean. If true, then namespaces are supported.\n* `position` - Boolean. If false, then don't track line/col/position.\n* `strictEntities` - Boolean. If true, only parse [predefined XML\n  entities](http://www.w3.org/TR/REC-xml/#sec-predefined-ent)\n  (`&amp;`, `&apos;`, `&gt;`, `&lt;`, and `&quot;`)\n\n## Methods\n\n`write` - Write bytes onto the stream. You don't have to do this all at\nonce. You can keep writing as much as you want.\n\n`close` - Close the stream. Once closed, no more data may be written until\nit is done processing the buffer, which is signaled by the `end` event.\n\n`resume` - To gracefully handle errors, assign a listener to the `error`\nevent. Then, when the error is taken care of, you can call `resume` to\ncontinue parsing. Otherwise, the parser will not continue while in an error\nstate.\n\n## Members\n\nAt all times, the parser object will have the following members:\n\n`line`, `column`, `position` - Indications of the position in the XML\ndocument where the parser currently is looking.\n\n`startTagPosition` - Indicates the position where the current tag starts.\n\n`closed` - Boolean indicating whether or not the parser can be written to.\nIf it's `true`, then wait for the `ready` event to write again.\n\n`strict` - Boolean indicating whether or not the parser is a jerk.\n\n`opt` - Any options passed into the constructor.\n\n`tag` - The current tag being dealt with.\n\nAnd a bunch of other stuff that you probably shouldn't touch.\n\n## Events\n\nAll events emit with a single argument. To listen to an event, assign a\nfunction to `on<eventname>`. Functions get executed in the this-context of\nthe parser object. The list of supported events are also in the exported\n`EVENTS` array.\n\nWhen using the stream interface, assign handlers using the EventEmitter\n`on` function in the normal fashion.\n\n`error` - Indication that something bad happened. The error will be hanging\nout on `parser.error`, and must be deleted before parsing can continue. By\nlistening to this event, you can keep an eye on that kind of stuff. Note:\nthis happens *much* more in strict mode. Argument: instance of `Error`.\n\n`text` - Text node. Argument: string of text.\n\n`doctype` - The `<!DOCTYPE` declaration. Argument: doctype string.\n\n`processinginstruction` - Stuff like `<?xml foo=\"blerg\" ?>`. Argument:\nobject with `name` and `body` members. Attributes are not parsed, as\nprocessing instructions have implementation dependent semantics.\n\n`sgmldeclaration` - Random SGML declarations. Stuff like `<!ENTITY p>`\nwould trigger this kind of event. This is a weird thing to support, so it\nmight go away at some point. SAX isn't intended to be used to parse SGML,\nafter all.\n\n`opentagstart` - Emitted immediately when the tag name is available,\nbut before any attributes are encountered.  Argument: object with a\n`name` field and an empty `attributes` set.  Note that this is the\nsame object that will later be emitted in the `opentag` event.\n\n`opentag` - An opening tag. Argument: object with `name` and `attributes`.\nIn non-strict mode, tag names are uppercased, unless the `lowercase`\noption is set.  If the `xmlns` option is set, then it will contain\nnamespace binding information on the `ns` member, and will have a\n`local`, `prefix`, and `uri` member.\n\n`closetag` - A closing tag. In loose mode, tags are auto-closed if their\nparent closes. In strict mode, well-formedness is enforced. Note that\nself-closing tags will have `closeTag` emitted immediately after `openTag`.\nArgument: tag name.\n\n`attribute` - An attribute node.  Argument: object with `name` and `value`.\nIn non-strict mode, attribute names are uppercased, unless the `lowercase`\noption is set.  If the `xmlns` option is set, it will also contains namespace\ninformation.\n\n`comment` - A comment node.  Argument: the string of the comment.\n\n`opencdata` - The opening tag of a `<![CDATA[` block.\n\n`cdata` - The text of a `<![CDATA[` block. Since `<![CDATA[` blocks can get\nquite large, this event may fire multiple times for a single block, if it\nis broken up into multiple `write()`s. Argument: the string of random\ncharacter data.\n\n`closecdata` - The closing tag (`]]>`) of a `<![CDATA[` block.\n\n`opennamespace` - If the `xmlns` option is set, then this event will\nsignal the start of a new namespace binding.\n\n`closenamespace` - If the `xmlns` option is set, then this event will\nsignal the end of a namespace binding.\n\n`end` - Indication that the closed stream has ended.\n\n`ready` - Indication that the stream has reset, and is ready to be written\nto.\n\n`noscript` - In non-strict mode, `<script>` tags trigger a `\"script\"`\nevent, and their contents are not checked for special xml characters.\nIf you pass `noscript: true`, then this behavior is suppressed.\n\n## Reporting Problems\n\nIt's best to write a failing test if you find an issue.  I will always\naccept pull requests with failing tests if they demonstrate intended\nbehavior, but it is very hard to figure out what issue you're describing\nwithout a test.  Writing a test is also the best way for you yourself\nto figure out if you really understand the issue you think you have with\nsax-js.\n","homepage":"https://github.com/isaacs/sax-js#readme","trustScore":26,"sourceRank":{"basic_info_present":1,"repository_present":1,"readme_present":1,"license_present":1,"versions_present":1,"follows_semver":1,"recent_release":0,"not_brand_new":1,"one_point_oh":1,"dependent_projects":6,"dependent_repositories":6,"stars":3,"contributors":1,"subscribers":2,"all_prereleases":0,"any_outdated_dependencies":0,"is_deprecated":0,"is_unmaintained":0,"is_removed":0,"trustScore":26},"versions":[{"versionNumber":"0.1.0","timestamp":"2011-02-09T19:13:51.969Z","trustScore":25,"dependencies":[]},{"versionNumber":"0.1.1","timestamp":"2011-02-09T19:13:51.969Z","trustScore":27,"dependencies":[]},{"versionNumber":"0.1.2","timestamp":"2011-02-09T19:13:51.969Z","trustScore":26,"dependencies":[]},{"versionNumber":"0.1.3","timestamp":"2011-06-14T01:26:18.836Z","trustScore":25,"dependencies":[]},{"versionNumber":"0.1.4","timestamp":"2011-06-14T18:44:43.566Z","trustScore":27,"dependencies":[]},{"versionNumber":"0.1.5","timestamp":"2011-07-08T23:49:39.930Z","trustScore":27,"dependencies":[]},{"versionNumber":"0.2.0","timestamp":"2011-07-20T23:53:50.073Z","trustScore":24,"dependencies":[]},{"versionNumber":"0.2.1","timestamp":"2011-07-21T01:34:08.297Z","trustScore":25,"dependencies":[]},{"versionNumber":"0.2.2","timestamp":"2011-07-21T20:16:56.686Z","trustScore":28,"dependencies":[]},{"versionNumber":"0.2.3","timestamp":"2011-08-01T16:51:52.531Z","trustScore":27,"dependencies":[]},{"versionNumber":"0.2.4","timestamp":"2011-09-17T00:58:51.899Z","trustScore":26,"dependencies":[]},{"versionNumber":"0.2.5","timestamp":"2011-10-06T17:13:49.723Z","trustScore":29,"dependencies":[]},{"versionNumber":"0.3.0","timestamp":"2011-10-17T15:02:08.184Z","trustScore":26,"dependencies":[]},{"versionNumber":"0.3.1","timestamp":"2011-10-21T00:04:36.763Z","trustScore":28,"dependencies":[]},{"versionNumber":"0.3.2","timestamp":"2011-10-21T22:15:00.311Z","trustScore":27,"dependencies":[]},{"versionNumber":"0.3.3","timestamp":"2011-11-11T16:44:00.293Z","trustScore":22,"dependencies":[]},{"versionNumber":"0.3.4","timestamp":"2011-12-05T05:15:41.943Z","trustScore":28,"dependencies":[]},{"versionNumber":"0.3.5","timestamp":"2011-12-30T03:56:14.892Z","trustScore":25,"dependencies":[]},{"versionNumber":"0.4.1","timestamp":"2012-07-10T19:26:45.999Z","trustScore":28,"dependencies":[]},{"versionNumber":"0.4.0","timestamp":"2012-07-10T19:27:12.052Z","trustScore":30,"dependencies":[]},{"versionNumber":"0.4.2","timestamp":"2012-07-26T04:04:22.445Z","trustScore":29,"dependencies":[]},{"versionNumber":"0.4.3","timestamp":"2012-12-28T05:44:38.410Z","trustScore":24,"dependencies":[]},{"versionNumber":"0.5.0","timestamp":"2013-01-06T18:51:37.546Z","trustScore":24,"dependencies":[]},{"versionNumber":"0.5.1","timestamp":"2013-01-07T21:11:45.506Z","trustScore":24,"dependencies":[]},{"versionNumber":"0.5.2","timestamp":"2013-02-20T16:34:45.595Z","trustScore":23,"dependencies":[]},{"versionNumber":"0.5.3","timestamp":"2013-04-22T21:31:32.371Z","trustScore":29,"dependencies":[]},{"versionNumber":"0.5.4","timestamp":"2013-04-25T23:13:14.436Z","trustScore":24,"dependencies":[]},{"versionNumber":"0.5.5","timestamp":"2013-08-21T16:10:42.555Z","trustScore":26,"dependencies":[]},{"versionNumber":"0.5.6","timestamp":"2013-12-05T23:43:33.631Z","trustScore":24,"dependencies":[]},{"versionNumber":"0.5.7","timestamp":"2013-12-05T23:50:02.652Z","trustScore":24,"dependencies":[]},{"versionNumber":"0.5.8","timestamp":"2013-12-09T00:38:12.647Z","trustScore":27,"dependencies":[]},{"versionNumber":"0.6.0","timestamp":"2014-01-02T16:32:00.285Z","trustScore":23,"dependencies":[]},{"versionNumber":"0.6.1","timestamp":"2014-10-14T17:35:32.436Z","trustScore":29,"dependencies":[]},{"versionNumber":"1.0.0","timestamp":"2015-04-21T01:49:35.272Z","trustScore":27,"dependencies":[]},{"versionNumber":"1.1.0","timestamp":"2015-04-21T22:54:33.327Z","trustScore":25,"dependencies":[]},{"versionNumber":"1.1.1","timestamp":"2015-05-20T07:16:27.722Z","trustScore":22,"dependencies":[]},{"versionNumber":"1.1.2","timestamp":"2015-08-26T22:24:46.354Z","trustScore":23,"dependencies":[]},{"versionNumber":"1.1.3","timestamp":"2015-09-15T00:16:23.256Z","trustScore":24,"dependencies":[]},{"versionNumber":"1.1.4","timestamp":"2015-10-22T17:40:20.687Z","trustScore":28,"dependencies":[]},{"versionNumber":"1.1.5","timestamp":"2016-01-28T05:23:25.517Z","trustScore":24,"dependencies":[]},{"versionNumber":"1.1.6","timestamp":"2016-03-05T09:13:57.725Z","trustScore":23,"dependencies":[]},{"versionNumber":"1.2.1","timestamp":"2016-03-19T04:06:46.554Z","trustScore":29,"dependencies":[]},{"versionNumber":"1.2.2","timestamp":"2017-02-07T22:02:22.387Z","trustScore":30,"dependencies":[]},{"versionNumber":"1.2.3","timestamp":"2017-06-22T17:21:19.940Z","trustScore":27,"dependencies":[]},{"versionNumber":"1.2.4","timestamp":"2017-06-22T17:46:38.198Z","trustScore":28,"dependencies":[]}]}},"__N_SSG":true}