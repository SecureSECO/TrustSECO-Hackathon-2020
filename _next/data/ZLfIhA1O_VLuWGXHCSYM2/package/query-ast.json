{"pageProps":{"postData":{"_id":"5fb669e19f9e7f16fd324b18","id":"query-ast","crawlTimestamp":"19/11/2020 12:49:36","packageName":"query-ast","description":"A library to traverse/modify an AST","repository":{"type":"git","url":"git+ssh://git@github.com/salesforce-ux/query-ast.git"},"readme":"# QueryAST [![Build Status][travis-image]][travis-url] [![NPM version][npm-image]][npm-url] [![Greenkeeper badge](https://badges.greenkeeper.io/salesforce-ux/query-ast.svg)](https://greenkeeper.io/)\n\nA library to traverse/modify an AST\n\n## Documentation\n\nRead the [API documentation](https://salesforce-ux.github.io/query-ast/doc/1.0.0)\n\n## Usage\n\n```javascript\nlet createQueryWrapper = require('query-ast')\nlet $ = createQueryWrapper(ast, options)\n```\n\n## Getting Started\n\nQueryAST aims to provide a jQuery like API for traversing an AST.\n\n```javascript\nlet ast = {\n  type: 'program',\n  value: [{\n    type: 'item_container',\n    value: [{\n      type: 'item',\n      value: 'a'\n    }]\n  }, {\n    type: 'item_container',\n    value: []\n  }, {\n    type: 'item',\n    value: 'b'\n  }]\n}\n\n// Create a QueryWrapper that will be used to traverse/modify an AST\nlet $ = createQueryWrapper(ast)\n\n// By default, the QueryWrapper is scoped to the root node\n$('item').length() // 2\n\n// The QueryWrapper can also be scoped to a NodeWrapper or array of NodeWrappers\n$('item_container').filter((n) => {\n  return $(n).has('item')\n}).length() // 1\n```\n\n### Selectors\n\nMost of the traversal functions take an optional `QueryWrapper~Selector` argument that will\nbe use to filter the results.\n\nA selector can be 1 of 3 types:\n- `string` that is compared against the return value of `options.getType()`\n- `regexp` that is compared against the return value of `options.getType()`\n- `function` that will be passed a `NodeWrapper` and expected to return a `boolean`\n\n```javascript\nlet ast = {\n  type: 'program',\n  value: [{\n    type: 'item_container',\n    value: [{\n      type: 'item',\n      value: 'a'\n    }]\n  }, {\n    type: 'item',\n    value: 'b'\n  }]\n}\n\nlet $ = createQueryWrapper(ast)\n\n// String\n$('item').length() // 2\n\n// RegExp\n$(/item/).length() // 3\n\n// Function\n$((n) => n.node.value === 'a').length() // 1\n```\n\n### Default format\n\nBy default, QueryAST assumes that an AST will be formatted as a node tree\nwhere each node has a `type` key and a `value` key that either contains the\nstring value of the node or an array of child nodes.\n\n```javascript\nlet ast = {\n  type: 'program',\n  value: [{\n    type: 'item',\n    value: 'a'\n  }]\n}\n```\n\n## Alternate formats\n\nNot every AST follows the same format, so QueryAST also provides a way\nto traverse any tree structure. Below are the default options used to\nhandle the above AST structure.\n\n```javascript\nlet options = {\n  /**\n   * Return true if the node has children\n   *\n   * @param {object} node\n   * @returns {boolean}\n   */\n  hasChildren: (node) => Array.isArray(node.value),\n  /**\n   * Return an array of child nodes\n   *\n   * @param {object} node\n   * @returns {object[]}\n   */\n  getChildren: (node) => node.value,\n  /**\n   * Return a string representation of the node's type\n   *\n   * @param {object} node\n   * @returns {string}\n   */\n  getType: (node) => node.type,\n  /**\n   * Convert the node back to JSON. This usually just means merging the\n   * children back into the node\n   *\n   * @param {object} node\n   * @param {object[]} [children]\n   * @returns {string}\n   */\n  toJSON: (node, children) => {\n    return Object.assign({}, node, {\n      value: children ? children : node.value\n    })\n  },\n  /**\n   * Convert the node to a string\n   *\n   * @param {object} node\n   * @returns {string}\n   */\n  toString: (node) => {\n    return typeof node.value === 'string' ? node.value : ''\n  }\n}\n```\n\n## Running tests\n\nClone the repository, then:\n\n```bash\nnpm install\n# requires node >= 6.0.0\nnpm test\n```\n\n## Generate Documentation\n\n```bash\nnpm run doc\n```\n\n[npm-url]: https://npmjs.org/package/query-ast\n[npm-image]: http://img.shields.io/npm/v/query-ast.svg\n\n[travis-url]: https://travis-ci.org/salesforce-ux/query-ast\n[travis-image]: https://travis-ci.org/salesforce-ux/query-ast.svg?branch=master\n","homepage":"https://github.com/salesforce-ux/query-ast","trustScore":14,"sourceRank":{"basic_info_present":1,"repository_present":1,"readme_present":1,"license_present":1,"versions_present":1,"follows_semver":1,"recent_release":0,"not_brand_new":1,"one_point_oh":1,"dependent_projects":2,"dependent_repositories":2,"stars":1,"contributors":1,"subscribers":0,"all_prereleases":0,"any_outdated_dependencies":0,"is_deprecated":0,"is_unmaintained":0,"is_removed":0,"trustScore":14},"versions":[{"versionNumber":"1.0.0","timestamp":"2016-04-25T14:09:26.192Z","trustScore":6,"dependencies":[{"packageName":"invariant","version":"2.2.1"},{"packageName":"lodash","version":"4.6.1"}]},{"versionNumber":"1.0.1","timestamp":"2017-02-23T19:57:23.835Z","trustScore":6,"dependencies":[{"packageName":"invariant","version":"2.2.2"},{"packageName":"lodash","version":"4.17.4"}]},{"versionNumber":"1.0.2","timestamp":"2019-01-16T22:51:19.249Z","trustScore":5,"dependencies":[{"packageName":"invariant","version":"2.2.2"},{"packageName":"lodash","version":"^4.17.4"}]},{"versionNumber":"1.0.3","timestamp":"2020-02-04T04:52:22.798Z","trustScore":14,"dependencies":[{"packageName":"invariant","version":"2.2.2"},{"packageName":"lodash","version":"^4.17.15"}]}]}},"__N_SSG":true}