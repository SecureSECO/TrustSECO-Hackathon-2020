{"pageProps":{"postData":{"_id":"5fb668369f9e7f16fd3249c8","id":"node-source-walk","crawlTimestamp":"19/11/2020 12:42:29","packageName":"node-source-walk","description":"Execute a callback on every node of a source code's AST and stop walking when you see fit","repository":{"type":"git","url":"git+https://github.com/mrjoelkemp/node-source-walk.git"},"readme":"### node-source-walk [![npm](http://img.shields.io/npm/v/node-source-walk.svg)](https://npmjs.org/package/node-source-walk) [![npm](http://img.shields.io/npm/dm/node-source-walk.svg)](https://npmjs.org/package/node-source-walk)\n\n> Synchronously execute a callback on every node of a file's AST and stop walking whenever you see fit.\n\n`npm install --save node-source-walk`\n\n### Usage\n\n```javascript\n  var Walker = require('node-source-walk');\n\n  var walker = new Walker();\n\n  // Assume src is the string contents of myfile.js\n  // or the AST of an outside parse of myfile.js\n\n  walker.walk(src, function(node) {\n    if (node.type === whateverImLookingFor) {\n      // No need to keep traversing since we found what we wanted\n      walker.stopWalking();\n    }\n  });\n\n```\n\nBy default, Walker will use `babylon` (supporting ES6, JSX, Flow, and all other available babylon plugins) and the `sourceType: module`, but you can change any of the defaults as follows:\n\n```js\nvar walker = new Walker({\n  sourceType: 'script',\n  // If you don't like experimental plugins\n  plugins: [\n    'jsx',\n    'flow'\n  ]\n});\n```\n\n* The supplied options are passed through to the parser, so you can configure it according to babylon's documentation: https://github.com/babel/babylon\n\n### Swap out the parser\n\nIf you want to supply your own parser, you can do:\n\n```js\nvar walker = new Walker({\n  parser: mySweetParser\n});\n```\n\n* The custom parser must have a `.parse` method that takes in a string and returns an object/AST.\n* All of the other options supplied to the Walker constructor will be passed along as parser options to your chosen parser.\n\n### Public Members\n\n`walk(src, cb)`\n\n* Recursively walks the given `src` from top to bottom\n* `src`: the contents of a file **OR** its (already parsed) AST\n* `cb`: a function that is called for every visited node.\n * The argument passed to `cb` will be the currently visited node.\n\n`moonwalk(node, cb)`\n\n* Recursively walks up an AST starting from the given node. This is a traversal that's in the opposite direction of `walk` and `traverse`.\n* `node`: a valid AST node\n* `cb`: a function that is called for every node (specifically via visiting the parent(s) of every node recursively).\n * The argument passed to `cb` will be the currently visited node.\n\n`stopWalking()`\n\n* Halts further walking of the AST until another manual call of `walk` or `moonwalk`.\n* This is super-beneficial when dealing with large source files (or ASTs)\n\n`traverse(node, cb)`\n\n* Allows you to traverse an AST node and execute a callback on it\n* Callback should expect the first argument to be an AST node, similar to `walk`'s callback.\n\n`parse(src)`\n\n* Uses the options supplied to Walker to parse the given source code string and return its AST\nusing the configured parser (or babylon by default).\n\n## License\n\nMIT\n","homepage":"https://github.com/mrjoelkemp/node-source-walk","trustScore":17,"sourceRank":{"basic_info_present":1,"repository_present":1,"readme_present":1,"license_present":1,"versions_present":1,"follows_semver":1,"recent_release":0,"not_brand_new":1,"one_point_oh":1,"dependent_projects":4,"dependent_repositories":3,"stars":1,"contributors":1,"subscribers":0,"all_prereleases":0,"any_outdated_dependencies":0,"is_deprecated":0,"is_unmaintained":0,"is_removed":0,"trustScore":17},"versions":[{"versionNumber":"1.0.0","timestamp":"2014-03-18T22:40:12.239Z","trustScore":7,"dependencies":[{"packageName":"esprima","version":"^1.0.4"}]},{"versionNumber":"1.1.0","timestamp":"2014-03-19T18:06:15.018Z","trustScore":7,"dependencies":[{"packageName":"esprima","version":"^1.0.4"}]},{"versionNumber":"1.1.1","timestamp":"2014-03-26T19:19:23.184Z","trustScore":8,"dependencies":[{"packageName":"esprima","version":"^1.0.4"}]},{"versionNumber":"1.1.2","timestamp":"2014-09-11T21:59:00.510Z","trustScore":8,"dependencies":[{"packageName":"esprima","version":"~1.0.4"}]},{"versionNumber":"1.2.0","timestamp":"2014-10-28T03:31:46.007Z","trustScore":8,"dependencies":[{"packageName":"esprima","version":"~1.0.4"},{"packageName":"esprima-fb","version":"~7001.1.0-dev-harmony-fb"}]},{"versionNumber":"1.3.0","timestamp":"2014-12-13T21:32:52.179Z","trustScore":9,"dependencies":[{"packageName":"acorn","version":"~0.10.0"}]},{"versionNumber":"1.4.0","timestamp":"2014-12-14T00:49:34.910Z","trustScore":7,"dependencies":[{"packageName":"acorn","version":"~0.10.0"}]},{"versionNumber":"1.4.1","timestamp":"2014-12-22T18:57:14.478Z","trustScore":8,"dependencies":[{"packageName":"acorn","version":"~0.10.0"}]},{"versionNumber":"1.4.2","timestamp":"2015-04-26T22:26:29.425Z","trustScore":7,"dependencies":[{"packageName":"acorn","version":"^1.0.3"}]},{"versionNumber":"2.0.0","timestamp":"2015-06-27T18:49:37.915Z","trustScore":9,"dependencies":[{"packageName":"acorn","version":"~2.0.4"}]},{"versionNumber":"2.1.0","timestamp":"2015-10-24T14:07:42.807Z","trustScore":8,"dependencies":[{"packageName":"acorn","version":"^2.0.4"},{"packageName":"acorn-jsx","version":"^2.0.1"},{"packageName":"object-assign","version":"^4.0.1"}]},{"versionNumber":"3.0.0","timestamp":"2016-06-12T02:54:17.007Z","trustScore":7,"dependencies":[{"packageName":"babylon","version":"~6.8.1"},{"packageName":"object-assign","version":"^4.0.1"}]},{"versionNumber":"3.0.1","timestamp":"2016-08-24T02:45:43.997Z","trustScore":8,"dependencies":[{"packageName":"babylon","version":"~6.8.1"},{"packageName":"object-assign","version":"^4.0.1"}]},{"versionNumber":"3.0.2","timestamp":"2016-08-25T02:05:17.317Z","trustScore":7,"dependencies":[{"packageName":"babylon","version":"~6.8.1"}]},{"versionNumber":"3.0.3","timestamp":"2016-08-31T03:36:38.334Z","trustScore":7,"dependencies":[{"packageName":"babylon","version":"~6.8.1"}]},{"versionNumber":"3.1.0","timestamp":"2016-09-03T09:06:46.498Z","trustScore":7,"dependencies":[{"packageName":"babylon","version":"~6.8.1"}]},{"versionNumber":"3.2.0","timestamp":"2016-09-05T03:10:35.797Z","trustScore":7,"dependencies":[{"packageName":"babylon","version":"~6.8.1"}]},{"versionNumber":"3.2.1","timestamp":"2017-05-06T18:11:27.173Z","trustScore":8,"dependencies":[{"packageName":"babylon","version":"^6.17.0"}]},{"versionNumber":"3.3.0","timestamp":"2017-08-27T22:18:05.004Z","trustScore":7,"dependencies":[{"packageName":"babylon","version":"^6.17.0"}]},{"versionNumber":"4.0.0","timestamp":"2018-08-29T01:55:02.640Z","trustScore":7,"dependencies":[{"packageName":"@babel/parser","version":"^7.0.0"}]},{"versionNumber":"4.1.0","timestamp":"2018-10-27T11:56:12.082Z","trustScore":8,"dependencies":[{"packageName":"@babel/parser","version":"^7.0.0"}]},{"versionNumber":"4.2.0","timestamp":"2018-12-14T15:08:33.597Z","trustScore":17,"dependencies":[{"packageName":"@babel/parser","version":"^7.0.0"}]}]}},"__N_SSG":true}