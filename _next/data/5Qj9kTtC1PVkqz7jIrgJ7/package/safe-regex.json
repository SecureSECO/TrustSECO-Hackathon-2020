{"pageProps":{"postData":{"_id":"5fb663e09f9e7f16fd32464c","id":"safe-regex","crawlTimestamp":"19/11/2020 12:23:59","packageName":"safe-regex","description":"detect possibly catastrophic, exponential-time regular expressions","repository":{"type":"git","url":"git://github.com/davisjam/safe-regex.git"},"readme":"# safe-regex\n\nDetect potentially\n[catastrophic](http://regular-expressions.mobi/catastrophic.html)\n[exponential-time](http://perlgeek.de/blog-en/perl-tips/in-search-of-an-exponetial-regexp.html)\nregular expressions by limiting the\n[star height](https://en.wikipedia.org/wiki/Star_height) to 1.\n\nWARNING: This module has both false positives and false negatives.\nUse [vuln-regex-detector](https://github.com/davisjam/vuln-regex-detector) for improved accuracy.\n\n[![Build Status](https://travis-ci.org/davisjam/safe-regex.svg?branch=master)](https://travis-ci.org/davisjam/safe-regex)\n\n## Example\n\nSuppose you have a script named `safe.js`:\n\n``` js\nvar safe = require('safe-regex');\nvar regex = process.argv.slice(2).join(' ');\nconsole.log(safe(regex));\n```\n\nThis is its behavior:\n\n```\n$ node safe.js '(x+x+)+y'\nfalse\n$ node safe.js '(beep|boop)*'\ntrue\n$ node safe.js '(a+){10}'\nfalse\n$ node safe.js '\\blocation\\s*:[^:\\n]+\\b(Oakland|San Francisco)\\b'\ntrue\n```\n\n## Methods\n\n``` js\nconst safe = require('safe-regex')\n```\n\n### const ok = safe(re, opts={})\n\nReturn a boolean `ok` whether or not the regex `re` is safe and not possibly\ncatastrophic.\n\n`re` can be a `RegExp` object or just a string.\n\nIf the `re` is a string and is an invalid regex, returns `false`.\n\n* `opts.limit` - maximum number of allowed repetitions in the entire regex.\nDefault: `25`.\n\n## Install\n\nWith [npm](https://npmjs.org) do:\n\n```\nnpm install safe-regex\n```\n\n## Resources\n\n### What should I do if my project has a super-linear regex?\n\n1. Confirm that it is *reachable* by untrusted input.\n2. If it is, you can consider whether you can prevent worst-case behavior by trimming the input, revising the regex, or replacing the regex with another algorithm like string functions. For examples, see Table 5 in [this article](http://people.cs.vt.edu/davisjam/downloads/publications/DavisCoghlanServantLee-EcosystemREDOS-ESECFSE18.pdf).\n3. If none of those solutions looks feasible, you might also consider changing regex engines. The [RE2 bindings](https://www.npmjs.com/package/re2) might work, though test carefully to confirm there are no [semantic portability problems](https://medium.com/@davisjam/why-arent-regexes-a-lingua-franca-esecfse19-a36348df3a2?source=friends_link&sk=d21be7f8f723e2080dc993385c6973d1).\n\n### Further reading\n\nThe following documents may be edifying:\n\n- [Research brief on the extent of super-linear regexes in practice](https://medium.com/@davisjam/introduction-987fdc4c7b0?source=friends_link&sk=ceefa4a4ca9617e08ab782c3b1580aea)\n- [Research brief on the variability of super-linear regex behavior across programming languages](https://medium.com/@davisjam/why-arent-regexes-a-lingua-franca-esecfse19-a36348df3a2?source=friends_link&sk=d21be7f8f723e2080dc993385c6973d1)\n- [Comparing regex matching algorithms](https://swtch.com/~rsc/regexp/regexp1.html)\n\n## Project policies\n\n### Versioning\n\nThis project follows [Semantic Versioning 2.0 (semver)](https://semver.org/).\n\nHere are the project-specific meanings of MAJOR, MINOR, and PATCH updates:\n\n- MAJOR: \"Incompatible\" API changes were introduced. There are two types in this module:\n  - Changes that modify the interface\n  - Changes that cause any regexes to be marked as unsafe that were formerly marked as safe\n- MINOR: Functionality was added in a backwards-compatible manner. There are two types in this module:\n  - Refactoring the analyses but not changing their results\n  - Modifying the analyses to reduce false positives, without affecting negatives (false or true)\n- PATCH: I don't anticipate using PATCH for this module\n\n### License\n\n[MIT](https://github.com/davisjam/safe-regex/blob/master/LICENSE)","homepage":"https://github.com/davisjam/safe-regex","trustScore":22,"sourceRank":{"basic_info_present":1,"repository_present":1,"readme_present":1,"license_present":1,"versions_present":1,"follows_semver":1,"recent_release":0,"not_brand_new":1,"one_point_oh":1,"dependent_projects":4,"dependent_repositories":6,"stars":2,"contributors":0,"subscribers":2,"all_prereleases":0,"any_outdated_dependencies":0,"is_deprecated":0,"is_unmaintained":0,"is_removed":0,"trustScore":22},"versions":[{"versionNumber":"0.0.0","timestamp":"2013-07-13T02:56:02.406Z","trustScore":9,"dependencies":[{"packageName":"ret","version":"~0.1.6"}]},{"versionNumber":"0.0.1","timestamp":"2013-11-22T08:44:01.232Z","trustScore":9,"dependencies":[{"packageName":"ret","version":"~0.1.6"}]},{"versionNumber":"1.0.0","timestamp":"2015-02-06T16:36:31.893Z","trustScore":10,"dependencies":[{"packageName":"ret","version":"~0.1.10"}]},{"versionNumber":"1.1.0","timestamp":"2015-03-19T00:30:21.780Z","trustScore":10,"dependencies":[{"packageName":"ret","version":"~0.1.10"}]},{"versionNumber":"2.0.0","timestamp":"2018-10-26T17:59:46.642Z","trustScore":9,"dependencies":[{"packageName":"regexp-tree","version":"~0.0.85"}]},{"versionNumber":"2.0.1","timestamp":"2018-11-02T15:34:25.412Z","trustScore":10,"dependencies":[{"packageName":"regexp-tree","version":"~0.0.85"}]},{"versionNumber":"2.0.2","timestamp":"2019-02-25T20:17:25.012Z","trustScore":8,"dependencies":[{"packageName":"regexp-tree","version":"~0.1.1"}]},{"versionNumber":"2.1.0","timestamp":"2019-10-21T19:42:27.934Z","trustScore":12,"dependencies":[{"packageName":"regexp-tree","version":"~0.1.1"}]},{"versionNumber":"2.1.1","timestamp":"2019-10-21T19:45:01.945Z","trustScore":22,"dependencies":[{"packageName":"regexp-tree","version":"~0.1.1"}]}]}},"__N_SSG":true}