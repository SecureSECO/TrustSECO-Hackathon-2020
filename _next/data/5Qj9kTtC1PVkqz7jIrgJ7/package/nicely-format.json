{"pageProps":{"postData":{"_id":"5fb66a079f9e7f16fd324b38","id":"nicely-format","crawlTimestamp":"19/11/2020 12:50:14","packageName":"nicely-format","description":"Copy of avajs/pretty-format","repository":{"type":"git","url":"git+https://github.com/avajs/pretty-format.git"},"readme":"# @ava/pretty-format [![Travis build status](http://img.shields.io/travis/avajs/pretty-format.svg?style=flat)](https://travis-ci.org/avajs/pretty-format)\n\n> Stringify any JavaScript value.\n\n- Supports [all built-in JavaScript types](#type-support)\n- [Blazingly fast](https://gist.github.com/thejameskyle/2b04ffe4941aafa8f970de077843a8fd) (similar performance to v8's `JSON.stringify` and significantly faster than Node's `util.format`)\n- Plugin system for extending with custom types (i.e. [`ReactTestComponent`](#reacttestcomponent-plugin))\n\n\n## Installation\n\n```sh\n$ npm install @ava/pretty-format\n```\n\n## Usage\n\n```js\nvar prettyFormat = require('pretty-format');\n\nvar obj = { property: {} };\nobj.circularReference = obj;\nobj[Symbol('foo')] = 'foo';\nobj.map = new Map();\nobj.map.set('prop', 'value');\nobj.array = [1, NaN, Infinity];\n\nconsole.log(prettyFormat(obj));\n```\n\n**Result:**\n\n```js\nObject {\n  \"property\": Object {},\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\"\n  },\n  \"array\": Array [\n    1,\n    NaN,\n    Infinity\n  ],\n  Symbol(foo): \"foo\"\n}\n```\n\n#### Type Support\n\n`Object`, `Array`, `ArrayBuffer`, `DataView`, `Float32Array`, `Float64Array`, `Int8Array`, `Int16Array`, `Int32Array`, `Uint8Array`, `Uint8ClampedArray`, `Uint16Array`, `Uint32Array`, `arguments`, `Boolean`, `Date`, `Error`, `Function`, `Infinity`, `Map`, `NaN`, `null`, `Number`, `RegExp`, `Set`, `String`, `Symbol`, `undefined`, `WeakMap`, `WeakSet`\n\n### API\n\n```js\nconsole.log(prettyFormat(object));\nconsole.log(prettyFormat(object, options));\n```\n\nOptions:\n\n* **`callToJSON`**<br>\n  Type: `boolean`, default: `true`<br>\n  Call `toJSON()` on passed object.\n* **`indent`**<br>\n  Type: `number`, default: `2`<br>\n  Number of spaces for indentation.\n* **`maxDepth`**<br>\n  Type: `number`, default: `Infinity`<br>\n  Print only this number of levels.\n* **`min`**<br>\n  Type: `boolean`, default: `false`<br>\n  Print without whitespace.\n* **`plugins`**<br>\n  Type: `array`, default: `[]`<br>\n  Plugins (see the next section).\n* **`printFunctionName`**<br>\n  Type: `boolean`, default: `true`<br>\n  Print function names or just `[Function]`.\n* **`escapeRegex`**<br>\n  Type: `boolean`, default: `false`<br>\n  Escape special characters in regular expressions.\n* **`highlight`**<br>\n  Type: `boolean`, default: `false`<br>\n  Highlight syntax for terminal (works only with `ReactTestComponent` and `ReactElement` plugins.\n* **`theme`**<br>\n  Type: `object`, default: `{tag: 'cyan', content: 'reset'...}`<br>\n  Syntax highlight theme.<br>\n  Uses [ansi-styles colors](https://github.com/chalk/ansi-styles#colors) + `reset` for no color.<br>\n  Available types: `tag`, `content`, `prop` and `value`.\n\n### Plugins\n\nPretty format also supports adding plugins:\n\n```js\nvar fooPlugin = {\n  test: function(val) {\n    return val && val.hasOwnProperty('foo');\n  },\n  print: function(val, print, indent) {\n    return 'Foo: ' + print(val.foo);\n  }\n};\n\nvar obj = { foo: { bar: {} } };\n\nprettyFormat(obj, {\n  plugins: [fooPlugin]\n});\n// Foo: Object {\n//   \"bar\": Object {}\n// }\n```\n\n#### `ReactTestComponent` and `ReactElement` plugins\n\n```js\nvar prettyFormat = require('pretty-format');\nvar reactTestPlugin = require('pretty-format/plugins/ReactTestComponent');\nvar reactElementPlugin = require('pretty-format/plugins/ReactElement');\n\nvar React = require('react');\nvar renderer = require('react-test-renderer');\n\nvar jsx = React.createElement('h1', null, 'Hello World');\n\nprettyFormat(renderer.create(jsx).toJSON(), {\n  plugins: [reactTestPlugin, reactElementPlugin]\n});\n// <h1>\n//   Hello World\n// </h1>\n```\n","homepage":"https://github.com/avajs/pretty-format#readme","trustScore":8,"sourceRank":{"basic_info_present":1,"repository_present":1,"readme_present":1,"license_present":1,"versions_present":0,"follows_semver":1,"recent_release":0,"not_brand_new":1,"one_point_oh":1,"dependent_projects":0,"dependent_repositories":1,"stars":0,"contributors":0,"subscribers":0,"all_prereleases":0,"any_outdated_dependencies":0,"is_deprecated":0,"is_unmaintained":0,"is_removed":0,"trustScore":8},"versions":[{"versionNumber":"1.1.0","timestamp":"2017-02-21T17:00:08.716Z","trustScore":8,"dependencies":[{"packageName":"ansi-styles","version":"^2.2.1"},{"packageName":"esutils","version":"^2.0.2"}]}]}},"__N_SSG":true}