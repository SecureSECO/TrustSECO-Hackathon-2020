{"pageProps":{"postData":{"_id":"5fb668859f9e7f16fd324a00","id":"async-limiter","crawlTimestamp":"19/11/2020 12:43:48","packageName":"async-limiter","description":"asynchronous function queue with adjustable concurrency","repository":{"type":"git","url":"https://github.com/strml/async-limiter.git"},"readme":"# Async-Limiter\n\nA module for limiting concurrent asynchronous actions in flight. Forked from [queue](https://github.com/jessetane/queue).\n\n[![npm](http://img.shields.io/npm/v/async-limiter.svg?style=flat-square)](http://www.npmjs.org/async-limiter)\n[![tests](https://img.shields.io/travis/STRML/async-limiter.svg?style=flat-square&branch=master)](https://travis-ci.org/STRML/async-limiter)\n[![coverage](https://img.shields.io/coveralls/STRML/async-limiter.svg?style=flat-square&branch=master)](https://coveralls.io/r/STRML/async-limiter)\n\nThis module exports a class `Limiter` that implements some of the `Array` API.\nPass async functions (ones that accept a callback or return a promise) to an instance's additive array methods.\n\n## Motivation\n\nCertain functions, like `zlib`, have [undesirable behavior](https://github.com/nodejs/node/issues/8871#issuecomment-250915913) when\nrun at infinite concurrency.\n\nIn this case, it is actually faster, and takes far less memory, to limit concurrency.\n\nThis module should do the absolute minimum work necessary to queue up functions. PRs are welcome that would\nmake this module faster or lighter, but new functionality is not desired.\n\nStyle should confirm to nodejs/node style.\n\n## Example\n\n``` javascript\nvar Limiter = require('async-limiter');\n\nvar t = new Limiter({ concurrency: 2 });\nvar results = [];\n\n// add jobs using the familiar Array API\nt.push(function(cb) {\n  results.push('two');\n  cb();\n});\n\nt.push(\n  function(cb) {\n    results.push('four');\n    cb();\n  },\n  function(cb) {\n    results.push('five');\n    cb();\n  }\n);\n\nt.unshift(function(cb) {\n  results.push('one');\n  cb();\n});\n\nt.splice(2, 0, function(cb) {\n  results.push('three');\n  cb();\n});\n\n// Jobs run automatically on the next tick.\n// If you want a callback when all are done, call 'onDone()'.\nt.onDone(function() {\n  console.log('all done:', results);\n});\n```\n\n## Zlib Example\n\n```js\nconst zlib = require('zlib');\nconst Limiter = require('async-limiter');\n\nconst message = { some: 'data' };\nconst payload = new Buffer(JSON.stringify(message));\n\n// Try with different concurrency values to see how this actually\n// slows significantly with higher concurrency!\n//\n// 5:        1398.607ms\n// 10:       1375.668ms\n// Infinity: 4423.300ms\n//\nconst t = new Limiter({ concurrency: 5 });\nfunction deflate(payload, cb) {\n  t.push(function(done) {\n    zlib.deflate(payload, function(err, buffer) {\n      done();\n      cb(err, buffer);\n    });\n  });\n}\n\nconsole.time('deflate');\nfor (let i = 0; i < 30000; ++i) {\n  deflate(payload, function(err, buffer) {});\n}\nt.onDone(function() {\n  console.timeEnd('deflate');\n});\n```\n\n## Install\n\n`npm install async-limiter`\n\n## Test\n\n`npm test`\n\n## API\n\n### `var t = new Limiter([opts])`\nConstructor. `opts` may contain inital values for:\n* `t.concurrency`\n\n## Instance methods\n\n### `t.onDone(fn)`\n`fn` will be called once and only once, when the queue is empty.\nIf the queue is empty on the next tick, `onDone()` will be called.\n\n## Instance methods mixed in from `Array`\nMozilla has docs on how these methods work [here](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array).\n### `t.push(element1, ..., elementN)`\n### `t.unshift(element1, ..., elementN)`\n### `t.splice(index , howMany[, element1[, ...[, elementN]]])`\n\nOn the next tick, job processing will start.\n\n## Properties\n### `t.concurrency`\nMax number of jobs the queue should process concurrently, defaults to `Infinity`.\n\n### `t.length`\nJobs pending + jobs to process (readonly).\n\n","homepage":"","trustScore":21,"sourceRank":{"basic_info_present":1,"repository_present":1,"readme_present":1,"license_present":1,"versions_present":1,"follows_semver":1,"recent_release":0,"not_brand_new":1,"one_point_oh":1,"dependent_projects":4,"dependent_repositories":6,"stars":1,"contributors":0,"subscribers":2,"all_prereleases":0,"any_outdated_dependencies":0,"is_deprecated":0,"is_unmaintained":0,"is_removed":0,"trustScore":21},"versions":[{"versionNumber":"1.0.0","timestamp":"2017-09-11T16:57:49.546Z","trustScore":10,"dependencies":[]},{"versionNumber":"1.0.1","timestamp":"2019-08-02T15:43:53.217Z","trustScore":9,"dependencies":[]},{"versionNumber":"2.0.0","timestamp":"2019-11-20T17:39:05.353Z","trustScore":21,"dependencies":[]}]}},"__N_SSG":true}