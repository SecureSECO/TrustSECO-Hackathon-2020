{"pageProps":{"postData":{"_id":"5fb66b8d9f9e7f16fd324c63","id":"resolve-options","crawlTimestamp":"19/11/2020 12:56:44","packageName":"resolve-options","description":"Resolve an options object based on configuration.","repository":{"type":"git","url":"git+https://github.com/gulpjs/resolve-options.git"},"readme":"<p align=\"center\">\n  <a href=\"http://gulpjs.com\">\n    <img height=\"257\" width=\"114\" src=\"https://raw.githubusercontent.com/gulpjs/artwork/master/gulp-2x.png\">\n  </a>\n</p>\n\n# resolve-options\n\n[![NPM version][npm-image]][npm-url] [![Downloads][downloads-image]][npm-url] [![Build Status][travis-image]][travis-url] [![AppVeyor Build Status][appveyor-image]][appveyor-url] [![Coveralls Status][coveralls-image]][coveralls-url] [![Gitter chat][gitter-image]][gitter-url]\n\nResolve an options object based on configuration.\n\n## Usage\n\n```js\n// This example assumes a Vinyl file\n\nvar createResolver = require('resolve-options');\n\nvar config = {\n  cwd: {\n    type: 'string',\n    default: process.cwd\n  },\n  sourcemaps: {\n    type: 'boolean',\n    default: false\n  },\n  since: {\n    type: ['date', 'number']\n  },\n  read: {\n    type: 'boolean'\n  }\n};\n\nvar options = {\n  sourcemaps: true,\n  since: Date.now(),\n  read: function(file) {\n    return (file.extname !== '.mp4');\n  }\n};\n\nvar resolver = createResolver(config, options);\n\nvar cwd = resolver.resolve('cwd', file);\n// cwd === process.cwd()\n\nvar sourcemaps = resolver.resolve('sourcemaps', file);\n// sourcemaps === true\n\nvar read = resolver.resolve('read', file);\n// Given .mp4, read === false\n// Given .txt, read === true\n```\n\n## API\n\n### `createResolver([config,] [options])`\n\nTakes a `config` object that describes the options to accept/resolve and an `options` object (usually passed by a user) to resolve against the `config`. Returns a `resolver` that contains a `resolve` method for realtime resolution of options.\n\nThe `config` object takes the following structure:\n```graphql\nconfig {\n  [optionKey] {\n    type // string, array or function\n    default // any value or function\n  }\n}\n```\n\nEach option is represented by its `optionKey` in the `config` object. It must be an object with a `type` property.\n\nThe `type` property must be a string, array or function which will be passed to the [`value-or-function`][value-or-function] module (functions will be bound to the resolver to allow for dependent options).\n\nA `default` property may also be specified as a fallback if the option isn't available or is invalid. The `default` value can be any value or a function (functions will be bound to the resolver to allow for dependent defaults). __Note:__ `default` values are not type-validated by the `value-or-function` module.\n\n### `resolver.resolve(optionKey, [...arguments])`\n\nTakes an `optionKey` string and any number of `arguments` to apply if an option is a function. Returns the resolved value for the `optionKey`.\n\n## License\n\nMIT\n\n[value-or-function]: https://github.com/gulpjs/value-or-function\n\n[downloads-image]: http://img.shields.io/npm/dm/resolve-options.svg\n[npm-url]: https://npmjs.com/package/resolve-options\n[npm-image]: http://img.shields.io/npm/v/resolve-options.svg\n\n[travis-url]: https://travis-ci.org/gulpjs/resolve-options\n[travis-image]: http://img.shields.io/travis/gulpjs/resolve-options.svg?label=travis-ci\n\n[appveyor-url]: https://ci.appveyor.com/project/gulpjs/resolve-options\n[appveyor-image]: https://img.shields.io/appveyor/ci/gulpjs/resolve-options.svg?label=appveyor\n\n[coveralls-url]: https://coveralls.io/r/gulpjs/resolve-options\n[coveralls-image]: http://img.shields.io/coveralls/gulpjs/resolve-options/master.svg\n\n[gitter-url]: https://gitter.im/gulpjs/gulp\n[gitter-image]: https://badges.gitter.im/gulpjs/gulp.png\n","homepage":"https://github.com/gulpjs/resolve-options#readme","trustScore":16,"sourceRank":{"basic_info_present":1,"repository_present":1,"readme_present":1,"license_present":1,"versions_present":1,"follows_semver":1,"recent_release":0,"not_brand_new":1,"one_point_oh":1,"dependent_projects":2,"dependent_repositories":4,"stars":1,"contributors":0,"subscribers":1,"all_prereleases":0,"any_outdated_dependencies":0,"is_deprecated":0,"is_unmaintained":0,"is_removed":0,"trustScore":16},"versions":[{"versionNumber":"1.0.0","timestamp":"2017-06-12T19:50:17.883Z","trustScore":6,"dependencies":[{"packageName":"koalas","version":"^1.0.2"},{"packageName":"value-or-function","version":"^2.0.0"}]},{"versionNumber":"1.1.0","timestamp":"2017-08-19T02:32:52.482Z","trustScore":16,"dependencies":[{"packageName":"value-or-function","version":"^3.0.0"}]}]}},"__N_SSG":true}