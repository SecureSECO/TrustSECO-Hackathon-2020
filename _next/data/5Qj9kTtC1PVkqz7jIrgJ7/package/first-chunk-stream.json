{"pageProps":{"postData":{"_id":"5fb6651d9f9e7f16fd324751","id":"first-chunk-stream","crawlTimestamp":"19/11/2020 12:29:16","packageName":"first-chunk-stream","description":"Buffer and transform the n first bytes of a stream","repository":{"type":"git","url":"git+https://github.com/sindresorhus/first-chunk-stream.git"},"readme":"# first-chunk-stream [![Build Status](https://travis-ci.org/sindresorhus/first-chunk-stream.svg?branch=master)](https://travis-ci.org/sindresorhus/first-chunk-stream)\n\n> Buffer and transform the n first bytes of a stream\n\n\n## Install\n\n```\n$ npm install first-chunk-stream\n```\n\n\n## Usage\n\n```js\nconst fs = require('fs');\nconst getStream = require('get-stream');\nconst FirstChunkStream = require('first-chunk-stream');\n\n// unicorn.txt => unicorn rainbow\nconst stream = fs.createReadStream('unicorn.txt')\n\t.pipe(new FirstChunkStream({chunkSize: 7}, async (chunk, encoding) => {\n\t\treturn chunk.toString(encoding).toUpperCase();\n\t}));\n\n(async () => {\n\tconst data = await getStream(stream);\n\n\tif (data.length < 7) {\n\t\tthrow new Error('Couldn\\'t get the minimum required first chunk length');\n\t}\n\n\tconsole.log(data);\n\t//=> 'UNICORN rainbow'\n})();\n```\n\n\n## API\n\n### FirstChunkStream(options, transform)\n\n`FirstChunkStream` constructor.\n\n#### transform(chunk, encoding)\n\nType: `Function`\n\nAsync function that receives the required `options.chunkSize` bytes.\n\nExpected to return an buffer-like object or `string` or object of form {buffer: `Buffer`, encoding: `string`} to send to stream or `firstChunkStream.stop` to end stream right away.\n\nAn error thrown from this function will be emitted as stream errors.\n\nNote that the buffer can have a smaller length than the required one. In that case, it will be due to the fact that the complete stream contents has a length less than the `options.chunkSize` value. You should check for this yourself if you strictly depend on the length.\n\n```js\nnew FirstChunkStream({chunkSize: 7}, async (chunk, encoding) => {\n\treturn chunk.toString(encoding).toUpperCase(); // Send string to stream\n});\n\nnew FirstChunkStream({chunkSize: 7}, async (chunk, encoding) => {\n\treturn chunk; // Send buffer to stream\n});\n\nnew FirstChunkStream({chunkSize: 7}, async (chunk, encoding) => {\n\treturn {\n\t\tbuffer: chunk,\n\t\tencoding: encoding,\n\t}; // Send buffer with encoding to stream\n});\n\nnew FirstChunkStream({chunkSize: 7}, async (chunk, encoding) => {\n\treturn FirstChunkStream.stop; // End the stream early\n});\n\nnew FirstChunkStream({chunkSize: 7}, async (chunk, encoding) => {\n\tthrow new Error('Unconditional error'); // Emit stream error\n});\n```\n\n#### options\n\nType: `object`\n\nThe options object is passed to the [`Duplex` stream](https://nodejs.org/api/stream.html#stream_class_stream_duplex) constructor allowing you to customize your stream behavior. In addition, you can specify the following option:\n\n###### chunkSize\n\nType: `number`\n\nHow many bytes you want to buffer.\n","homepage":"https://github.com/sindresorhus/first-chunk-stream#readme","trustScore":20,"sourceRank":{"basic_info_present":1,"repository_present":1,"readme_present":1,"license_present":1,"versions_present":1,"follows_semver":1,"recent_release":0,"not_brand_new":1,"one_point_oh":1,"dependent_projects":4,"dependent_repositories":5,"stars":1,"contributors":1,"subscribers":1,"all_prereleases":0,"any_outdated_dependencies":0,"is_deprecated":0,"is_unmaintained":0,"is_removed":0,"trustScore":20},"versions":[{"versionNumber":"0.1.0","timestamp":"2014-05-25T15:47:09.711Z","trustScore":9,"dependencies":[]},{"versionNumber":"1.0.0","timestamp":"2014-08-14T09:06:30.958Z","trustScore":8,"dependencies":[]},{"versionNumber":"2.0.0","timestamp":"2015-09-20T16:31:11.197Z","trustScore":9,"dependencies":[{"packageName":"readable-stream","version":"^2.0.2"}]},{"versionNumber":"3.0.0","timestamp":"2019-05-12T14:15:06.570Z","trustScore":9,"dependencies":[]},{"versionNumber":"4.0.0","timestamp":"2019-06-13T07:23:24.939Z","trustScore":20,"dependencies":[]}]}},"__N_SSG":true}