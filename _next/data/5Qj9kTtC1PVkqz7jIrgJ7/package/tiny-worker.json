{"pageProps":{"postData":{"_id":"5fb668c69f9e7f16fd324a36","id":"tiny-worker","crawlTimestamp":"19/11/2020 12:44:53","packageName":"tiny-worker","description":"Tiny WebWorker for Server","repository":{"type":"git","url":"git+https://github.com/avoidwork/tiny-worker.git"},"readme":"# tiny-worker\r\nTiny WebWorker for Server\r\n\r\n`require()` is available for flexible inline Worker scripts. Optional parameters `args` Array & `options` Object; see `child_process.fork()` documentation.\r\n\r\n[![build status](https://secure.travis-ci.org/avoidwork/tiny-worker.svg)](http://travis-ci.org/avoidwork/tiny-worker)\r\n\r\n## Example\r\n#### Creating a Worker from a file\r\nThe worker script:\r\n```javascript\r\nonmessage = function (ev) {\r\n\tpostMessage(ev.data);\r\n};\r\n```\r\n\r\nThe core script:\r\n```javascript\r\nvar Worker = require(\"tiny-worker\");\r\nvar worker = new Worker(\"repeat.js\");\r\n\r\nworker.onmessage = function (ev) {\r\n\tconsole.log(ev.data);\r\n\tworker.terminate();\r\n};\r\n\r\nworker.postMessage(\"Hello World!\");\r\n```\r\n\r\n#### Enable ES6 import/export within Worker file\r\nThe worker helper script (helper.js):\r\n```javascript\r\nexport const dataFormatter = (data) => {\r\n\treturn `${data} World!`;\r\n};\r\n```\r\n\r\nThe worker script (repeat.js):\r\n```javascript\r\nimport { dataFormatter } from \"./helper\";\r\n\r\nonmessage = function (ev) {\r\n\tconst data = dataFormatter(ev.data);\r\n\tpostMessage(data);\r\n};\r\n```\r\n\r\nThe core script:\r\n```javascript\r\nvar Worker = require(\"tiny-worker\");\r\nvar worker = new Worker(\"repeat.js\", [], {esm: true});\r\n\r\nworker.onmessage = function (ev) {\r\n\tconsole.log(ev.data);\r\n\tworker.terminate();\r\n};\r\n\r\nworker.postMessage(\"Hello\");\r\n```\r\n\r\n#### Creating a Worker from a Function\r\n```javascript\r\nvar Worker = require(\"tiny-worker\");\r\nvar worker = new Worker(function () {\r\n\tself.onmessage = function (ev) {\r\n\t\tpostMessage(ev.data);\r\n\t};\r\n});\r\n\r\nworker.onmessage = function (ev) {\r\n\tconsole.log(ev.data);\r\n\tworker.terminate();\r\n};\r\n\r\nworker.postMessage(\"Hello World!\");\r\n```\r\n\r\n# Debugging\r\nTo be able to debug a child process, it must have a differnt debug port than the parent. \r\nTiny worker does this by adding a random port within a range to the parents debug port.\r\nThe default Range is `[1, 300]`, it can be changed with the `setRange(min, max)` method.\r\nTo disable any automatic port redirection set `options.noDebugRedirection = true`.\r\n\r\n### automatic redirection\r\n```javascript\r\n//parent is started with '--debug=1234'\r\nvar Worker = require(\"tiny-worker\");\r\nWorker.setRange(2, 20);\r\n\r\nvar worker = new Worker(function () {\r\n\tpostMessage(process.debugPort); \r\n});\r\n\r\nworker.onmessage = function (ev) {\r\n\tconsole.log(ev.data); //prints any number between 1236 and 1254\r\n\tworker.terminate();\r\n}\r\n```\r\n\r\n### manual redirection\r\n```javascript\r\n//parent is started with '--debug=1234'\r\nvar Worker = require(\"tiny-worker\");\r\n\r\nvar worker = new Worker(function () {\r\n\tpostMessage(process.debugPort); \r\n}, [], {noDebugRedirection: true, execArgv: [\"--debug=1235\"]});\r\n\r\nworker.onmessage = function (ev) {\r\n\tconsole.log(ev.data); //prints 1235\r\n\tworker.terminate();\r\n}\r\n```\r\n\r\n## Properties\r\n#### onmessage\r\nMessage handler, accepts an `Event`\r\n\r\n#### onerror\r\nError handler, accepts an `Event`\r\n\r\n## API\r\n#### addEventListener(event, fn)\r\nAdds an event listener\r\n\r\n#### postMessage()\r\nBroadcasts a message to the `Worker`\r\n\r\n#### terminate()\r\nTerminates the `Worker`\r\n\r\n#### static setRange(min, max)\r\nSets range for debug ports, only affects current process.\r\nReturns true if successful.\r\n\r\n## FAQ\r\n1. I have an orphaned child process that lives on past the parent process' lifespan\r\n  * Most likely a `SIGTERM` or `SIGINT` is not reaching the child process\r\n2. How do I insure all process are terminated?\r\n  * In your core script register a listener for `SIGTERM` or `SIGINT` via `process.on()` which terminates (all) worker process(es) and then gracefully shutdowns via `process.exit(0);`\r\n3. Why `SIGTERM` or `SIGINT`?\r\n  * Unix/BSD will work with `SIGTERM`, but if you also need to support Windows use `SIGINT`\r\n\r\n## License\r\nCopyright (c) 2019 Jason Mulligan\r\nLicensed under the BSD-3 license\r\n","homepage":"https://github.com/avoidwork/tiny-worker","trustScore":18,"sourceRank":{"basic_info_present":1,"repository_present":1,"readme_present":1,"license_present":1,"versions_present":1,"follows_semver":1,"recent_release":0,"not_brand_new":1,"one_point_oh":1,"dependent_projects":4,"dependent_repositories":3,"stars":2,"contributors":1,"subscribers":0,"all_prereleases":0,"any_outdated_dependencies":0,"is_deprecated":0,"is_unmaintained":0,"is_removed":0,"trustScore":18},"versions":[{"versionNumber":"0.1.0","timestamp":"2015-09-29T22:28:15.636Z","trustScore":8,"dependencies":[{"packageName":"tiny-defer","version":"^1.0.2"}]},{"versionNumber":"1.0.0","timestamp":"2015-09-30T00:41:27.642Z","trustScore":9,"dependencies":[{"packageName":"tiny-defer","version":"^1.0.2"}]},{"versionNumber":"1.0.1","timestamp":"2015-09-30T00:43:30.294Z","trustScore":8,"dependencies":[]},{"versionNumber":"1.0.2","timestamp":"2015-09-30T00:44:54.912Z","trustScore":8,"dependencies":[]},{"versionNumber":"1.0.3","timestamp":"2015-09-30T00:47:23.047Z","trustScore":8,"dependencies":[]},{"versionNumber":"1.0.4","timestamp":"2015-09-30T10:45:58.386Z","trustScore":9,"dependencies":[]},{"versionNumber":"1.1.0","timestamp":"2015-10-14T15:41:40.633Z","trustScore":9,"dependencies":[]},{"versionNumber":"1.1.1","timestamp":"2015-10-14T20:28:35.238Z","trustScore":8,"dependencies":[]},{"versionNumber":"1.1.2","timestamp":"2016-06-15T23:28:43.661Z","trustScore":8,"dependencies":[]},{"versionNumber":"1.1.3","timestamp":"2016-06-15T23:34:50.957Z","trustScore":8,"dependencies":[]},{"versionNumber":"1.1.4","timestamp":"2016-06-15T23:39:25.073Z","trustScore":8,"dependencies":[]},{"versionNumber":"1.1.5","timestamp":"2016-08-05T11:04:43.510Z","trustScore":7,"dependencies":[]},{"versionNumber":"1.1.6","timestamp":"2016-10-03T11:59:25.783Z","trustScore":8,"dependencies":[]},{"versionNumber":"1.1.7","timestamp":"2016-10-03T12:20:37.359Z","trustScore":8,"dependencies":[]},{"versionNumber":"2.0.0","timestamp":"2017-01-05T01:29:37.119Z","trustScore":7,"dependencies":[]},{"versionNumber":"2.0.1","timestamp":"2017-01-05T01:38:19.230Z","trustScore":8,"dependencies":[]},{"versionNumber":"2.0.2","timestamp":"2017-03-05T15:42:01.405Z","trustScore":8,"dependencies":[]},{"versionNumber":"2.0.3","timestamp":"2017-03-13T01:33:24.686Z","trustScore":8,"dependencies":[]},{"versionNumber":"2.1.0","timestamp":"2017-04-20T11:29:53.579Z","trustScore":9,"dependencies":[]},{"versionNumber":"2.1.1","timestamp":"2017-05-04T12:07:01.456Z","trustScore":8,"dependencies":[]},{"versionNumber":"2.1.2","timestamp":"2018-03-01T12:01:53.882Z","trustScore":8,"dependencies":[]},{"versionNumber":"2.2.0","timestamp":"2019-04-11T11:49:38.854Z","trustScore":7,"dependencies":[{"packageName":"esm","version":"^3.2.22"}]},{"versionNumber":"2.3.0","timestamp":"2019-09-20T17:30:30.678Z","trustScore":18,"dependencies":[{"packageName":"esm","version":"^3.2.25"}]}]}},"__N_SSG":true}