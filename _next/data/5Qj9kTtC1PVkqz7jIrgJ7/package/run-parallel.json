{"pageProps":{"postData":{"_id":"5fb66a3a9f9e7f16fd324b63","id":"run-parallel","crawlTimestamp":"19/11/2020 12:51:05","packageName":"run-parallel","description":"Run an array of functions in parallel","repository":{"type":"git","url":"git://github.com/feross/run-parallel.git"},"readme":"# run-parallel [![travis][travis-image]][travis-url] [![npm][npm-image]][npm-url] [![downloads][downloads-image]][downloads-url] [![javascript style guide][standard-image]][standard-url]\n\n[travis-image]: https://img.shields.io/travis/feross/run-parallel/master.svg\n[travis-url]: https://travis-ci.org/feross/run-parallel\n[npm-image]: https://img.shields.io/npm/v/run-parallel.svg\n[npm-url]: https://npmjs.org/package/run-parallel\n[downloads-image]: https://img.shields.io/npm/dm/run-parallel.svg\n[downloads-url]: https://npmjs.org/package/run-parallel\n[standard-image]: https://img.shields.io/badge/code_style-standard-brightgreen.svg\n[standard-url]: https://standardjs.com\n\n### Run an array of functions in parallel\n\n![parallel](https://raw.githubusercontent.com/feross/run-parallel/master/img.png) [![Sauce Test Status](https://saucelabs.com/browser-matrix/run-parallel.svg)](https://saucelabs.com/u/run-parallel)\n\n### install\n\n```\nnpm install run-parallel\n```\n\n### usage\n\n#### parallel(tasks, [callback])\n\nRun the `tasks` array of functions in parallel, without waiting until the previous\nfunction has completed. If any of the functions pass an error to its callback, the main\n`callback` is immediately called with the value of the error. Once the `tasks` have\ncompleted, the results are passed to the final `callback` as an array.\n\nIt is also possible to use an object instead of an array. Each property will be run as a\nfunction and the results will be passed to the final `callback` as an object instead of\nan array. This can be a more readable way of handling the results.\n\n##### arguments\n\n- `tasks` - An array or object containing functions to run. Each function is passed a\n`callback(err, result)` which it must call on completion with an error `err` (which can\nbe `null`) and an optional `result` value.\n- `callback(err, results)` - An optional callback to run once all the functions have\ncompleted. This function gets a results array (or object) containing all the result\narguments passed to the task callbacks.\n\n##### example\n\n```js\nvar parallel = require('run-parallel')\n\nparallel([\n  function (callback) {\n    setTimeout(function () {\n      callback(null, 'one')\n    }, 200)\n  },\n  function (callback) {\n    setTimeout(function () {\n      callback(null, 'two')\n    }, 100)\n  }\n],\n// optional callback\nfunction (err, results) {\n  // the results array will equal ['one','two'] even though\n  // the second function had a shorter timeout.\n})\n```\n\nThis module is basically equavalent to\n[`async.parallel`](https://github.com/caolan/async#paralleltasks-callback), but it's\nhandy to just have the one function you need instead of the kitchen sink. Modularity!\nEspecially handy if you're serving to the browser and need to reduce your javascript\nbundle size.\n\nWorks great in the browser with [browserify](http://browserify.org/)!\n\n### see also\n\n- [run-auto](https://github.com/feross/run-auto)\n- [run-parallel-limit](https://github.com/feross/run-parallel-limit)\n- [run-series](https://github.com/feross/run-series)\n- [run-waterfall](https://github.com/feross/run-waterfall)\n\n### license\n\nMIT. Copyright (c) [Feross Aboukhadijeh](http://feross.org).\n","homepage":"https://github.com/feross/run-parallel","trustScore":23,"sourceRank":{"basic_info_present":1,"repository_present":1,"readme_present":1,"license_present":1,"versions_present":1,"follows_semver":1,"recent_release":0,"not_brand_new":1,"one_point_oh":1,"dependent_projects":6,"dependent_repositories":5,"stars":2,"contributors":1,"subscribers":1,"all_prereleases":0,"any_outdated_dependencies":0,"is_deprecated":0,"is_unmaintained":0,"is_removed":0,"trustScore":23},"versions":[{"versionNumber":"0.1.0","timestamp":"2014-04-12T09:25:52.411Z","trustScore":11,"dependencies":[]},{"versionNumber":"0.1.1","timestamp":"2014-04-12T09:32:38.171Z","trustScore":11,"dependencies":[]},{"versionNumber":"0.2.0","timestamp":"2014-04-13T01:42:33.036Z","trustScore":10,"dependencies":[]},{"versionNumber":"0.3.0","timestamp":"2014-04-14T05:16:08.258Z","trustScore":11,"dependencies":[]},{"versionNumber":"1.0.0","timestamp":"2014-04-29T10:20:12.100Z","trustScore":10,"dependencies":[]},{"versionNumber":"1.1.0","timestamp":"2015-03-19T23:27:44.645Z","trustScore":10,"dependencies":[{"packageName":"dezalgo","version":"^1.0.1"}]},{"versionNumber":"1.1.1","timestamp":"2015-05-05T00:54:06.698Z","trustScore":11,"dependencies":[{"packageName":"dezalgo","version":"^1.0.1"}]},{"versionNumber":"1.1.2","timestamp":"2015-06-24T07:34:32.911Z","trustScore":11,"dependencies":[{"packageName":"dezalgo","version":"^1.0.1"}]},{"versionNumber":"1.1.3","timestamp":"2015-09-22T20:08:20.241Z","trustScore":10,"dependencies":[]},{"versionNumber":"1.1.4","timestamp":"2015-09-22T20:35:54.230Z","trustScore":12,"dependencies":[]},{"versionNumber":"1.1.5","timestamp":"2016-03-11T02:37:58.003Z","trustScore":10,"dependencies":[]},{"versionNumber":"1.1.6","timestamp":"2016-03-29T07:03:16.628Z","trustScore":10,"dependencies":[]},{"versionNumber":"1.1.7","timestamp":"2018-02-14T02:58:18.278Z","trustScore":10,"dependencies":[]},{"versionNumber":"1.1.8","timestamp":"2018-03-17T11:40:36.775Z","trustScore":11,"dependencies":[]},{"versionNumber":"1.1.9","timestamp":"2018-04-26T01:10:54.542Z","trustScore":11,"dependencies":[]},{"versionNumber":"1.1.10","timestamp":"2020-10-27T03:40:37.986Z","trustScore":23,"dependencies":[]}]}},"__N_SSG":true}