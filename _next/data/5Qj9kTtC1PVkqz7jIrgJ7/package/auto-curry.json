{"pageProps":{"postData":{"_id":"5fb66a439f9e7f16fd324b6a","id":"auto-curry","crawlTimestamp":"19/11/2020 12:51:14","packageName":"auto-curry","description":"Supercharge your functions by giving them the ability to auto-curry","repository":{"type":"git","url":"git+https://github.com/zeusdeux/auto-curry.git"},"readme":"auto-curry\n==========\n\nSupercharge your functions by giving them the ability to auto-curry.\n\n> Note:\n> This library actually uses partial application internally and not currying. So, yes, the name is a misnomer.\n> It is the result of my incorrect understanding of the concepts when I wrote the library.\n> It is still perfectly usable and is used in production.\n\n# Installation\n\n```javascript\nnpm install auto-curry --save\n```\n\n# Usage\n\nIn `node`, you can just `require('auto-curry')`.\n\nIn the browser, you can use `build/auto-curry.min.js`\n\n- with `require.js`, `browserify` etc\n- directly by using `window.autoCurry`\n\n## Node\n\n```javascript\nvar cu = require('auto-curry');\nvar add = cu(function (a, b) {\n    return a + b;\n});\nvar messWithThis = cu(function(v){\n  this.a.push(v);\n  return ++v;\n});\nvar map = cu(function map(fn, list) {\n  var self = arguments[2] ? arguments[2] : this;\n  try {\n    return list.map(fn, self);\n  }\n  catch (e) {\n    return [].map.call(list, fn, self);\n  }\n});\nvar x = {a: []};\n\nconsole.log(map(add(1), [1, 2, 3])); //[2, 3, 4]\nconsole.log(map(messWithThis, [1,2,3], x)); //[2, 3, 4]\nconsole.log(x.a); //[1, 2, 3]\n```\n\n## Browser\n\n```javascript\nvar cu = window.autoCurry; //using it off the global\nvar add = cu(function (a, b) {\n    return a + b;\n});\nvar messWithThis = cu(function(v){\n  this.a.push(v);\n  return ++v;\n});\nvar map = cu(function map(fn, list) {\n  console.log(arguments[2]);\n  var self = arguments[2] ? arguments[2] : this;\n  try {\n    return list.map(fn, self);\n  }\n  catch (e) {\n    return [].map.call(list, fn, self);\n  }\n});\nvar x = {a: []};\n\nconsole.log(map(add(1), [1, 2, 3])); //[2, 3, 4]\nconsole.log(map(messWithThis, [1,2,3], x)); //[2, 3, 4]\nconsole.log(x.a); //[1, 2, 3]\n```\n\n# License\n\n[MIT](https://github.com/zeusdeux/auto-curry/blob/master/LICENSE)\n\n# Changelog\n\n#### `0.2.1`\n- Now, if the function passed to `auto-curry` has an arity of one, the function itself is returned. Earlier this was only for zero arity functions.\n","homepage":"https://github.com/zeusdeux/auto-curry","trustScore":11,"sourceRank":{"basic_info_present":1,"repository_present":1,"readme_present":1,"license_present":1,"versions_present":1,"follows_semver":1,"recent_release":0,"not_brand_new":1,"one_point_oh":0,"dependent_projects":2,"dependent_repositories":1,"stars":1,"contributors":0,"subscribers":0,"all_prereleases":0,"any_outdated_dependencies":0,"is_deprecated":0,"is_unmaintained":0,"is_removed":0,"trustScore":11},"versions":[{"versionNumber":"0.1.0","timestamp":"2014-09-02T06:36:52.797Z","trustScore":5,"dependencies":[]},{"versionNumber":"0.1.1","timestamp":"2014-09-08T07:43:24.009Z","trustScore":5,"dependencies":[]},{"versionNumber":"0.2.0","timestamp":"2014-10-04T10:06:16.762Z","trustScore":5,"dependencies":[]},{"versionNumber":"0.2.1","timestamp":"2016-10-17T23:08:32.216Z","trustScore":11,"dependencies":[]}]}},"__N_SSG":true}