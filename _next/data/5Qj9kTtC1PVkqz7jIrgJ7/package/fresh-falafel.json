{"pageProps":{"postData":{"_id":"5fb66a1e9f9e7f16fd324b4a","id":"fresh-falafel","crawlTimestamp":"19/11/2020 12:50:37","packageName":"fresh-falafel","description":"transform the ast on a recursive walk","repository":{"type":"git","url":"git://github.com/substack/node-falafel.git"},"readme":"**IMPORTANT for fresh-falafel**\n\nThis is a fork of falafel that adds the ability to set the parser without requiring `acorn` ahead of time.\n\nIf [this](https://github.com/substack/node-falafel/pull/51) ever get merged you can use regular\nfalafel instead.\n\nOriginal readme below\n\n========\n\n# falafel\n\nTransform the [ast](http://en.wikipedia.org/wiki/Abstract_syntax_tree) on a\nrecursive walk.\n\n[![browser support](http://ci.testling.com/substack/node-falafel.png)](http://ci.testling.com/substack/node-falafel)\n\n[![build status](https://secure.travis-ci.org/substack/node-falafel.png)](http://travis-ci.org/substack/node-falafel)\n\nThis modules uses [acorn](https://npmjs.org/package/acorn) to create an AST from\nsource code.\n\n![falafel d√∂ner](http://substack.net/images/falafel.png)\n\n# example\n\n## array.js\n\nPut a function wrapper around all array literals.\n\n``` js\nvar falafel = require('falafel');\n\nvar src = '(' + function () {\n    var xs = [ 1, 2, [ 3, 4 ] ];\n    var ys = [ 5, 6 ];\n    console.dir([ xs, ys ]);\n} + ')()';\n\nvar output = falafel(src, function (node) {\n    if (node.type === 'ArrayExpression') {\n        node.update('fn(' + node.source() + ')');\n    }\n});\nconsole.log(output);\n```\n\noutput:\n\n```\n(function () {\n    var xs = fn([ 1, 2, fn([ 3, 4 ]) ]);\n    var ys = fn([ 5, 6 ]);\n    console.dir(fn([ xs, ys ]));\n})()\n```\n\n# methods\n\n``` js\nvar falafel = require('falafel')\n```\n\n## falafel(src, opts={}, fn)\n\nTransform the string source `src` with the function `fn`, returning a\nstring-like transformed output object.\n\nFor every node in the ast, `fn(node)` fires. The recursive walk is a\npre-traversal, so children get called before their parents.\n\nPerforming a pre-traversal makes it easier to write nested transforms since\ntransforming parents often requires transforming all its children first.\n\nThe return value is string-like (it defines `.toString()` and `.inspect()`) so\nthat you can call `node.update()` asynchronously after the function has\nreturned and still capture the output.\n\nInstead of passing a `src` you can also use `opts.source`.\n\nAll of the `opts` will be passed directly to\n[acorn](https://npmjs.org/package/acorn).\n\n## custom parser\n\nYou may pass in an instance of acorn to the opts as `opts.parser` to use that\nversion instead of the version of acorn packaged with this library.\n\n```js\nvar acorn = require('acorn-jsx');\n\nfalafel(src, {parser: acorn, plugins: { jsx: true }}, function(node) {\n  // this will parse jsx\n});\n```\n\n# nodes\n\nAside from the regular [esprima](http://esprima.org) data, you can also call\nsome inserted methods on nodes.\n\nAside from updating the current node, you can also reach into sub-nodes to call\nupdate functions on children from parent nodes.\n\n## node.source()\n\nReturn the source for the given node, including any modifications made to\nchildren nodes.\n\n## node.update(s)\n\nTransform the source for the present node to the string `s`.\n\nNote that in `'ForStatement'` node types, there is an existing subnode called\n`update`. For those nodes all the properties are copied over onto the\n`node.update()` function.\n\n## node.parent\n\nReference to the parent element or `null` at the root element.\n\n# install\n\nWith [npm](http://npmjs.org) do:\n\n```\nnpm install falafel\n```\n\n# license\n\nMIT\n","homepage":"https://github.com/substack/node-falafel#readme","trustScore":12,"sourceRank":{"basic_info_present":1,"repository_present":1,"readme_present":1,"license_present":1,"versions_present":1,"follows_semver":1,"recent_release":0,"not_brand_new":1,"one_point_oh":1,"dependent_projects":2,"dependent_repositories":2,"stars":0,"contributors":1,"subscribers":0,"all_prereleases":0,"any_outdated_dependencies":-1,"is_deprecated":0,"is_unmaintained":0,"is_removed":0,"trustScore":12},"versions":[{"versionNumber":"0.2.3","timestamp":"2015-02-24T09:03:09.979Z","trustScore":6,"dependencies":[{"packageName":"esprima","version":"git+https://github.com/substack/esprima#is-keyword"}]},{"versionNumber":"0.2.4","timestamp":"2015-02-24T11:24:31.380Z","trustScore":6,"dependencies":[{"packageName":"esprima","version":"git+https://github.com/substack/esprima#is-keyword"}]},{"versionNumber":"0.2.5","timestamp":"2015-02-24T11:26:07.644Z","trustScore":5,"dependencies":[{"packageName":"esprima","version":"git+https://github.com/substack/esprima#is-keyword"}]},{"versionNumber":"0.2.6","timestamp":"2015-02-27T04:19:11.116Z","trustScore":6,"dependencies":[{"packageName":"esprima","version":"^2.0.0"}]},{"versionNumber":"1.2.0","timestamp":"2015-11-15T01:59:39.802Z","trustScore":12,"dependencies":[{"packageName":"acorn","version":"^1.0.3"},{"packageName":"foreach","version":"^2.0.5"},{"packageName":"isarray","version":"0.0.1"},{"packageName":"object-keys","version":"^1.0.6"}]}]}},"__N_SSG":true}