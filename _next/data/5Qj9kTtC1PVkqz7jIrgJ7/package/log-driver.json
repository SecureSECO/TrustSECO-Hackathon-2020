{"pageProps":{"postData":{"_id":"5fb66a829f9e7f16fd324b9d","id":"log-driver","crawlTimestamp":"19/11/2020 12:52:16","packageName":"log-driver","description":"log-driver is a simple logging framework for logging to stdout","repository":{"type":"git","url":"git://github.com/cainus/logdriver.git"},"readme":"![Log Driver][logdriver-logo]\n=========\n[![Build Status][travis-image]][travis-url] [![NPM Version][npm-image]][npm-url] [![codecov.io](https://codecov.io/github/cainus/logdriver/coverage.svg?branch=master)](https://codecov.io/github/cainus/logdriver?branch=master)\n\nLogdriver is a node.js logger that only logs to stdout.\n\n#### You're going to want to log the output of stdout and stderr anyway, so you might as well put all your logging through stdout.  Logging libraries that don't write to stdout or stderr are missing absolutely critical output like the stack trace if/when your app dies.  \n\n## There are some other nice advantages:\n* When working on your app locally, logs just show up in stdout just like if you'd used console.log().  That's a heck of a lot simpler than tailing a log file.\n* Logging transports can be externalized from your app entirely, and completely decoupled.  This means if you want to log to irc, you write an irc client script that reads from stdin, and you just pipe your app's output to that script.\n\n```console\nnode yourapp.js 2>&1 | node ircloggerbot.js \n```\n* You can still easily log to a file on a production server by piping your stdout and stderr to a file like so when you initialize your app:\n\n```console\nnode yourapp.js 2>&1 >> somefile.log \n```\n\nNB: If you're logging to a file, [Logrotate](http://linuxcommand.org/man_pages/logrotate8.html) is probably going to be your best friend.\n* You can still easily log to syslog by piping your stdout and stderr to the 'logger' command like so:\n\n```console\nnode yourapp.js 2>&1 | logger\n```\n\n## Usage:\nGetting the default logger:\n```javascript\nvar logger = require('log-driver').logger;\n```\n\nThis logger has levels 'error', 'warn', 'info', 'debug', and 'trace'.\nIf you don't like those levels, change the default:\n\n```javascript\nvar logger = require('log-driver')({\n  levels: ['superimportant', 'checkthisout', 'whocares' ]\n});\nlogger.whocares(\"brangelina in lover's quarrel!\");\n```\n\nSpecifying what log level to log at to make logs less chatty:\n```javascript\nvar logger = require('log-driver')({ level: \"info\" });\nlogger.info(\"info test\"); \nlogger.warn(\"warn test\"); \nlogger.error(\"error test\"); \nlogger.trace(\"trace test\"); \n```\noutput:\n```console\n[info] \"2013-03-26T18:30:14.570Z\"  'info test'\n[warn] \"2013-03-26T18:30:14.573Z\"  'warn test'\n[error] \"2013-03-26T18:30:14.574Z\"  'error test'\n```\n(notice the trace() call was omitted because it's less than the info\nlevel.\n\nTurning off all log output (sometimes nice for automated tests to keep\noutput clean):\n```javascript\nvar logger = require('log-driver')({ level: false });\n```\n\nUsing the same logger everywhere:\nThe last logger you created is always available this way:\n```javascript\nvar logger = require('log-driver').logger;\n```\nThis way, if you use only one logger in your application (like most\napplications), you can just configure it once, and get it this way\neverywhere else.\n\nDon't like the logging format?  Just change it by passing a new\nformatting function like so:\n```javascript\nvar logger = require('log-driver')({ \n  format: function() {\n    // let's do pure JSON:\n    return JSON.stringify(arguments);\n  }\n});\n```\n\n[logdriver-logo]: https://raw.github.com/cainus/logdriver/master/logo.png\n\n[travis-image]: https://travis-ci.org/cainus/logdriver.png?branch=master\n[travis-url]: https://travis-ci.org/cainus/logdriver\n\n[coveralls-image]: https://coveralls.io/repos/cainus/logdriver/badge.png?branch=master\n[coveralls-url]: https://coveralls.io/repos/cainus/logdriver\n\n[npm-image]: https://badge.fury.io/js/log-driver.png\n[npm-url]: https://badge.fury.io/js/log-driver\n","homepage":"https://github.com/cainus/logdriver","trustScore":19,"sourceRank":{"basic_info_present":1,"repository_present":1,"readme_present":1,"license_present":1,"versions_present":1,"follows_semver":1,"recent_release":0,"not_brand_new":1,"one_point_oh":1,"dependent_projects":4,"dependent_repositories":4,"stars":1,"contributors":1,"subscribers":1,"all_prereleases":0,"any_outdated_dependencies":0,"is_deprecated":0,"is_unmaintained":0,"is_removed":0,"trustScore":19},"versions":[{"versionNumber":"1.0.0","timestamp":"2013-03-18T03:41:55.015Z","trustScore":8,"dependencies":[]},{"versionNumber":"1.2.0","timestamp":"2013-03-26T20:30:41.591Z","trustScore":7,"dependencies":[]},{"versionNumber":"1.2.1","timestamp":"2013-05-11T14:26:48.077Z","trustScore":9,"dependencies":[]},{"versionNumber":"1.2.2","timestamp":"2013-12-01T02:02:03.708Z","trustScore":9,"dependencies":[]},{"versionNumber":"1.2.3","timestamp":"2014-04-04T15:34:49.385Z","trustScore":9,"dependencies":[]},{"versionNumber":"1.2.4","timestamp":"2014-04-04T15:42:10.391Z","trustScore":8,"dependencies":[]},{"versionNumber":"1.2.5","timestamp":"2014-09-26T03:43:28.825Z","trustScore":9,"dependencies":[]},{"versionNumber":"1.2.6","timestamp":"2018-02-09T19:25:52.973Z","trustScore":10,"dependencies":[{"packageName":"codecov.io","version":"0.0.1"}]},{"versionNumber":"1.2.7","timestamp":"2018-02-19T17:30:01.658Z","trustScore":19,"dependencies":[]}]}},"__N_SSG":true}