{"pageProps":{"postData":{"_id":"5fb668739f9e7f16fd3249f1","id":"contextify","crawlTimestamp":"19/11/2020 12:43:30","packageName":"contextify","description":"Turn an object into a persistent execution context.","repository":{"type":"git","url":"git+https://github.com/brianmcd/contextify.git"},"readme":"# UNMAINTAINED\nThis module is no longer being maintained.  If you're interested in becoming a maintainer, please open an issue.\n\n## YOU DON'T NEED THIS MODULE ON NODE >= 0.12\n\nAs of Node 0.12, Contextify has been merged into Node (thanks to @domenic), replacing the native `vm` module.\nThe code has been improved on since then, so if at all possible, you should use a newer Node and the native `vm` module.\nNote that newer versions of JSDOM no longer depend on Contextify.\n\nThe README below applies to Node 0.10 and below.\n\n# Contextify\n\n## Installation issues\n\nMake sure you have the `node-gyp` prerequisites installed: https://github.com/nodejs/node-gyp#installation\n\nFor Windows issues, see here: https://github.com/brianmcd/contextify/wiki/Windows-Installation-Guide\n\n## What is Contextify?\n\nTurn an object into a V8 execution context.  A contextified object acts as the global 'this' when executing scripts in its context.  Contextify adds 3 methods to the contextified object: run(code, filename), getGlobal(), and dispose().  The main difference between Contextify and Node's vm methods is that Contextify allows asynchronous functions to continue executing in the Contextified object's context.  See vm vs. Contextify below for more discussion.\n\n## Examples\n```javascript\nvar Contextify = require('contextify');\nvar sandbox = { console : console, prop1 : 'prop1'};\nContextify(sandbox);\nsandbox.run('console.log(prop1);');\nsandbox.dispose(); // free the resources allocated for the context.\n```\n\n```javascript\nvar sandbox = Contextify(); // returns an empty contextified object.\nsandbox.run('var x = 3;');\nconsole.log(sandbox.x); // prints 3\nsandbox.dispose();\n```\n\n```javascript\nvar sandbox = Contextify({setTimeout : setTimeout});\nsandbox.run(\"setTimeout(function () { x = 3; }, 5);\");\nconsole.log(sandbox.x); // prints undefined\nsetTimeout(function () {\n    console.log(sandbox.x); // prints 3\n    sandbox.dispose();\n}, 10);\n```\n## Details\n\n**Contextify([sandbox])**\n\n    sandbox - The object to contextify, which will be modified as described below\n              If no sandbox is specified, an empty object will be allocated and used instead.\n\n    Returns the contextified object.  It doesn't make a copy, so if you already have a reference\n    to the sandbox, you don't need to catch the return value.\n\nA Contextified object has 2 methods added to it:\n\n**run(code, [filename])**\n\n    code - string containing JavaScript to execute\n    filename  - an optional filename for debugging.\n\n    Runs the code in the Contextified object's context.\n\n**getGlobal()**\n\nReturns the actual global object for the V8 context.  The global object is initialized with interceptors (discussed below) which forward accesses on it to the contextified object.  This means the contextified object acts like the global object in most cases.  Sometimes, though, you need to make a reference to the actual global object.\n\nFor example:\n\n```javascript\nvar window = Contextify({console : console});\nwindow.window = window;\nwindow.run(\"console.log(window === this);\");\n// prints false.\n```\n\n```javascript\nvar window = Contextify({console : console});\nwindow.window = window.getGlobal();\nwindow.run(\"console.log(window === this);\");\n// prints true\n```\n\nThe global object returned by getGlobal() can be treated like the contextified sandbox object, except that defining getters/setters will not work on it.  Define getters and setters on the actual sandbox object instead.\n\n**dispose()**\n\nFrees the memory allocated for the underlying V8 context.  If you don't call this when you're done, the V8 context memory will leak, as will the sandbox memory, since the context's global stores a strong reference to the sandbox object.  You can still use your sandbox object after calling dispose(), but it's unsafe to use a global previously returned from getGlobal().  run, getGlobal, and dispose will be removed from the sandbox object.\n\n## Install\n\n    npm install contextify\n\n## require('vm') vs. Contextify\n\nNode's vm functions (runInContext etc) work by copying the values from the sandbox object onto a context's global object, executing the passed in script, then copying the results back.  This means that scripts that create asynchronous functions (using mechanisms like setTimeout) won't have see the results of executing those functions, since the copying in/out only occurs during an explicit call to runInContext and friends.  \n\nContextify creates a V8 context, and uses interceptors (see: http://code.google.com/apis/v8/embed.html#interceptors) to forward global object accesses to the sandbox object.  This means there is no copying in or out, so asynchronous functions have the expected effect on the sandbox object.  \n\n## Tests\n\nTesting is done with nodeunit.  Run the tests with\n\n    nodeunit test/\n\nOutput: \n\n    OK: 92 assertions (27ms)\n\n\n## Building\n\n    node-gyp rebuild\n\n## Acknowledgments\n\nInspiration taken from Assaf's Zombie.js context solution: https://github.com/assaf/zombie\n","homepage":"https://github.com/brianmcd/contextify#readme","trustScore":18,"sourceRank":{"basic_info_present":1,"repository_present":1,"readme_present":1,"license_present":1,"versions_present":1,"follows_semver":1,"recent_release":0,"not_brand_new":1,"one_point_oh":1,"dependent_projects":4,"dependent_repositories":3,"stars":2,"contributors":1,"subscribers":0,"all_prereleases":0,"any_outdated_dependencies":0,"is_deprecated":0,"is_unmaintained":0,"is_removed":0,"trustScore":18},"versions":[{"versionNumber":"0.0.2","timestamp":"2011-08-05T01:31:54.923Z","trustScore":9,"dependencies":[]},{"versionNumber":"0.0.3","timestamp":"2011-08-08T16:04:32.438Z","trustScore":9,"dependencies":[]},{"versionNumber":"0.0.4","timestamp":"2011-08-29T23:59:57.474Z","trustScore":8,"dependencies":[]},{"versionNumber":"0.0.5","timestamp":"2011-09-07T01:23:45.671Z","trustScore":9,"dependencies":[]},{"versionNumber":"0.0.6","timestamp":"2011-10-10T01:17:57.855Z","trustScore":8,"dependencies":[]},{"versionNumber":"0.0.7","timestamp":"2011-12-13T18:41:30.837Z","trustScore":8,"dependencies":[]},{"versionNumber":"0.1.0","timestamp":"2012-01-09T20:49:02.195Z","trustScore":8,"dependencies":[]},{"versionNumber":"0.1.1","timestamp":"2012-02-25T02:17:54.874Z","trustScore":9,"dependencies":[{"packageName":"bindings","version":"*"}]},{"versionNumber":"0.1.2","timestamp":"2012-03-14T18:38:03.806Z","trustScore":9,"dependencies":[{"packageName":"bindings","version":"*"}]},{"versionNumber":"0.1.3","timestamp":"2012-05-17T02:39:39.189Z","trustScore":8,"dependencies":[{"packageName":"bindings","version":"*"}]},{"versionNumber":"0.1.4","timestamp":"2013-02-11T03:00:03.295Z","trustScore":9,"dependencies":[{"packageName":"bindings","version":"*"}]},{"versionNumber":"0.1.5","timestamp":"2013-03-12T01:19:07.005Z","trustScore":9,"dependencies":[{"packageName":"bindings","version":"*"}]},{"versionNumber":"0.1.6","timestamp":"2013-06-12T02:54:16.906Z","trustScore":8,"dependencies":[{"packageName":"bindings","version":"*"}]},{"versionNumber":"0.1.7","timestamp":"2014-03-06T15:45:53.770Z","trustScore":8,"dependencies":[{"packageName":"bindings","version":"*"},{"packageName":"nan","version":"~0.8.0"}]},{"versionNumber":"0.1.8","timestamp":"2014-05-10T13:34:30.501Z","trustScore":8,"dependencies":[{"packageName":"bindings","version":"*"},{"packageName":"nan","version":"~1.0.0"}]},{"versionNumber":"0.1.9","timestamp":"2014-09-21T14:55:54.403Z","trustScore":8,"dependencies":[{"packageName":"bindings","version":"*"},{"packageName":"nan","version":"~1.3.0"}]},{"versionNumber":"0.1.10","timestamp":"2014-12-19T16:56:14.391Z","trustScore":7,"dependencies":[{"packageName":"bindings","version":"*"},{"packageName":"nan","version":"~1.3.0"}]},{"versionNumber":"0.1.11","timestamp":"2014-12-22T00:09:02.025Z","trustScore":8,"dependencies":[{"packageName":"bindings","version":"*"},{"packageName":"nan","version":"~1.3.0"}]},{"versionNumber":"0.1.12","timestamp":"2015-01-27T03:38:15.104Z","trustScore":8,"dependencies":[{"packageName":"bindings","version":"*"},{"packageName":"nan","version":"~1.3.0"}]},{"versionNumber":"0.1.13","timestamp":"2015-02-09T22:43:23.117Z","trustScore":9,"dependencies":[{"packageName":"bindings","version":"*"},{"packageName":"nan","version":"~1.5.0"}]},{"versionNumber":"0.1.14","timestamp":"2015-05-09T12:40:26.173Z","trustScore":9,"dependencies":[{"packageName":"bindings","version":"*"},{"packageName":"nan","version":"~1.8.4"}]},{"versionNumber":"0.1.15","timestamp":"2015-11-12T16:00:27.033Z","trustScore":8,"dependencies":[{"packageName":"bindings","version":"^1.2.1"},{"packageName":"nan","version":"^2.1.0"}]},{"versionNumber":"1.0.0","timestamp":"2018-03-09T17:06:51.739Z","trustScore":18,"dependencies":[{"packageName":"bindings","version":"^1.2.1"},{"packageName":"nan","version":"^2.9.2"}]}]}},"__N_SSG":true}