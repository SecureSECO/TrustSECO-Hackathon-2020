{"pageProps":{"postData":{"_id":"5fb668999f9e7f16fd324a11","id":"content-type-parser","crawlTimestamp":"19/11/2020 12:44:08","packageName":"content-type-parser","description":"Parse the value of the Content-Type header","repository":{"type":"git","url":"git+https://github.com/jsdom/content-type-parser.git"},"readme":"# Parse `Content-Type` Header Strings\n\nThis package will parse the [`Content-Type`](https://tools.ietf.org/html/rfc7231#section-3.1.1.1) header field into an introspectable data structure, whose parameters can be manipulated:\n\n```js\nconst contentTypeParser = require(\"content-type-parser\");\n\nconst contentType = contentTypeParser(`Text/HTML;Charset=\"utf-8\"`);\n\nconsole.assert(contentType.toString() === \"text/html;charset=utf-8\");\n\nconsole.assert(contentType.type === \"text\");\nconsole.assert(contentType.subtype === \"html\");\nconsole.assert(contentType.get(\"charset\") === \"utf-8\");\n\ncontentType.set(\"charset\", \"windows-1252\");\nconsole.assert(contentType.get(\"charset\") === \"windows-1252\");\nconsole.assert(contentType.toString() === \"text/html;charset=windows-1252\");\n\nconsole.assert(contentType.isHTML() === true);\nconsole.assert(contentType.isXML() === false);\nconsole.assert(contentType.isText() === true);\n```\n\nNote how parsing will lowercase the type, subtype, and parameter name tokens (but not parameter values).\n\nIf the passed string cannot be parsed as a content-type, `contentTypeParser` will return `null`.\n\n## `ContentType` instance API\n\nThis package's main module's default export will return an instance of the `ContentType` class, which has the following public APIs:\n\n### Properties\n\n- `type`: the top-level media type, e.g. `\"text\"`\n- `subtype`: the subtype, e.g. `\"html\"`\n- `parameterList`: an array of `{ separator, key, value }` pairs representing the parameters. The `separator` field contains any whitespace, not just the `;` character.\n\n### Parameter manipulation\n\nIn general you should not directly manipulate `parameterList`. Instead, use the following APIs:\n\n- `get(\"key\")`: returns the value of the parameter with the given key, or `undefined` if no such parameter is present\n- `set(\"key\", \"value\")`: adds the given key/value pair to the parameter list, or overwrites the existing value if an entry already existed\n\nBoth of these will lowercase the keys.\n\n### MIME type tests\n\n- `isHTML()`: returns true if this instance's MIME type is [the HTML MIME type](https://html.spec.whatwg.org/multipage/infrastructure.html#html-mime-type), `\"text/html\"`\n- `isXML()`: returns true if this instance's MIME type is [an XML MIME type](https://html.spec.whatwg.org/multipage/infrastructure.html#xml-mime-type)\n- `isText()`: returns true if this instance's top-level media type is `\"text\"`\n\n### Serialization\n\n- `toString()` will return a canonicalized representation of the content-type, re-built from the parsed components\n\n## Credits\n\nThis package was originally based on the excellent work of [@nicolashenry](https://github.com/nicolashenry), [in jsdom](https://github.com/tmpvar/jsdom/blob/16fd85618f2705d181232f6552125872a37164bc/lib/jsdom/living/helpers/headers.js). It has since been pulled out into this separate package.\n","homepage":"https://github.com/jsdom/content-type-parser#readme","trustScore":21,"sourceRank":{"basic_info_present":1,"repository_present":1,"readme_present":1,"license_present":1,"versions_present":1,"follows_semver":1,"recent_release":0,"not_brand_new":1,"one_point_oh":1,"dependent_projects":4,"dependent_repositories":5,"stars":2,"contributors":1,"subscribers":1,"all_prereleases":0,"any_outdated_dependencies":0,"is_deprecated":0,"is_unmaintained":0,"is_removed":0,"trustScore":21},"versions":[{"versionNumber":"1.0.0","timestamp":"2016-10-15T21:28:32.588Z","trustScore":9,"dependencies":[]},{"versionNumber":"1.0.1","timestamp":"2016-10-15T22:18:21.484Z","trustScore":10,"dependencies":[]},{"versionNumber":"1.0.2","timestamp":"2017-10-23T00:04:15.009Z","trustScore":21,"dependencies":[]}]}},"__N_SSG":true}