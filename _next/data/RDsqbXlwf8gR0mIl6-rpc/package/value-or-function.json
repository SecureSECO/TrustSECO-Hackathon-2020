{"pageProps":{"postData":{"_id":"5fb66b8b9f9e7f16fd324c61","id":"value-or-function","crawlTimestamp":"19/11/2020 12:56:42","packageName":"value-or-function","description":"Normalize a value or function, applying extra args to the function","repository":{"type":"git","url":"git+https://github.com/gulpjs/value-or-function.git"},"readme":"<p align=\"center\">\n  <a href=\"http://gulpjs.com\">\n    <img height=\"257\" width=\"114\" src=\"https://raw.githubusercontent.com/gulpjs/artwork/master/gulp-2x.png\">\n  </a>\n</p>\n\n# value-or-function\n\n[![NPM version][npm-image]][npm-url] [![Downloads][downloads-image]][npm-url] [![Build Status][travis-image]][travis-url] [![AppVeyor Build Status][appveyor-image]][appveyor-url] [![Coveralls Status][coveralls-image]][coveralls-url] [![Gitter chat][gitter-image]][gitter-url]\n\nNormalize a value or function, applying extra args to the function\n\n## Example\n\n```js\nvar normalize = require('value-or-function');\n\n// Values matching type are returned\nvar isEnabled = normalize('boolean', true);\n// isEnabled === true\n\n// Values not matching type return undefined\nvar isEnabled = normalize('boolean', 1);\n// isEnabled === undefined\n\n// Functions are called\nvar isEnabled = normalize('boolean', function() {\n  return false;\n});\n// isEnabled === false\n\n// Extra arguments are applied to function\nvar count = normalize('number', function(a, b) {\n  return a + b;\n}, 1, 2);\n// count === 3\n\n// Supply the function with context\nvar context = { c: 3 };\nvar count = normalize.call(context, 'number', function(a, b) {\n  return a + b + this.c;\n}, 1, 2);\n// count === 6\n\n// Values one of multiple types are returned\nvar isEnabled = normalize(['string', 'boolean'], true);\n// isEnabled === true\n\n// Provide a function as first argument to do custom coercion\nvar now = new Date();\nvar enabledSince = normalize(function(value) {\n  if (value.constructor === Date) {\n    return value;\n  }\n}, now);\n// enabledSince === now\n\n// Convenience methods are available for the built-in types\nvar result = normalize.object({});\nvar result = normalize.number(1);\nvar result = normalize.string('');\nvar result = normalize.symbol(Symbol());\nvar result = normalize.boolean(true);\nvar result = normalize.function(function() {});\nvar result = normalize.date(new Date());\n```\n\n## API\n\n### `normalize(coercer, value[, ...appliedArguments])`\n\nTakes a coercer function `coercer` to transform `value` to the desired type.\nAlso optionally takes any extra arguments to apply to `value` if `value` is a function.\n\nIf the return value of `coercer(value)` is not `null` or `undefined`, that value is returned.\nOtherwise, if `value` is a function, that function is called with any extra arguments\nsupplied to `normalize`, and its return value is passed through the coercer.\n\nIf `coercer` is a string, it must be one of the built-in types (see below)\nand the appropriate default coercer is invoked, optionally first reducing `value`\nto a primitive type with `.valueOf()` if it is an Object.\n\nIf `coercer` is an array, each element is tried until one returns something other\nthan `null` or `undefined`, or it results in `undefined` if all of the elements yield `null` or `undefined`.\n\n#### `normalize.object(value[, ...appliedArguments])`\n\nConvenience method for `normalize('object', ...)`.\n\n#### `normalize.number(value[, ...appliedArguments])`\n\nConvenience method for `normalize('number', ...)`.\n\n#### `normalize.string(value[, ...appliedArguments])`\n\nConvenience method for `normalize('string', ...)`.\n\n#### `normalize.symbol(value[, ...appliedArguments])`\n\nConvenience method for `normalize('symbol', ...)`.\n\n#### `normalize.boolean(value[, ...appliedArguments])`\n\nConvenience method for `normalize('boolean', ...)`.\n\n#### `normalize.function(value[, ...appliedArguments])`\n\nConvenience method for `normalize('function', ...)`.\n\n#### `normalize.date(value[, ...appliedArguments])`\n\nConvenience method for `normalize('date', ...)`.\n\n## License\n\nMIT\n\n[downloads-image]: http://img.shields.io/npm/dm/value-or-function.svg\n[npm-url]: https://npmjs.org/package/value-or-function\n[npm-image]: http://img.shields.io/npm/v/value-or-function.svg\n\n[travis-url]: https://travis-ci.org/gulpjs/value-or-function\n[travis-image]: http://img.shields.io/travis/gulpjs/value-or-function.svg?label=travis-ci\n\n[appveyor-url]: https://ci.appveyor.com/project/gulpjs/value-or-function\n[appveyor-image]: https://img.shields.io/appveyor/ci/gulpjs/value-or-function.svg?label=appveyor\n\n[coveralls-url]: https://coveralls.io/r/gulpjs/value-or-function\n[coveralls-image]: http://img.shields.io/coveralls/gulpjs/value-or-function/master.svg\n\n[gitter-url]: https://gitter.im/gulpjs/gulp\n[gitter-image]: https://badges.gitter.im/gulpjs/gulp.png\n","homepage":"https://github.com/gulpjs/value-or-function#readme","trustScore":17,"sourceRank":{"basic_info_present":1,"repository_present":1,"readme_present":1,"license_present":1,"versions_present":1,"follows_semver":1,"recent_release":0,"not_brand_new":1,"one_point_oh":1,"dependent_projects":2,"dependent_repositories":4,"stars":1,"contributors":1,"subscribers":1,"all_prereleases":0,"any_outdated_dependencies":0,"is_deprecated":0,"is_unmaintained":0,"is_removed":0,"trustScore":17},"versions":[{"versionNumber":"1.0.0","timestamp":"2016-04-01T22:53:01.754Z","trustScore":8,"dependencies":[]},{"versionNumber":"1.1.0","timestamp":"2016-06-07T22:30:23.349Z","trustScore":8,"dependencies":[]},{"versionNumber":"1.2.0","timestamp":"2016-06-19T17:51:33.513Z","trustScore":7,"dependencies":[]},{"versionNumber":"1.2.1","timestamp":"2016-07-15T23:31:31.453Z","trustScore":8,"dependencies":[]},{"versionNumber":"2.0.0","timestamp":"2016-08-17T23:07:05.322Z","trustScore":8,"dependencies":[]},{"versionNumber":"3.0.0","timestamp":"2017-07-21T20:47:58.213Z","trustScore":17,"dependencies":[]}]}},"__N_SSG":true}