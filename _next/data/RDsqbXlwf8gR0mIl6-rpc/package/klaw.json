{"pageProps":{"postData":{"_id":"5fb663969f9e7f16fd324610","id":"klaw","crawlTimestamp":"19/11/2020 12:22:45","packageName":"klaw","description":"File system walker with Readable stream interface.","repository":{"type":"git","url":"git+https://github.com/jprichardson/node-klaw.git"},"readme":"Node.js - klaw\n==============\n\n<a href=\"https://standardjs.com\" style=\"float: right; padding: 0 0 20px 20px;\"><img src=\"https://cdn.rawgit.com/feross/standard/master/sticker.svg\" alt=\"JavaScript Standard Style\" width=\"100\" align=\"right\"></a>\n\nA Node.js file system walker extracted from [fs-extra](https://github.com/jprichardson/node-fs-extra).\n\n[![npm Package](https://img.shields.io/npm/v/klaw.svg?style=flat-square)](https://www.npmjs.org/package/klaw)\n[![build status](https://api.travis-ci.org/jprichardson/node-klaw.svg)](http://travis-ci.org/jprichardson/node-klaw)\n[![windows build status](https://ci.appveyor.com/api/projects/status/github/jprichardson/node-klaw?branch=master&svg=true)](https://ci.appveyor.com/project/jprichardson/node-klaw/branch/master)\n\nInstall\n-------\n\n    npm i --save klaw\n\nIf you're using Typescript, we've got [types](https://github.com/DefinitelyTyped/DefinitelyTyped/pull/11492/files):\n\n    npm i --save-dev @types/klaw\n\n\nName\n----\n\n`klaw` is `walk` backwards :p\n\n\nSync\n----\n\nIf you need the same functionality but synchronous, you can use [klaw-sync](https://github.com/manidlou/node-klaw-sync).\n\n\nUsage\n-----\n\n### klaw(directory, [options])\n\nReturns a [Readable stream](https://nodejs.org/api/stream.html#stream_class_stream_readable) that iterates\nthrough every file and directory starting with `dir` as the root. Every `read()` or `data` event\nreturns an object with two properties: `path` and `stats`. `path` is the full path of the file and\n`stats` is an instance of [fs.Stats](https://nodejs.org/api/fs.html#fs_class_fs_stats).\n\n- `directory`: The directory to recursively walk. Type `string`.\n- `options`: [Readable stream options](https://nodejs.org/api/stream.html#stream_new_stream_readable_options) and\nthe following:\n  - `queueMethod` (`string`, default: `'shift'`): Either `'shift'` or `'pop'`. On `readdir()` array, call either `shift()` or `pop()`.\n  - `pathSorter` (`function`, default: `undefined`): Sorting [function for Arrays](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).\n  - `fs` (`object`, default: [`graceful-fs`](https://github.com/isaacs/node-graceful-fs)): Use this to hook into the `fs` methods or to use [`mock-fs`](https://github.com/tschaub/mock-fs)\n  - `filter` (`function`, default: `undefined`): Filtering [function for Arrays](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\n  - `depthLimit` (`number`, default: `undefined`): The number of times to recurse before stopping. -1 for unlimited.\n  - `preserveSymlinks` (`boolean`, default: `false`): Whether symlinks should be followed or treated as items themselves. If true, symlinks will be returned as items in their own right. If false, the linked item will be returned and potentially recursed into, in its stead.\n\n**Streams 1 (push) example:**\n\n```js\nconst klaw = require('klaw')\n\nconst items = [] // files, directories, symlinks, etc\nklaw('/some/dir')\n  .on('data', item => items.push(item.path))\n  .on('end', () => console.dir(items)) // => [ ... array of files]\n```\n\n**Streams 2 & 3 (pull) example:**\n\n```js\nconst klaw = require('klaw')\n\nconst items = [] // files, directories, symlinks, etc\nklaw('/some/dir')\n  .on('readable', function () {\n    let item\n    while ((item = this.read())) {\n      items.push(item.path)\n    }\n  })\n  .on('end', () => console.dir(items)) // => [ ... array of files]\n```\n\n### Error Handling\n\nListen for the `error` event.\n\nExample:\n\n```js\nconst klaw = require('klaw')\n\nklaw('/some/dir')\n  .on('readable', function () {\n    let item\n    while ((item = this.read())) {\n      // do something with the file\n    }\n  })\n  .on('error', (err, item) => {\n    console.log(err.message)\n    console.log(item.path) // the file the error occurred on\n  })\n  .on('end', () => console.dir(items)) // => [ ... array of files]\n```\n\n\n### Aggregation / Filtering / Executing Actions (Through Streams)\n\nOn many occasions you may want to filter files based upon size, extension, etc.\nOr you may want to aggregate stats on certain file types. Or maybe you want to\nperform an action on certain file types.\n\nYou should use the module [`through2`](https://www.npmjs.com/package/through2) to easily\naccomplish this.\n\nInstall `through2`:\n\n    npm i --save through2\n\n\n**Example (skipping directories):**\n\n```js\nconst klaw = require('klaw')\nconst through2 = require('through2')\n\nconst excludeDirFilter = through2.obj(function (item, enc, next) {\n  if (!item.stats.isDirectory()) this.push(item)\n  next()\n})\n\nconst items = [] // files, directories, symlinks, etc\nklaw('/some/dir')\n  .pipe(excludeDirFilter)\n  .on('data', item => items.push(item.path))\n  .on('end', () => console.dir(items)) // => [ ... array of files without directories]\n```\n\n**Example (ignore hidden directories):**\n\n```js\nconst klaw = require('klaw')\nconst path = require('path')\n\nconst filterFunc = item => {\n  const basename = path.basename(item)\n  return basename === '.' || basename[0] !== '.'\n}\n\nklaw('/some/dir', { filter: filterFunc })\n  .on('data', item => {\n    // only items of none hidden folders will reach here\n  })\n```\n\n**Example (totaling size of PNG files):**\n\n```js\nconst klaw = require('klaw')\nconst path = require('path')\nconst through2 = require('through2')\n\nlet totalPngsInBytes = 0\nconst aggregatePngSize = through2.obj(function (item, enc, next) {\n  if (path.extname(item.path) === '.png') {\n    totalPngsInBytes += item.stats.size\n  }\n  this.push(item)\n  next()\n})\n\nklaw('/some/dir')\n  .pipe(aggregatePngSize)\n  .on('data', item => items.push(item.path))\n  .on('end', () => console.dir(totalPngsInBytes)) // => total of all pngs (bytes)\n```\n\n\n**Example (deleting all .tmp files):**\n\n```js\nconst fs = require('fs')\nconst klaw = require('klaw')\nconst through2 = require('through2')\n\nconst deleteAction = through2.obj(function (item, enc, next) {\n  this.push(item)\n\n  if (path.extname(item.path) === '.tmp') {\n    item.deleted = true\n    fs.unlink(item.path, next)\n  } else {\n    item.deleted = false\n    next()\n  }\n})\n\nconst deletedFiles = []\nklaw('/some/dir')\n  .pipe(deleteAction)\n  .on('data', item => {\n    if (!item.deleted) return\n    deletedFiles.push(item.path)\n  })\n  .on('end', () => console.dir(deletedFiles)) // => all deleted files\n```\n\nYou can even chain a bunch of these filters and aggregators together. By using\nmultiple pipes.\n\n**Example (using multiple filters / aggregators):**\n\n```js\nklaw('/some/dir')\n  .pipe(filterCertainFiles)\n  .pipe(deleteSomeOtherFiles)\n  .on('end', () => console.log('all done!'))\n```\n\n**Example passing (piping) through errors:**\n\nNode.js does not `pipe()` errors. This means that the error on one stream, like\n`klaw` will not pipe through to the next. If you want to do this, do the following:\n\n```js\nconst klaw = require('klaw')\nconst through2 = require('through2')\n\nconst excludeDirFilter = through2.obj(function (item, enc, next) {\n  if (!item.stats.isDirectory()) this.push(item)\n  next()\n})\n\nconst items = [] // files, directories, symlinks, etc\nklaw('/some/dir')\n  .on('error', err => excludeDirFilter.emit('error', err)) // forward the error on\n  .pipe(excludeDirFilter)\n  .on('data', item => items.push(item.path))\n  .on('end', () => console.dir(items)) // => [ ... array of files without directories]\n```\n\n\n### Searching Strategy\n\nPass in options for `queueMethod`, `pathSorter`, and `depthLimit` to affect how the file system\nis recursively iterated. See the code for more details, it's less than 50 lines :)\n\n\n\nLicense\n-------\n\nMIT\n\nCopyright (c) 2015 [JP Richardson](https://github.com/jprichardson)\n","homepage":"https://github.com/jprichardson/node-klaw#readme","trustScore":23,"sourceRank":{"basic_info_present":1,"repository_present":1,"readme_present":1,"license_present":1,"versions_present":1,"follows_semver":1,"recent_release":0,"not_brand_new":1,"one_point_oh":1,"dependent_projects":6,"dependent_repositories":5,"stars":2,"contributors":1,"subscribers":1,"all_prereleases":0,"any_outdated_dependencies":0,"is_deprecated":0,"is_unmaintained":0,"is_removed":0,"trustScore":23},"versions":[{"versionNumber":"0.1.0","timestamp":"2015-10-25T14:25:32.957Z","trustScore":10,"dependencies":[]},{"versionNumber":"1.0.0","timestamp":"2015-10-25T15:22:16.827Z","trustScore":10,"dependencies":[]},{"versionNumber":"1.1.0","timestamp":"2015-10-25T19:09:38.222Z","trustScore":10,"dependencies":[]},{"versionNumber":"1.1.1","timestamp":"2015-10-25T19:37:47.336Z","trustScore":11,"dependencies":[]},{"versionNumber":"1.1.2","timestamp":"2015-11-12T15:32:44.149Z","trustScore":9,"dependencies":[]},{"versionNumber":"1.1.3","timestamp":"2015-12-23T22:58:50.062Z","trustScore":9,"dependencies":[]},{"versionNumber":"1.2.0","timestamp":"2016-04-16T12:54:12.167Z","trustScore":11,"dependencies":[]},{"versionNumber":"1.3.0","timestamp":"2016-06-09T11:24:45.183Z","trustScore":11,"dependencies":[]},{"versionNumber":"1.3.1","timestamp":"2016-10-25T16:07:11.536Z","trustScore":10,"dependencies":[{"packageName":"graceful-fs","version":"^4.1.9"}]},{"versionNumber":"2.0.0","timestamp":"2017-06-23T19:58:34.569Z","trustScore":11,"dependencies":[{"packageName":"graceful-fs","version":"^4.1.9"}]},{"versionNumber":"2.1.0","timestamp":"2017-08-10T14:34:25.258Z","trustScore":11,"dependencies":[{"packageName":"graceful-fs","version":"^4.1.9"}]},{"versionNumber":"2.1.1","timestamp":"2017-11-18T20:08:38.029Z","trustScore":12,"dependencies":[{"packageName":"graceful-fs","version":"^4.1.9"}]},{"versionNumber":"3.0.0","timestamp":"2018-08-01T15:07:57.955Z","trustScore":23,"dependencies":[{"packageName":"graceful-fs","version":"^4.1.9"}]}]}},"__N_SSG":true}