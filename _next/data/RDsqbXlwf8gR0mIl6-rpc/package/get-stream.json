{"pageProps":{"postData":{"_id":"5fb665719f9e7f16fd32478c","id":"get-stream","crawlTimestamp":"19/11/2020 12:30:40","packageName":"get-stream","description":"Get a stream as a string, buffer, or array","repository":{"type":"git","url":"git+https://github.com/sindresorhus/get-stream.git"},"readme":"# get-stream [![Build Status](https://travis-ci.com/sindresorhus/get-stream.svg?branch=master)](https://travis-ci.com/github/sindresorhus/get-stream)\n\n> Get a stream as a string, buffer, or array\n\n## Install\n\n```\n$ npm install get-stream\n```\n\n## Usage\n\n```js\nconst fs = require('fs');\nconst getStream = require('get-stream');\n\n(async () => {\n\tconst stream = fs.createReadStream('unicorn.txt');\n\n\tconsole.log(await getStream(stream));\n\t/*\n\t              ,,))))))));,\n\t           __)))))))))))))),\n\t\\|/       -\\(((((''''((((((((.\n\t-*-==//////((''  .     `)))))),\n\t/|\\      ))| o    ;-.    '(((((                                  ,(,\n\t         ( `|    /  )    ;))))'                               ,_))^;(~\n\t            |   |   |   ,))((((_     _____------~~~-.        %,;(;(>';'~\n\t            o_);   ;    )))(((` ~---~  `::           \\      %%~~)(v;(`('~\n\t                  ;    ''''````         `:       `:::|\\,__,%%    );`'; ~\n\t                 |   _                )     /      `:|`----'     `-'\n\t           ______/\\/~    |                 /        /\n\t         /~;;.____/;;'  /          ___--,-(   `;;;/\n\t        / //  _;______;'------~~~~~    /;;/\\    /\n\t       //  | |                        / ;   \\;;,\\\n\t      (<_  | ;                      /',/-----'  _>\n\t       \\_| ||_                     //~;~~~~~~~~~\n\t           `\\_|                   (,~~\n\t                                   \\~\\\n\t                                    ~~\n\t*/\n})();\n```\n\n## API\n\nThe methods returns a promise that resolves when the `end` event fires on the stream, indicating that there is no more data to be read. The stream is switched to flowing mode.\n\n### getStream(stream, options?)\n\nGet the `stream` as a string.\n\n#### options\n\nType: `object`\n\n##### encoding\n\nType: `string`\\\nDefault: `'utf8'`\n\n[Encoding](https://nodejs.org/api/buffer.html#buffer_buffer) of the incoming stream.\n\n##### maxBuffer\n\nType: `number`\\\nDefault: `Infinity`\n\nMaximum length of the returned string. If it exceeds this value before the stream ends, the promise will be rejected with a `getStream.MaxBufferError` error.\n\n### getStream.buffer(stream, options?)\n\nGet the `stream` as a buffer.\n\nIt honors the `maxBuffer` option as above, but it refers to byte length rather than string length.\n\n### getStream.array(stream, options?)\n\nGet the `stream` as an array of values.\n\nIt honors both the `maxBuffer` and `encoding` options. The behavior changes slightly based on the encoding chosen:\n\n- When `encoding` is unset, it assumes an [object mode stream](https://nodesource.com/blog/understanding-object-streams/) and collects values emitted from `stream` unmodified. In this case `maxBuffer` refers to the number of items in the array (not the sum of their sizes).\n\n- When `encoding` is set to `buffer`, it collects an array of buffers. `maxBuffer` refers to the summed byte lengths of every buffer in the array.\n\n- When `encoding` is set to anything else, it collects an array of strings. `maxBuffer` refers to the summed character lengths of every string in the array.\n\n## Errors\n\nIf the input stream emits an `error` event, the promise will be rejected with the error. The buffered data will be attached to the `bufferedData` property of the error.\n\n```js\n(async () => {\n\ttry {\n\t\tawait getStream(streamThatErrorsAtTheEnd('unicorn'));\n\t} catch (error) {\n\t\tconsole.log(error.bufferedData);\n\t\t//=> 'unicorn'\n\t}\n})()\n```\n\n## FAQ\n\n### How is this different from [`concat-stream`](https://github.com/maxogden/concat-stream)?\n\nThis module accepts a stream instead of being one and returns a promise instead of using a callback. The API is simpler and it only supports returning a string, buffer, or array. It doesn't have a fragile type inference. You explicitly choose what you want. And it doesn't depend on the huge `readable-stream` package.\n\n## Related\n\n- [get-stdin](https://github.com/sindresorhus/get-stdin) - Get stdin as a string or buffer\n\n---\n\n<div align=\"center\">\n\t<b>\n\t\t<a href=\"https://tidelift.com/subscription/pkg/npm-get-stream?utm_source=npm-get-stream&utm_medium=referral&utm_campaign=readme\">Get professional support for this package with a Tidelift subscription</a>\n\t</b>\n\t<br>\n\t<sub>\n\t\tTidelift helps make open source sustainable for maintainers while giving companies<br>assurances about security, maintenance, and licensing for their dependencies.\n\t</sub>\n</div>\n","homepage":"https://github.com/sindresorhus/get-stream#readme","trustScore":26,"sourceRank":{"basic_info_present":1,"repository_present":1,"readme_present":1,"license_present":1,"versions_present":1,"follows_semver":1,"recent_release":1,"not_brand_new":1,"one_point_oh":1,"dependent_projects":6,"dependent_repositories":6,"stars":2,"contributors":1,"subscribers":2,"all_prereleases":0,"any_outdated_dependencies":0,"is_deprecated":0,"is_unmaintained":0,"is_removed":0,"trustScore":26},"versions":[{"versionNumber":"1.0.0","timestamp":"2015-10-14T17:28:21.024Z","trustScore":12,"dependencies":[]},{"versionNumber":"1.1.0","timestamp":"2015-11-20T18:41:32.705Z","trustScore":11,"dependencies":[]},{"versionNumber":"2.0.0","timestamp":"2016-03-03T05:25:15.334Z","trustScore":13,"dependencies":[{"packageName":"pinkie-promise","version":"^2.0.0"}]},{"versionNumber":"2.1.0","timestamp":"2016-04-28T15:33:42.239Z","trustScore":11,"dependencies":[{"packageName":"pinkie-promise","version":"^2.0.0"}]},{"versionNumber":"2.2.0","timestamp":"2016-04-30T20:50:42.753Z","trustScore":12,"dependencies":[{"packageName":"object-assign","version":"^4.0.1"},{"packageName":"pinkie-promise","version":"^2.0.0"}]},{"versionNumber":"2.2.1","timestamp":"2016-06-06T17:54:54.123Z","trustScore":12,"dependencies":[{"packageName":"object-assign","version":"^4.0.1"},{"packageName":"pinkie-promise","version":"^2.0.0"}]},{"versionNumber":"2.3.0","timestamp":"2016-06-07T01:31:47.069Z","trustScore":14,"dependencies":[{"packageName":"object-assign","version":"^4.0.1"},{"packageName":"pinkie-promise","version":"^2.0.0"}]},{"versionNumber":"2.3.1","timestamp":"2016-09-14T17:13:47.014Z","trustScore":12,"dependencies":[{"packageName":"object-assign","version":"^4.0.1"},{"packageName":"pinkie-promise","version":"^2.0.0"}]},{"versionNumber":"3.0.0","timestamp":"2016-11-23T02:49:47.220Z","trustScore":14,"dependencies":[]},{"versionNumber":"4.0.0","timestamp":"2018-08-10T07:59:07.810Z","trustScore":11,"dependencies":[{"packageName":"pump","version":"^3.0.0"}]},{"versionNumber":"4.1.0","timestamp":"2018-10-02T09:11:43.738Z","trustScore":11,"dependencies":[{"packageName":"pump","version":"^3.0.0"}]},{"versionNumber":"5.0.0","timestamp":"2019-03-11T05:00:57.346Z","trustScore":13,"dependencies":[{"packageName":"pump","version":"^3.0.0"}]},{"versionNumber":"5.1.0","timestamp":"2019-04-05T06:56:47.933Z","trustScore":12,"dependencies":[{"packageName":"pump","version":"^3.0.0"}]},{"versionNumber":"5.2.0","timestamp":"2020-08-09T21:06:37.591Z","trustScore":22,"dependencies":[{"packageName":"pump","version":"^3.0.0"}]},{"versionNumber":"6.0.0","timestamp":"2020-08-10T11:16:16.361Z","trustScore":26,"dependencies":[]}]}},"__N_SSG":true}