{"pageProps":{"postData":{"_id":"5fb067f4a28b82fef5a67a97","id":"errorifier","crawlTimestamp":"14/11/2020 23:27:46","packageName":"errorifier","description":"Creates Error uniformly.","repository":{"type":"git","url":"https://github.com/Kikobeats/errorifier"},"readme":"# Errorifier\n\n![Last version](https://img.shields.io/github/tag/Kikobeats/errorifier.svg?style=flat-square)\n[![Dependency status](http://img.shields.io/david/Kikobeats/errorifier.svg?style=flat-square)](https://david-dm.org/Kikobeats/errorifier)\n[![Dev Dependencies Status](http://img.shields.io/david/dev/Kikobeats/errorifier.svg?style=flat-square)](https://david-dm.org/Kikobeats/errorifier#info=devDependencies)\n[![NPM Status](http://img.shields.io/npm/dm/errorifier.svg?style=flat-square)](https://www.npmjs.org/package/errorifier)\n[![Donate](https://img.shields.io/badge/donate-paypal-blue.svg?style=flat-square)](https://paypal.me/kikobeats)\n\n> Adopting an uniform errors policy based in NodeJS errors schema.\n\n## Why\n\n- An easy way to create qualified errors.\n- Using the standard Error interface in browser and NodeJS.\n- Attach extra information, depending of your case of use.\n\nThe native `Error` global object in JavaScript is broken. It is different depending of your browser of your environment.\n\nI feel that [standard NodeJS Errors](https://github.com/rvagg/node-errno) are more powerful: this follow the same format. For example, if you try to read a file that doesn't exist you have the follow error:\n\n```js\nfs.readFile('filename', function(err, data) {\n  console.log(err);\n  // { [Error: ENOENT, open 'filename']\n  //   errno: 34,\n  //   code: 'ENOENT',\n  //   path: 'filename' }\n});\n\n```\n\nThe `error` have a `code` that is useful because it's part of the output message. If you try to print the error:\n\n```\nconsole.log(err.message);\n// => ENOENT, open 'filename'\n```\n\nThis library pretend extend NodeJS standard error for whatever error that you need to create.\n\n## Install\n\n```bash\nnpm install errorifier --save\n```\n\nIf you want to use in the browser (powered by [Browserify](http://browserify.org/)):\n\n```bash\nbower install errorifier --save\n```\n\nand later link in your HTML:\n\n```html\n<script src=\"bower_components/errorifier/dist/errorifier.js\"></script>\n```\n\n## Usage\n\nLoad the constructor as a common NodeJS dependency:\n\n```js\nvar Errorifier = require('errorifier');\n```\n\nNow, the next time that you need an error you have two ways to create.\n\nIf you don't need to specify to many things associated with the error, you can create it inline mode. Just provide the error type and the description as string:\n\n```js\nthrow new Errorifier('NotValidJSON, The format of the JSON is invalid');\n```\n\nThis will print the error and the stack trace:\n\n```bash\nError: NotValidJSON, The format of the JSON is invalid\n  at new Errorifier (/Users/josefranciscoverdugambin/Projects/errorifier/lib/Errorifier.coffee:6:17)\n  at Object.<anonymous> (/Users/josefranciscoverdugambin/Projects/errorifier/example.js:3:7)\n  at Module._compile (module.js:456:26)\n  at Object.Module._extensions..js (module.js:474:10)\n  at Module.load (module.js:356:32)\n  at Function.Module._load (module.js:312:12)\n  at Function.Module.runMain (module.js:497:10)\n  at startup (node.js:119:16)\n  at node.js:935:3\n```\n\nIf you need to associate whatever thing with the error, you can use the Object param format:\n\n```js\nthrow new Errorifier({\n  code: 'NotValidJSON',\n  message: 'The format of the JSON is invalid',\n  errno: 127,\n  foo: 'bar'\n});\n```\n\nThis prints the same as the inline mode, but you can store whatever thing (as `errno` or `foo` in this case) with the error.\n\n## Always return an Error object\n\nIf you code implementation is **synchronous**, return `Error` object under unexpected behaviors.\n\nIf you code implementation is **asynchronous**, return `Error` object under unexpected behaviors as well!\n\nIt's correct returns a object in a callback to express a unexpected behavior, but the object doesn't have a type and definetly doesn't follow a error interface:\n\n```js\ncallback('LOL something was wrong'); // poor\ncallback({message: 'LOL something was wrong' } // poor, but better\ncallback(new Errorifier('LOL, something was wrong') // BEST!\n```\n\nNow you can associated different type of error with different behavior.\n\n```js\nswitch (err.code) {\n  case 'LOL':\n    console.log('your error logic here');\n    break;\n  default:\n    console.log('undefined code');\n    break;\n};\n```\n\n## License\n\nMIT Â© [Kiko Beats](http://www.kikobeats.com)\n","homepage":"https://github.com/Kikobeats/errorifier","trustScore":8,"sourceRank":{"basic_info_present":1,"repository_present":1,"readme_present":1,"license_present":1,"versions_present":1,"follows_semver":1,"recent_release":0,"not_brand_new":1,"one_point_oh":0,"dependent_projects":0,"dependent_repositories":0,"stars":1,"contributors":1,"subscribers":0,"all_prereleases":0,"any_outdated_dependencies":-1,"is_deprecated":0,"is_unmaintained":0,"is_removed":0,"trustScore":8},"versions":[{"versionNumber":"0.1.0","timestamp":"2015-07-26T11:30:37.005Z","trustScore":8,"dependencies":[]},{"versionNumber":"0.1.2","timestamp":"2015-07-28T18:19:43.698Z","trustScore":8,"dependencies":[{"packageName":"coffee-script","version":"~1.9.3"}]},{"versionNumber":"0.1.3","timestamp":"2015-07-28T18:47:03.944Z","trustScore":7,"dependencies":[{"packageName":"coffee-script","version":"~1.9.3"}]},{"versionNumber":"0.2.0","timestamp":"2015-10-01T23:33:46.791Z","trustScore":7,"dependencies":[{"packageName":"coffee-script","version":"~1.10.0"},{"packageName":"format","version":"~0.2.1"}]}]}},"__N_SSG":true}