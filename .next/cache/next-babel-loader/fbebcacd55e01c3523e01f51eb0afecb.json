{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/jozef/Documents/Projects/SiuNextJS/components/searchbar.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from \"react\";\nimport { useHistory } from 'react-router-dom';\nimport { InputGroup, Button } from \"react-bootstrap\";\nimport Autosuggest from \"react-autosuggest\";\nimport getPackagePaths from \"../lib/packageData\";\nimport AutosuggestHighlightMatch from 'autosuggest-highlight/match';\nimport AutosuggestHighlightParse from 'autosuggest-highlight/parse'; // Imagine you have a list of languages that you'd like to autosuggest.\n\nvar languages = [{\n  name: \"C\",\n  year: 1972\n}, {\n  name: \"Elm\",\n  year: 2012\n}]; // Teach Autosuggest how to calculate suggestions for any given input value.\n\nvar getSuggestions = function getSuggestions(value) {\n  var inputValue = value.trim().toLowerCase();\n  var inputLength = inputValue.length;\n  return inputLength === 0 ? [] : languages.filter(function (lang) {\n    return lang.name.toLowerCase().slice(0, inputLength) === inputValue;\n  });\n};\n\nfunction getSuggestionValue(suggestion) {\n  return \"\".concat(suggestion.name);\n}\n\nfunction renderSuggestion(suggestion, _ref) {\n  var _this = this;\n\n  var query = _ref.query;\n  var suggestionText = \"\".concat(suggestion.name);\n  console.log(suggestionText);\n  var matches = AutosuggestHighlightMatch(suggestionText, query);\n  var parts = AutosuggestHighlightParse(suggestionText, matches); // console.log(matches)\n  // console.log(parts)\n\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    className: 'suggestion-content ' + suggestion.twitter,\n    children: /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"name\",\n      children: parts.map(function (part, index) {\n        var className = part.highlight ? 'highlight' : null;\n        return /*#__PURE__*/_jsxDEV(\"span\", {\n          className: className,\n          children: part.text\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 17\n        }, _this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 7\n  }, this);\n}\n\nvar Searchbar = /*#__PURE__*/function (_React$Component) {\n  _inherits(Searchbar, _React$Component);\n\n  var _super = _createSuper(Searchbar);\n\n  function Searchbar() {\n    var _this2;\n\n    _classCallCheck(this, Searchbar);\n\n    _this2 = _super.call(this); // Autosuggest is a controlled component.\n    // This means that you need to provide an input value\n    // and an onChange handler that updates this value (see below).\n    // Suggestions also need to be provided to the Autosuggest,\n    // and they are initially empty because the Autosuggest is closed.\n\n    _defineProperty(_assertThisInitialized(_this2), \"handleSubmit\", function () {\n      if (_this2.state.value) {\n        window.location = \"/package/\".concat(_this2.state.value);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this2), \"onChange\", function (event, _ref2) {\n      var newValue = _ref2.newValue;\n\n      _this2.setState({\n        value: newValue\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this2), \"onSuggestionsFetchRequested\", function (_ref3) {\n      var value = _ref3.value;\n\n      _this2.setState({\n        suggestions: getSuggestions(value)\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this2), \"onSuggestionsClearRequested\", function () {\n      _this2.setState({\n        suggestions: []\n      });\n    });\n\n    _this2.state = {\n      value: \"\",\n      suggestions: []\n    };\n    return _this2;\n  }\n\n  _createClass(Searchbar, [{\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          value = _this$state.value,\n          suggestions = _this$state.suggestions; // Autosuggest will pass through all these props to the input.\n\n      var inputProps = {\n        placeholder: \"Package\",\n        value: value,\n        onChange: this.onChange\n      };\n      paths = getPackagePaths();\n      console.log(\"paths\", paths); // Finally, render it!\n\n      return /*#__PURE__*/_jsxDEV(InputGroup, {\n        className: \"mb-3\",\n        children: [/*#__PURE__*/_jsxDEV(Autosuggest, {\n          suggestions: suggestions,\n          onSuggestionsFetchRequested: this.onSuggestionsFetchRequested,\n          onSuggestionsClearRequested: this.onSuggestionsClearRequested,\n          getSuggestionValue: getSuggestionValue,\n          renderSuggestion: renderSuggestion,\n          inputProps: inputProps\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(InputGroup.Append, {\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"outline-secondary\",\n            onClick: this.handleSubmit,\n            children: \"Search\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 5\n      }, this);\n    }\n  }]);\n\n  return Searchbar;\n}(React.Component);\n\nexport { Searchbar as default };","map":{"version":3,"sources":["/Users/jozef/Documents/Projects/SiuNextJS/components/searchbar.js"],"names":["React","useHistory","InputGroup","Button","Autosuggest","getPackagePaths","AutosuggestHighlightMatch","AutosuggestHighlightParse","languages","name","year","getSuggestions","value","inputValue","trim","toLowerCase","inputLength","length","filter","lang","slice","getSuggestionValue","suggestion","renderSuggestion","query","suggestionText","console","log","matches","parts","twitter","map","part","index","className","highlight","text","Searchbar","state","window","location","event","newValue","setState","suggestions","inputProps","placeholder","onChange","paths","onSuggestionsFetchRequested","onSuggestionsClearRequested","handleSubmit","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { useHistory } from 'react-router-dom';\nimport {InputGroup, Button} from \"react-bootstrap\";\nimport Autosuggest from \"react-autosuggest\";\nimport getPackagePaths from \"../lib/packageData\"\nimport AutosuggestHighlightMatch from 'autosuggest-highlight/match'\nimport AutosuggestHighlightParse from 'autosuggest-highlight/parse'\n\n// Imagine you have a list of languages that you'd like to autosuggest.\nconst languages = [\n  {\n    name: \"C\",\n    year: 1972,\n  },\n  {\n    name: \"Elm\",\n    year: 2012,\n  },\n];\n\n// Teach Autosuggest how to calculate suggestions for any given input value.\nconst getSuggestions = (value) => {\n  const inputValue = value.trim().toLowerCase();\n  const inputLength = inputValue.length;\n\n  return inputLength === 0\n    ? []\n    : languages.filter(\n        (lang) => lang.name.toLowerCase().slice(0, inputLength) === inputValue\n      );\n};\n\nfunction getSuggestionValue(suggestion) {\n    \n    return `${suggestion.name}`;\n  }\n\nfunction renderSuggestion(suggestion, { query }) {\n    \n    const suggestionText = `${suggestion.name}`;\n    console.log(suggestionText)\n    const matches = AutosuggestHighlightMatch(suggestionText, query);\n    const parts = AutosuggestHighlightParse(suggestionText, matches);\n    // console.log(matches)\n    // console.log(parts)\n    return (\n      <span className={'suggestion-content ' + suggestion.twitter}>\n        <span className=\"name\">\n          {\n            parts.map((part, index) => {\n              const className = part.highlight ? 'highlight' : null;\n  \n              return (\n                <span className={className} key={index}>{part.text}</span>\n              );\n            })\n          }\n        </span>\n      </span>\n    );\n  }\n  \nexport default class Searchbar extends React.Component {\n  constructor() {\n    super();\n\n    // Autosuggest is a controlled component.\n    // This means that you need to provide an input value\n    // and an onChange handler that updates this value (see below).\n    // Suggestions also need to be provided to the Autosuggest,\n    // and they are initially empty because the Autosuggest is closed.\n    this.state = {\n      value: \"\",\n      suggestions: [],\n    };\n  }\n    \n  handleSubmit = () => {\n    if (this.state.value) {\n        window.location = `/package/${this.state.value}`\n    }\n  };\n\n  onChange = (event, { newValue }) => {\n    this.setState({\n      value: newValue,\n    });\n  };\n\n  // Autosuggest will call this function every time you need to update suggestions.\n  // You already implemented this logic above, so just use it.\n  onSuggestionsFetchRequested = ({ value }) => {\n    this.setState({\n      suggestions: getSuggestions(value),\n    });\n  };\n\n  // Autosuggest will call this function every time you need to clear suggestions.\n  onSuggestionsClearRequested = () => {\n    this.setState({\n      suggestions: [],\n    });\n  };\n\n  render() {\n    const { value, suggestions } = this.state;\n\n    // Autosuggest will pass through all these props to the input.\n    const inputProps = {\n      placeholder: \"Package\",\n      value,\n      onChange: this.onChange,\n    };\n    paths = getPackagePaths()\n    console.log(\"paths\", paths)\n    // Finally, render it!\n    return (\n        \n    <InputGroup className=\"mb-3\">\n    <Autosuggest\n        suggestions={suggestions}\n        onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n        onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n        getSuggestionValue={getSuggestionValue}\n        renderSuggestion={renderSuggestion}\n        inputProps={inputProps}\n      />\n    <InputGroup.Append>\n              <Button variant=\"outline-secondary\" onClick={this.handleSubmit}>\n                Search\n              </Button>\n            </InputGroup.Append>\n            </InputGroup>\n      \n\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}