{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/jozef/Documents/Projects/SiuNextJS/components/searchbar.js\",\n    _this = this;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from \"react\";\nimport { InputGroup, Button } from \"react-bootstrap\";\nimport Autosuggest from \"react-autosuggest\";\nimport getPackagePaths from \"../lib/packageData\"; // Imagine you have a list of languages that you'd like to autosuggest.\n\nvar languages = [{\n  name: \"C\",\n  year: 1972\n}, {\n  name: \"Elm\",\n  year: 2012\n}]; // Teach Autosuggest how to calculate suggestions for any given input value.\n\nvar getSuggestions = function getSuggestions(value) {\n  var inputValue = value.trim().toLowerCase();\n  var inputLength = inputValue.length;\n  return inputLength === 0 ? [] : languages.filter(function (lang) {\n    return lang.name.toLowerCase().slice(0, inputLength) === inputValue;\n  });\n}; // When suggestion is clicked, Autosuggest needs to populate the input\n// based on the clicked suggestion. Teach Autosuggest how to calculate the\n// input value for every given suggestion.\n\n\nvar getSuggestionValue = function getSuggestionValue(suggestion) {\n  return suggestion.name;\n}; // Use your imagination to render suggestions.\n\n\nvar renderSuggestion = function renderSuggestion(suggestion) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: suggestion.name\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 42\n  }, _this);\n};\n\nvar Searchbar = /*#__PURE__*/function (_React$Component) {\n  _inherits(Searchbar, _React$Component);\n\n  var _super = _createSuper(Searchbar);\n\n  function Searchbar() {\n    var _this2;\n\n    _classCallCheck(this, Searchbar);\n\n    _this2 = _super.call(this); // Autosuggest is a controlled component.\n    // This means that you need to provide an input value\n    // and an onChange handler that updates this value (see below).\n    // Suggestions also need to be provided to the Autosuggest,\n    // and they are initially empty because the Autosuggest is closed.\n\n    _defineProperty(_assertThisInitialized(_this2), \"onChange\", function (event, _ref) {\n      var newValue = _ref.newValue;\n\n      _this2.setState({\n        value: newValue\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this2), \"onSuggestionsFetchRequested\", function (_ref2) {\n      var value = _ref2.value;\n\n      _this2.setState({\n        suggestions: getSuggestions(value)\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this2), \"onSuggestionsClearRequested\", function () {\n      _this2.setState({\n        suggestions: []\n      });\n    });\n\n    _this2.state = {\n      value: \"\",\n      suggestions: []\n    };\n    return _this2;\n  }\n\n  _createClass(Searchbar, [{\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          value = _this$state.value,\n          suggestions = _this$state.suggestions; // Autosuggest will pass through all these props to the input.\n\n      var inputProps = {\n        placeholder: \"Package\",\n        value: value,\n        onChange: this.onChange\n      }; // Finally, render it!\n\n      return /*#__PURE__*/_jsxDEV(InputGroup, {\n        className: \"mb-3\",\n        children: [/*#__PURE__*/_jsxDEV(Autosuggest, {\n          suggestions: suggestions,\n          onSuggestionsFetchRequested: this.onSuggestionsFetchRequested,\n          onSuggestionsClearRequested: this.onSuggestionsClearRequested,\n          getSuggestionValue: getSuggestionValue,\n          renderSuggestion: renderSuggestion,\n          inputProps: inputProps\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(InputGroup.Append, {\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"outline-secondary\",\n            onClick: this.handleSubmit,\n            children: \"Search\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 5\n      }, this);\n    }\n  }]);\n\n  return Searchbar;\n}(React.Component);\n\nexport { Searchbar as default };","map":{"version":3,"sources":["/Users/jozef/Documents/Projects/SiuNextJS/components/searchbar.js"],"names":["React","InputGroup","Button","Autosuggest","getPackagePaths","languages","name","year","getSuggestions","value","inputValue","trim","toLowerCase","inputLength","length","filter","lang","slice","getSuggestionValue","suggestion","renderSuggestion","Searchbar","event","newValue","setState","suggestions","state","inputProps","placeholder","onChange","onSuggestionsFetchRequested","onSuggestionsClearRequested","handleSubmit","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {InputGroup, Button} from \"react-bootstrap\";\nimport Autosuggest from \"react-autosuggest\";\nimport getPackagePaths from \"../lib/packageData\"\n\n// Imagine you have a list of languages that you'd like to autosuggest.\nconst languages = [\n  {\n    name: \"C\",\n    year: 1972,\n  },\n  {\n    name: \"Elm\",\n    year: 2012,\n  },\n];\n\n// Teach Autosuggest how to calculate suggestions for any given input value.\nconst getSuggestions = (value) => {\n  const inputValue = value.trim().toLowerCase();\n  const inputLength = inputValue.length;\n\n  return inputLength === 0\n    ? []\n    : languages.filter(\n        (lang) => lang.name.toLowerCase().slice(0, inputLength) === inputValue\n      );\n};\n\n// When suggestion is clicked, Autosuggest needs to populate the input\n// based on the clicked suggestion. Teach Autosuggest how to calculate the\n// input value for every given suggestion.\nconst getSuggestionValue = (suggestion) => suggestion.name;\n\n// Use your imagination to render suggestions.\nconst renderSuggestion = (suggestion) => <div>{suggestion.name}</div>;\n\nexport default class Searchbar extends React.Component {\n  constructor() {\n    super();\n\n    // Autosuggest is a controlled component.\n    // This means that you need to provide an input value\n    // and an onChange handler that updates this value (see below).\n    // Suggestions also need to be provided to the Autosuggest,\n    // and they are initially empty because the Autosuggest is closed.\n    this.state = {\n      value: \"\",\n      suggestions: [],\n    };\n  }\n\n  onChange = (event, { newValue }) => {\n    this.setState({\n      value: newValue,\n    });\n  };\n\n  // Autosuggest will call this function every time you need to update suggestions.\n  // You already implemented this logic above, so just use it.\n  onSuggestionsFetchRequested = ({ value }) => {\n    this.setState({\n      suggestions: getSuggestions(value),\n    });\n  };\n\n  // Autosuggest will call this function every time you need to clear suggestions.\n  onSuggestionsClearRequested = () => {\n    this.setState({\n      suggestions: [],\n    });\n  };\n\n  render() {\n    const { value, suggestions } = this.state;\n\n    // Autosuggest will pass through all these props to the input.\n    const inputProps = {\n      placeholder: \"Package\",\n      value,\n      onChange: this.onChange,\n    };\n\n    // Finally, render it!\n    return (\n    <InputGroup className=\"mb-3\">\n    <Autosuggest\n        suggestions={suggestions}\n        onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n        onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n        getSuggestionValue={getSuggestionValue}\n        renderSuggestion={renderSuggestion}\n        inputProps={inputProps}\n      />\n    <InputGroup.Append>\n              <Button variant=\"outline-secondary\" onClick={this.handleSubmit}>\n                Search\n              </Button>\n            </InputGroup.Append>\n            </InputGroup>\n      \n\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}