{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/jozef/Documents/Projects/SiuNextJS/components/searchbar.js\";\nimport React, { useState } from \"react\";\nimport { useHistory } from 'react-router-dom';\nimport { InputGroup, Button } from \"react-bootstrap\";\nimport Autosuggest from \"react-autosuggest\";\nimport getPackagePaths from \"../lib/packageData\";\nimport AutosuggestHighlightMatch from 'autosuggest-highlight/match';\nimport AutosuggestHighlightParse from 'autosuggest-highlight/parse'; // Imagine you have a list of languages that you'd like to autosuggest.\n\nconst languages = [{\n  name: \"C\",\n  year: 1972\n}, {\n  name: \"Elm\",\n  year: 2012\n}]; // Teach Autosuggest how to calculate suggestions for any given input value.\n\nconst getSuggestions = value => {\n  const inputValue = value.trim().toLowerCase();\n  const inputLength = inputValue.length;\n  return inputLength === 0 ? [] : languages.filter(lang => lang.name.toLowerCase().slice(0, inputLength) === inputValue);\n};\n\nfunction getSuggestionValue(suggestion) {\n  return `${suggestion.name}`;\n}\n\nfunction renderSuggestion(suggestion, {\n  query\n}) {\n  const suggestionText = `${suggestion.name}`;\n  console.log(suggestionText);\n  const matches = AutosuggestHighlightMatch(suggestionText, query);\n  const parts = AutosuggestHighlightParse(suggestionText, matches);\n  console.log(matches);\n  console.log(parts);\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    className: 'suggestion-content ' + suggestion.twitter,\n    children: /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"name\",\n      children: parts.map((part, index) => {\n        const className = part.highlight ? 'highlight' : null;\n        return /*#__PURE__*/_jsxDEV(\"span\", {\n          className: className,\n          children: part.text\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 17\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 7\n  }, this);\n}\n\nfunction handleSubmit() {\n  if (this.state.value) {\n    //   alert(\"Searching for \" + this.state.value);\n    history.push(`/package/${p.title}`);\n  }\n}\n\n;\n\nfunction onChange(event, {\n  newValue\n}) {\n  this.setState({\n    value: newValue\n  });\n}\n\n;\nexport default function Searchbar() {\n  const {\n    0: value,\n    1: setValue\n  } = useState();\n  const {\n    0: suggestions,\n    1: setSuggestions\n  } = useState([]); // Autosuggest will call this function every time you need to update suggestions.\n  // You already implemented this logic above, so just use it.\n\n  onSuggestionsFetchRequested = ({\n    value\n  }) => {\n    this.setState({\n      suggestions: getSuggestions(value)\n    });\n  }; // Autosuggest will call this function every time you need to clear suggestions.\n\n\n  onSuggestionsClearRequested = () => {\n    this.setState({\n      suggestions: []\n    });\n  }; // Autosuggest will pass through all these props to the input.\n\n\n  const inputProps = {\n    placeholder: \"Package\",\n    value,\n    onChange: this.onChange\n  }; // Finally, render it!\n\n  return /*#__PURE__*/_jsxDEV(InputGroup, {\n    className: \"mb-3\",\n    children: [/*#__PURE__*/_jsxDEV(Autosuggest, {\n      suggestions: suggestions,\n      onSuggestionsFetchRequested: this.onSuggestionsFetchRequested,\n      onSuggestionsClearRequested: this.onSuggestionsClearRequested,\n      getSuggestionValue: getSuggestionValue,\n      renderSuggestion: renderSuggestion,\n      inputProps: inputProps\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(InputGroup.Append, {\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"outline-secondary\",\n        onClick: this.handleSubmit,\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["/Users/jozef/Documents/Projects/SiuNextJS/components/searchbar.js"],"names":["React","useState","useHistory","InputGroup","Button","Autosuggest","getPackagePaths","AutosuggestHighlightMatch","AutosuggestHighlightParse","languages","name","year","getSuggestions","value","inputValue","trim","toLowerCase","inputLength","length","filter","lang","slice","getSuggestionValue","suggestion","renderSuggestion","query","suggestionText","console","log","matches","parts","twitter","map","part","index","className","highlight","text","handleSubmit","state","history","push","p","title","onChange","event","newValue","setState","Searchbar","setValue","suggestions","setSuggestions","onSuggestionsFetchRequested","onSuggestionsClearRequested","inputProps","placeholder"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { useHistory } from 'react-router-dom';\nimport {InputGroup, Button} from \"react-bootstrap\";\nimport Autosuggest from \"react-autosuggest\";\nimport getPackagePaths from \"../lib/packageData\"\nimport AutosuggestHighlightMatch from 'autosuggest-highlight/match'\nimport AutosuggestHighlightParse from 'autosuggest-highlight/parse'\n\n// Imagine you have a list of languages that you'd like to autosuggest.\nconst languages = [\n  {\n    name: \"C\",\n    year: 1972,\n  },\n  {\n    name: \"Elm\",\n    year: 2012,\n  },\n];\n\n// Teach Autosuggest how to calculate suggestions for any given input value.\nconst getSuggestions = (value) => {\n  const inputValue = value.trim().toLowerCase();\n  const inputLength = inputValue.length;\n\n  return inputLength === 0\n    ? []\n    : languages.filter(\n        (lang) => lang.name.toLowerCase().slice(0, inputLength) === inputValue\n      );\n};\n\nfunction getSuggestionValue(suggestion) {\n    \n    return `${suggestion.name}`;\n  }\n\nfunction renderSuggestion(suggestion, { query }) {\n    \n    const suggestionText = `${suggestion.name}`;\n    console.log(suggestionText)\n    const matches = AutosuggestHighlightMatch(suggestionText, query);\n    const parts = AutosuggestHighlightParse(suggestionText, matches);\n    console.log(matches)\n    console.log(parts)\n    return (\n      <span className={'suggestion-content ' + suggestion.twitter}>\n        <span className=\"name\">\n          {\n            parts.map((part, index) => {\n              const className = part.highlight ? 'highlight' : null;\n  \n              return (\n                <span className={className} key={index}>{part.text}</span>\n              );\n            })\n          }\n        </span>\n      </span>\n    );\n  }\n\nfunction handleSubmit () {\n    if (this.state.value) {\n    //   alert(\"Searching for \" + this.state.value);\n        history.push(`/package/${p.title}`)\n    }\n  };\n\nfunction onChange (event, { newValue }) {\n    this.setState({\n      value: newValue,\n    });\n  };\n  \nexport default function Searchbar() {\n    const [value, setValue] = useState()\n    const [suggestions, setSuggestions] = useState([])\n    \n    \n\n\n  // Autosuggest will call this function every time you need to update suggestions.\n  // You already implemented this logic above, so just use it.\n  onSuggestionsFetchRequested = ({ value }) => {\n    this.setState({\n      suggestions: getSuggestions(value),\n    });\n  };\n\n  // Autosuggest will call this function every time you need to clear suggestions.\n  onSuggestionsClearRequested = () => {\n    this.setState({\n      suggestions: [],\n    });\n  };\n\n\n    // Autosuggest will pass through all these props to the input.\n    const inputProps = {\n      placeholder: \"Package\",\n      value,\n      onChange: this.onChange,\n    };\n\n    // Finally, render it!\n    return (\n    <InputGroup className=\"mb-3\">\n    <Autosuggest\n        suggestions={suggestions}\n        onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n        onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n        getSuggestionValue={getSuggestionValue}\n        renderSuggestion={renderSuggestion}\n        inputProps={inputProps}\n      />\n    <InputGroup.Append>\n              <Button variant=\"outline-secondary\" onClick={this.handleSubmit}>\n                Search\n              </Button>\n            </InputGroup.Append>\n            </InputGroup>\n      \n\n    );\n  }\n\n"]},"metadata":{},"sourceType":"module"}