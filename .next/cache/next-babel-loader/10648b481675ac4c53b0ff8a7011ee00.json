{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/jozef/Documents/Projects/SiuNextJS/components/searchbar.js\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport Autosuggest from 'react-autosuggest'; // Imagine you have a list of languages that you'd like to autosuggest.\n\nconst suggestions = [{\n  text: \"Apple\"\n}, {\n  text: \"Banana\"\n}, {\n  text: \"Cherry\"\n}, {\n  text: \"Grapefruit\"\n}, {\n  text: \"Lemon\"\n}]; // Teach Autosuggest how to calculate suggestions for any given input value.\n\nconst getSuggestions = value => {\n  const inputValue = value.trim().toLowerCase();\n  const inputLength = inputValue.length;\n  return inputLength === 0 ? [] : suggestion.filter(lang => lang.name.toLowerCase().slice(0, inputLength) === inputValue);\n}; // When suggestion is clicked, Autosuggest needs to populate the input\n// based on the clicked suggestion. Teach Autosuggest how to calculate the\n// input value for every given suggestion.\n\n\nconst getSuggestionValue = suggestion => suggestion.name; // Use your imagination to render suggestions.\n\n\nconst renderSuggestion = suggestion => /*#__PURE__*/_jsxDEV(\"div\", {\n  children: suggestions.text\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 40,\n  columnNumber: 3\n}, this);\n\nexport default class Searchbar extends React.Component {\n  constructor() {\n    super(); // Autosuggest is a controlled component.\n    // This means that you need to provide an input value\n    // and an onChange handler that updates this value (see below).\n    // Suggestions also need to be provided to the Autosuggest,\n    // and they are initially empty because the Autosuggest is closed.\n\n    _defineProperty(this, \"onChange\", (event, {\n      newValue\n    }) => {\n      this.setState({\n        value: newValue\n      });\n    });\n\n    _defineProperty(this, \"onSuggestionsFetchRequested\", ({\n      value\n    }) => {\n      this.setState({\n        suggestions: getSuggestions(value)\n      });\n    });\n\n    _defineProperty(this, \"onSuggestionsClearRequested\", () => {\n      this.setState({\n        suggestions: []\n      });\n    });\n\n    this.state = {\n      value: '',\n      suggestions: []\n    };\n  }\n\n  render() {\n    const {\n      value,\n      suggestions\n    } = this.state; // Autosuggest will pass through all these props to the input.\n\n    const inputProps = {\n      placeholder: 'Type a suggestion',\n      value,\n      onChange: this.onChange\n    }; // Finally, render it!\n\n    return /*#__PURE__*/_jsxDEV(Autosuggest, {\n      suggestions: suggestions,\n      onSuggestionsFetchRequested: this.onSuggestionsFetchRequested,\n      onSuggestionsClearRequested: this.onSuggestionsClearRequested,\n      getSuggestionValue: getSuggestionValue,\n      renderSuggestion: renderSuggestion,\n      inputProps: inputProps\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/jozef/Documents/Projects/SiuNextJS/components/searchbar.js"],"names":["React","Autosuggest","suggestions","text","getSuggestions","value","inputValue","trim","toLowerCase","inputLength","length","suggestion","filter","lang","name","slice","getSuggestionValue","renderSuggestion","Searchbar","Component","constructor","event","newValue","setState","state","render","inputProps","placeholder","onChange","onSuggestionsFetchRequested","onSuggestionsClearRequested"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,mBAAxB,C,CAEA;;AACA,MAAMC,WAAW,GAAG,CAChB;AACEC,EAAAA,IAAI,EAAE;AADR,CADgB,EAIhB;AACEA,EAAAA,IAAI,EAAE;AADR,CAJgB,EAOhB;AACEA,EAAAA,IAAI,EAAE;AADR,CAPgB,EAUhB;AACEA,EAAAA,IAAI,EAAE;AADR,CAVgB,EAahB;AACEA,EAAAA,IAAI,EAAE;AADR,CAbgB,CAApB,C,CAkBA;;AACA,MAAMC,cAAc,GAAGC,KAAK,IAAI;AAC9B,QAAMC,UAAU,GAAGD,KAAK,CAACE,IAAN,GAAaC,WAAb,EAAnB;AACA,QAAMC,WAAW,GAAGH,UAAU,CAACI,MAA/B;AAEA,SAAOD,WAAW,KAAK,CAAhB,GAAoB,EAApB,GAAyBE,UAAU,CAACC,MAAX,CAAkBC,IAAI,IACpDA,IAAI,CAACC,IAAL,CAAUN,WAAV,GAAwBO,KAAxB,CAA8B,CAA9B,EAAiCN,WAAjC,MAAkDH,UADpB,CAAhC;AAGD,CAPD,C,CASA;AACA;AACA;;;AACA,MAAMU,kBAAkB,GAAGL,UAAU,IAAIA,UAAU,CAACG,IAApD,C,CAEA;;;AACA,MAAMG,gBAAgB,GAAGN,UAAU,iBACjC;AAAA,YACGT,WAAW,CAACC;AADf;AAAA;AAAA;AAAA;AAAA,QADF;;AAMA,eAAe,MAAMe,SAAN,SAAwBlB,KAAK,CAACmB,SAA9B,CAAwC;AACrDC,EAAAA,WAAW,GAAG;AACZ,YADY,CAGZ;AACA;AACA;AACA;AACA;;AAPY,sCAcH,CAACC,KAAD,EAAQ;AAAEC,MAAAA;AAAF,KAAR,KAAyB;AAClC,WAAKC,QAAL,CAAc;AACZlB,QAAAA,KAAK,EAAEiB;AADK,OAAd;AAGD,KAlBa;;AAAA,yDAsBgB,CAAC;AAAEjB,MAAAA;AAAF,KAAD,KAAe;AAC3C,WAAKkB,QAAL,CAAc;AACZrB,QAAAA,WAAW,EAAEE,cAAc,CAACC,KAAD;AADf,OAAd;AAGD,KA1Ba;;AAAA,yDA6BgB,MAAM;AAClC,WAAKkB,QAAL,CAAc;AACZrB,QAAAA,WAAW,EAAE;AADD,OAAd;AAGD,KAjCa;;AAQZ,SAAKsB,KAAL,GAAa;AACXnB,MAAAA,KAAK,EAAE,EADI;AAEXH,MAAAA,WAAW,EAAE;AAFF,KAAb;AAID;;AAuBDuB,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEpB,MAAAA,KAAF;AAASH,MAAAA;AAAT,QAAyB,KAAKsB,KAApC,CADO,CAGP;;AACA,UAAME,UAAU,GAAG;AACjBC,MAAAA,WAAW,EAAE,mBADI;AAEjBtB,MAAAA,KAFiB;AAGjBuB,MAAAA,QAAQ,EAAE,KAAKA;AAHE,KAAnB,CAJO,CAUP;;AACA,wBACE,QAAC,WAAD;AACE,MAAA,WAAW,EAAE1B,WADf;AAEE,MAAA,2BAA2B,EAAE,KAAK2B,2BAFpC;AAGE,MAAA,2BAA2B,EAAE,KAAKC,2BAHpC;AAIE,MAAA,kBAAkB,EAAEd,kBAJtB;AAKE,MAAA,gBAAgB,EAAEC,gBALpB;AAME,MAAA,UAAU,EAAES;AANd;AAAA;AAAA;AAAA;AAAA,YADF;AAUD;;AAzDoD","sourcesContent":["import React from 'react';\nimport Autosuggest from 'react-autosuggest';\n\n// Imagine you have a list of languages that you'd like to autosuggest.\nconst suggestions = [\n    {\n      text: \"Apple\"\n    },\n    {\n      text: \"Banana\"\n    },\n    {\n      text: \"Cherry\"\n    },\n    {\n      text: \"Grapefruit\"\n    },\n    {\n      text: \"Lemon\"\n    }\n  ];\n\n// Teach Autosuggest how to calculate suggestions for any given input value.\nconst getSuggestions = value => {\n  const inputValue = value.trim().toLowerCase();\n  const inputLength = inputValue.length;\n\n  return inputLength === 0 ? [] : suggestion.filter(lang =>\n    lang.name.toLowerCase().slice(0, inputLength) === inputValue\n  );\n};\n\n// When suggestion is clicked, Autosuggest needs to populate the input\n// based on the clicked suggestion. Teach Autosuggest how to calculate the\n// input value for every given suggestion.\nconst getSuggestionValue = suggestion => suggestion.name;\n\n// Use your imagination to render suggestions.\nconst renderSuggestion = suggestion => (\n  <div>\n    {suggestions.text}\n  </div>\n);\n\nexport default class Searchbar extends React.Component {\n  constructor() {\n    super();\n\n    // Autosuggest is a controlled component.\n    // This means that you need to provide an input value\n    // and an onChange handler that updates this value (see below).\n    // Suggestions also need to be provided to the Autosuggest,\n    // and they are initially empty because the Autosuggest is closed.\n    this.state = {\n      value: '',\n      suggestions: []\n    };\n  }\n\n  onChange = (event, { newValue }) => {\n    this.setState({\n      value: newValue\n    });\n  };\n\n  // Autosuggest will call this function every time you need to update suggestions.\n  // You already implemented this logic above, so just use it.\n  onSuggestionsFetchRequested = ({ value }) => {\n    this.setState({\n      suggestions: getSuggestions(value)\n    });\n  };\n\n  // Autosuggest will call this function every time you need to clear suggestions.\n  onSuggestionsClearRequested = () => {\n    this.setState({\n      suggestions: []\n    });\n  };\n\n  render() {\n    const { value, suggestions } = this.state;\n\n    // Autosuggest will pass through all these props to the input.\n    const inputProps = {\n      placeholder: 'Type a suggestion',\n      value,\n      onChange: this.onChange\n    };\n\n    // Finally, render it!\n    return (\n      <Autosuggest\n        suggestions={suggestions}\n        onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n        onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n        getSuggestionValue={getSuggestionValue}\n        renderSuggestion={renderSuggestion}\n        inputProps={inputProps}\n      />\n    );\n  }\n}"]},"metadata":{},"sourceType":"module"}