{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/jozef/Documents/Projects/SiuNextJS/components/searchbar.js\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { InputGroup, Button } from \"react-bootstrap\";\nimport Autosuggest from \"react-autosuggest\";\nimport { getPackagePaths } from \"../lib/packageData\";\nimport AutosuggestHighlightMatch from \"autosuggest-highlight/match\";\nimport AutosuggestHighlightParse from \"autosuggest-highlight/parse\"; // Imagine you have a list of languages that you'd like to autosuggest.\n\nconst languages = [{\n  name: \"React\"\n}, {\n  name: \"Vue\"\n}, {\n  name: \"Mocha\"\n}]; // Teach Autosuggest how to calculate suggestions for any given input value.\n\nconst getSuggestions = value => {\n  const inputValue = value.trim().toLowerCase();\n  const inputLength = inputValue.length;\n  return inputLength === 0 ? [] : languages.filter(lang => lang.name.toLowerCase().slice(0, inputLength) === inputValue);\n};\n\nfunction getSuggestionValue(suggestion) {\n  return `${suggestion.name}`;\n}\n\nfunction renderSuggestion(suggestion, {\n  query\n}) {\n  const suggestionText = `${suggestion.name}`;\n  console.log(suggestionText);\n  const matches = AutosuggestHighlightMatch(suggestionText, query);\n  const parts = AutosuggestHighlightParse(suggestionText, matches); // console.log(matches)\n  // console.log(parts)\n\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    className: \"suggestion-content \" + suggestion.twitter,\n    children: /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"name\",\n      children: parts.map((part, index) => {\n        const className = part.highlight ? \"highlight\" : null;\n        return /*#__PURE__*/_jsxDEV(\"span\", {\n          className: className,\n          children: part.text\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n\nexport default class Searchbar extends React.Component {\n  constructor() {\n    super(); // Autosuggest is a controlled component.\n    // This means that you need to provide an input value\n    // and an onChange handler that updates this value (see below).\n    // Suggestions also need to be provided to the Autosuggest,\n    // and they are initially empty because the Autosuggest is closed.\n\n    _defineProperty(this, \"handleSubmit\", () => {\n      if (this.state.value) {\n        window.location = `/package/${this.state.value}`;\n      }\n    });\n\n    _defineProperty(this, \"onChange\", (event, {\n      newValue\n    }) => {\n      this.setState({\n        value: newValue\n      });\n    });\n\n    _defineProperty(this, \"onSuggestionsFetchRequested\", ({\n      value\n    }) => {\n      this.setState({\n        suggestions: getSuggestions(value)\n      });\n    });\n\n    _defineProperty(this, \"onSuggestionsClearRequested\", () => {\n      this.setState({\n        suggestions: []\n      });\n    });\n\n    this.state = {\n      value: \"\",\n      suggestions: []\n    };\n  }\n\n  render() {\n    const {\n      value,\n      suggestions\n    } = this.state; // Autosuggest will pass through all these props to the input.\n\n    const inputProps = {\n      placeholder: \"Package\",\n      value,\n      onChange: this.onChange\n    };\n    let paths = getPackagePaths();\n    console.log(\"paths\", paths); // let pathsexp = paths.map((record) => {\n    //     console.log(\"records\")\n    //     console.log(record.title)\n    //     return(record.title)})\n    // console.log(pathsexp)\n    // Finally, render it!\n\n    return /*#__PURE__*/_jsxDEV(InputGroup, {\n      className: \"mb-3\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: this.handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(Autosuggest, {\n          suggestions: suggestions,\n          onSuggestionsFetchRequested: this.onSuggestionsFetchRequested,\n          onSuggestionsClearRequested: this.onSuggestionsClearRequested,\n          getSuggestionValue: getSuggestionValue,\n          renderSuggestion: renderSuggestion,\n          inputProps: inputProps\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(InputGroup.Append, {\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            variant: \"outline-secondary\",\n            children: \"Search\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/jozef/Documents/Projects/SiuNextJS/components/searchbar.js"],"names":["React","useHistory","InputGroup","Button","Autosuggest","getPackagePaths","AutosuggestHighlightMatch","AutosuggestHighlightParse","languages","name","getSuggestions","value","inputValue","trim","toLowerCase","inputLength","length","filter","lang","slice","getSuggestionValue","suggestion","renderSuggestion","query","suggestionText","console","log","matches","parts","twitter","map","part","index","className","highlight","text","Searchbar","Component","constructor","state","window","location","event","newValue","setState","suggestions","render","inputProps","placeholder","onChange","paths","handleSubmit","onSuggestionsFetchRequested","onSuggestionsClearRequested"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { InputGroup, Button } from \"react-bootstrap\";\nimport Autosuggest from \"react-autosuggest\";\nimport { getPackagePaths } from \"../lib/packageData\";\nimport AutosuggestHighlightMatch from \"autosuggest-highlight/match\";\nimport AutosuggestHighlightParse from \"autosuggest-highlight/parse\";\n\n// Imagine you have a list of languages that you'd like to autosuggest.\nconst languages = [\n  {\n    name: \"React\",\n  },\n  {\n    name: \"Vue\",\n  },\n  {\n    name: \"Mocha\",\n  },\n];\n\n// Teach Autosuggest how to calculate suggestions for any given input value.\nconst getSuggestions = (value) => {\n  const inputValue = value.trim().toLowerCase();\n  const inputLength = inputValue.length;\n\n  return inputLength === 0\n    ? []\n    : languages.filter(\n        (lang) => lang.name.toLowerCase().slice(0, inputLength) === inputValue\n      );\n};\n\nfunction getSuggestionValue(suggestion) {\n  return `${suggestion.name}`;\n}\n\nfunction renderSuggestion(suggestion, { query }) {\n  const suggestionText = `${suggestion.name}`;\n  console.log(suggestionText);\n  const matches = AutosuggestHighlightMatch(suggestionText, query);\n  const parts = AutosuggestHighlightParse(suggestionText, matches);\n  // console.log(matches)\n  // console.log(parts)\n  return (\n    <span className={\"suggestion-content \" + suggestion.twitter}>\n      <span className=\"name\">\n        {parts.map((part, index) => {\n          const className = part.highlight ? \"highlight\" : null;\n\n          return (\n            <span className={className} key={index}>\n              {part.text}\n            </span>\n          );\n        })}\n      </span>\n    </span>\n  );\n}\n\nexport default class Searchbar extends React.Component {\n  constructor() {\n    super();\n\n    // Autosuggest is a controlled component.\n    // This means that you need to provide an input value\n    // and an onChange handler that updates this value (see below).\n    // Suggestions also need to be provided to the Autosuggest,\n    // and they are initially empty because the Autosuggest is closed.\n    this.state = {\n      value: \"\",\n      suggestions: [],\n    };\n  }\n\n  handleSubmit = () => {\n    if (this.state.value) {\n      window.location = `/package/${this.state.value}`;\n    }\n  };\n\n  onChange = (event, { newValue }) => {\n    this.setState({\n      value: newValue,\n    });\n  };\n\n  // Autosuggest will call this function every time you need to update suggestions.\n  // You already implemented this logic above, so just use it.\n  onSuggestionsFetchRequested = ({ value }) => {\n    this.setState({\n      suggestions: getSuggestions(value),\n    });\n  };\n\n  // Autosuggest will call this function every time you need to clear suggestions.\n  onSuggestionsClearRequested = () => {\n    this.setState({\n      suggestions: [],\n    });\n  };\n\n  render() {\n    const { value, suggestions } = this.state;\n\n    // Autosuggest will pass through all these props to the input.\n    const inputProps = {\n      placeholder: \"Package\",\n      value,\n      onChange: this.onChange,\n    };\n    let paths = getPackagePaths();\n    console.log(\"paths\", paths);\n    // let pathsexp = paths.map((record) => {\n    //     console.log(\"records\")\n    //     console.log(record.title)\n    //     return(record.title)})\n    // console.log(pathsexp)\n    // Finally, render it!\n    return (\n      <InputGroup className=\"mb-3\">\n        <form onSubmit={this.handleSubmit}>\n          <Autosuggest\n            suggestions={suggestions}\n            onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n            onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n            getSuggestionValue={getSuggestionValue}\n            renderSuggestion={renderSuggestion}\n            inputProps={inputProps}\n          />\n          <InputGroup.Append>\n            <Button type=\"submit\" variant=\"outline-secondary\">\n              Search\n            </Button>\n          </InputGroup.Append>\n        </form>\n      </InputGroup>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}